openapi: 3.0.1
info:
  title: api.heiaheia.com
  version: '2'
  description: |
    This document describes how to use the HeiaHeia API.
    - [Authorization](https://github.com/HeiaHeia/api-docs/blob/master/authorization.md)
    - [Authentication](https://github.com/HeiaHeia/api-docs/blob/master/authentication.md)
    - [Error Codes & Responses](https://github.com/HeiaHeia/api-docs/blob/master/errors-responses.md)
    - [Date & DateTime format](https://github.com/HeiaHeia/api-docs/blob/master/date-format.md)
servers:
  - url: 'https://api.heiaheia.com/v2'
tags:
  - name: cheer_types
    description: Cheer types
  - name: comments
    description: Comments
  - name: conversations
    description: Conversations
  - name: emails
    description: Emails
  - name: feeds
    description: Feeds
  - name: free_entries
    description: Free entries
  - name: friends
    description: Friends
  - name: invites
    description: Invites
  - name: items
    description: Items
  - name: libraries
    description: Libraries
  - name: me
    description: Me
  - name: medals
    description: Medals
  - name: media
    description: Media
  - name: megaphones
    description: Megaphones
  - name: messages
    description: Messages
  - name: notifications
    description: Notifications
  - name: organisations
    description: Organisations
  - name: personal_programs
    description: Personal programs
  - name: places
    description: Places
  - name: planned_surveys
    description: Planned surveys
  - name: point_systems
    description: Point systems
  - name: program_folders
    description: Program folders
  - name: programs
    description: Programs
  - name: pymk
    description: PYMK
  - name: recurring_surveys
    description: Recurring surveys
  - name: requests
    description: Requests
  - name: reset_password
    description: Reset password
  - name: sick_days
    description: Sick days
  - name: sport_categories
    description: Sport categories
  - name: sports
    description: Sports
  - name: survey_results
    description: Survey results
  - name: surveys
    description: Surveys
  - name: tags
    description: Tags
  - name: tips
    description: Tips
  - name: top_sports
    description: Top Sports
  - name: training_goals
    description: Training Goals
  - name: training_logs
    description: Training logs
  - name: users
    description: Users
  - name: wearables
    description: Wearable device services
  - name: weekly_point_system_summaries
    description: Weekly point system summaries
  - name: weekly_summaries
    description: Weekly summaries
  - name: weights
    description: Weights
  - name: wellness_entries
    description: Wellness entries
  - name: wellness_types
    description: Wellness entry types
paths:
  /cheer_types:
    get:
      tags:
        - cheer_types
      summary: Available cheer types
      description: Cheers refilled on Monday.
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheerType'
  '/comments/{id}':
    delete:
      tags:
        - comments
      summary: Delete a comment entry
      parameters:
        - name: id
          in: path
          description: ID of comment that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  /conversations:
    get:
      tags:
        - conversations
      summary: List of conversations
      parameters:
        - name: by_conversation
          in: query
          description: When true also team related conversations are returned
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
    post:
      tags:
        - conversations
      summary: Create or fetch conversation
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                user_id:
                  type: integer
                  description: >-
                    The user for whom to create or fetch a conversation. Either
                    this or group_id must be provided
                  format: int64
                group_id:
                  type: integer
                  description: >-
                    The group for which to create or fetch a conversation.
                    Either this or user_id must be provided
                  format: int64
          multipart/form-data:
            schema:
              properties:
                user_id:
                  type: integer
                  description: >-
                    The user for whom to create or fetch a conversation. Either
                    this or group_id must be provided
                  format: int64
                group_id:
                  type: integer
                  description: >-
                    The group for which to create or fetch a conversation.
                    Either this or user_id must be provided
                  format: int64
          application/json:
            schema:
              properties:
                user_id:
                  type: integer
                  description: >-
                    The user for whom to create or fetch a conversation. Either
                    this or group_id must be provided
                  format: int64
                group_id:
                  type: integer
                  description: >-
                    The group for which to create or fetch a conversation.
                    Either this or user_id must be provided
                  format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Conversation'
  /conversations/unread:
    get:
      tags:
        - conversations
      summary: List of unread conversations
      parameters:
        - name: by_conversation
          in: query
          description: When true also team related conversations are returned
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
  '/conversations/{id}':
    put:
      tags:
        - conversations
      summary: Mark as read
      parameters:
        - name: id
          in: path
          description: >-
            Identifier of the conversation. When by_conversation is omitted or
            false this is the conversation partner (user) id
          required: true
          schema:
            type: integer
            format: int64
        - name: by_conversation
          in: query
          description: Specifies how the id parameter should be handled
          schema:
            type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Conversation'
    delete:
      tags:
        - conversations
      summary: >-
        Delete conversation. Note: This operation is currently not allowed when
        by_conversation is true
      parameters:
        - name: id
          in: path
          description: >-
            Identifier of the conversation. When by_conversation is omitted or
            false this is the conversation partner (user) id
          required: true
          schema:
            type: integer
            format: int64
        - name: by_conversation
          in: query
          description: Specifies how the id parameter should be handled
          schema:
            type: boolean
      responses:
        '200':
          description: No response was specified
          content: {}
  '/conversations/{id}/messages':
    get:
      tags:
        - conversations
      summary: Get list of messages from conversation.
      parameters:
        - name: id
          in: path
          description: >-
            Identifier of the conversation. When by_conversation is omitted or
            false this is the conversation partner (user) id
          required: true
          schema:
            type: integer
            format: int64
        - name: by_conversation
          in: query
          description: Specifies how the id parameter should be handled
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      tags:
        - conversations
      summary: Create a new message
      parameters:
        - name: id
          in: path
          description: >-
            Identifier of the conversation. When by_conversation is omitted or
            false this is the conversation partner (user) id
          required: true
          schema:
            type: integer
            format: int64
        - name: by_conversation
          in: query
          description: Specifies how the id parameter should be handled
          schema:
            type: boolean
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - body
              properties:
                body:
                  type: string
                  description: Required if image param blank.
                image:
                  type: string
                  description: 'The file, support only .JPEG and .PNG format.'
                  format: binary
          multipart/form-data:
            schema:
              required:
                - body
              properties:
                body:
                  type: string
                  description: Required if image param blank.
                image:
                  type: string
                  description: 'The file, support only .JPEG and .PNG format.'
                  format: binary
          application/json:
            schema:
              required:
                - body
              properties:
                body:
                  type: string
                  description: Required if image param blank.
                image:
                  type: string
                  description: 'The file, support only .JPEG and .PNG format.'
                  format: binary
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Message'
  /email/verify:
    put:
      tags:
        - emails
      summary: Verify email
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                email:
                  type: string
          multipart/form-data:
            schema:
              properties:
                email:
                  type: string
          application/json:
            schema:
              properties:
                email:
                  type: string
      responses:
        '200':
          description: No response was specified
          content: {}
  /feeds:
    get:
      tags:
        - feeds
      summary: Finds feeds
      description: >-
        The 'TextEntry' special kind of entry that can not be cheered and
        commented. This kind of entry contain atttributes 'actor', 'description'
        and 'dictionary'. The 'actor' field is a 'CompactUser' object
        identifying the user who performed the action that resulted in the
        creation of this text entry. The 'description' attribute has special
        format contain embedded entries: <pre>{{User:3}}'s training goal
        ({{TrainingGoal:1}})</pre> <br> The information about embedded entries
        stored in 'dictionary' atrribute in format 'dictionary['kind:id']':
        <pre>{
         "dictionary": {
            "User:3": {
              "kind": "User",
              "name": "Bender Bending Rodríguez",
              "url": "https://api.heiaheia.com/v2/users/3"
            },
            "TrainingGoal:1": {
              "kind": "TrainingGoal",
              "name": "I’m gonna go build my own theme park, with blackjack and hookers!",
              "url": "https://api.heiaheia.com/v2/training_goals/1"
            }
          }
        }</pre>
      parameters:
        - name: since
          in: query
          description: The ID of the feed entry that you’ve seen.
          schema:
            type: integer
            format: int64
        - name: direction
          in: query
          description: Direction
          schema:
            type: string
            default: desc
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feed'
  '/feeds/{id}':
    get:
      tags:
        - feeds
      summary: Find feed by ID
      description: >-
        The 'TextEntry' special kind of entry that can not be cheered and
        commented. This kind of entry contain atttributes 'actor', 'description'
        and 'dictionary'. The 'actor' field is a 'CompactUser' object
        identifying the user who performed the action that resulted in the
        creation of this text entry. The 'description' attribute has special
        format contain embedded entries: <pre>{{User:3}}'s training goal
        ({{TrainingGoal:1}})</pre> <br> The information about embedded entries
        stored in 'dictionary' atrribute in format 'dictionary['kind:id']':
        <pre>{
         "dictionary": {
            "User:3": {
              "kind": "User",
              "name": "Bender Bending Rodríguez",
              "url": "https://api.heiaheia.com/v2/users/3"
            },
            "TrainingGoal:1": {
              "kind": "TrainingGoal",
              "name": "I’m gonna go build my own theme park, with blackjack and hookers!",
              "url": "https://api.heiaheia.com/v2/training_goals/1"
            }
          }
        }</pre>
      parameters:
        - name: id
          in: path
          description: The id of the feed.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Feed'
  /free_entries:
    get:
      tags:
        - free_entries
      summary: Finds free entries
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreeEntry'
    post:
      tags:
        - free_entries
      summary: Add a new free entry
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          multipart/form-data:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          application/json:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FreeEntry'
  /free_entries/years:
    get:
      tags:
        - free_entries
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/free_entries/{free_entry_id}/cheers':
    get:
      tags:
        - free_entries
      summary: Get list of cheers
      parameters:
        - name: free_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - free_entries
      summary: Add a new cheer
      parameters:
        - name: free_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/free_entries/{free_entry_id}/comments':
    get:
      tags:
        - free_entries
      summary: Get list of comments
      parameters:
        - name: free_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - free_entries
      summary: Add a new comment
      parameters:
        - name: free_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  '/free_entries/{id}':
    get:
      tags:
        - free_entries
      summary: Find free entry by ID
      parameters:
        - name: id
          in: path
          description: The id of the free entry.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FreeEntry'
    put:
      tags:
        - free_entries
      summary: Update an existing free entry
      parameters:
        - name: id
          in: path
          description: ID of free entry that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          multipart/form-data:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          application/json:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FreeEntry'
    delete:
      tags:
        - free_entries
      summary: Delete free entry
      parameters:
        - name: id
          in: path
          description: ID of free entry that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  /friends:
    get:
      tags:
        - friends
      summary: My friends
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompactUser'
  /friends/requests:
    get:
      tags:
        - friends
      summary: My friend requests
      parameters:
        - name: status
          in: query
          description: >-
            <pre>pending</pre> when you sent the friend request
            <pre>requested</pre> when friend request was sent to you
          required: true
          schema:
            type: string
            default: requested
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompactUser'
  '/friends/{user_id}':
    put:
      tags:
        - friends
      summary: Create or accept friendship requests
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CompactUser'
    delete:
      tags:
        - friends
      summary: Decline friendship requests or delete users from friends
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  /invites:
    post:
      tags:
        - invites
      summary: Send an invitation for yourself.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - company_code
                - email
                - first_name
              properties:
                company_code:
                  type: string
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
          multipart/form-data:
            schema:
              required:
                - company_code
                - email
                - first_name
              properties:
                company_code:
                  type: string
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
          application/json:
            schema:
              required:
                - company_code
                - email
                - first_name
              properties:
                company_code:
                  type: string
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
        required: true
      responses:
        '200':
          description: No response was specified
          content: {}
  '/invites/{id}':
    get:
      tags:
        - invites
      summary: Find invite by ID
      parameters:
        - name: id
          in: path
          description: The id of the invite.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Invite'
  /items:
    get:
      tags:
        - items
      summary: Finds items
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /items/agenda:
    get:
      tags:
        - items
      summary: Finds agenda items
      parameters:
        - name: start_date
          in: path
          description: Fetch agenda starting from this date (inclusive)
          required: true
          schema:
            type: string
            format: date
        - name: end_date
          in: path
          description: Fetch agenda until this date (inclusive)
          required: true
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /items/years:
    get:
      tags:
        - items
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/items/{id}':
    get:
      tags:
        - items
      summary: Find item by ID
      parameters:
        - name: id
          in: path
          description: The id of the item.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Item'
  /libraries:
    get:
      tags:
        - libraries
      summary: Lists available content libraries
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Library'
  /libraries/training_logs:
    post:
      tags:
        - libraries
      summary: Clone a training log entry
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
                - id
                - status
              properties:
                id:
                  type: integer
                  description: ID of training log entry from the library
                  format: int64
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                status:
                  type: string
                  default: regular
          multipart/form-data:
            schema:
              required:
                - date
                - id
                - status
              properties:
                id:
                  type: integer
                  description: ID of training log entry from the library
                  format: int64
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                status:
                  type: string
                  default: regular
          application/json:
            schema:
              required:
                - date
                - id
                - status
              properties:
                id:
                  type: integer
                  description: ID of training log entry from the library
                  format: int64
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                status:
                  type: string
                  default: regular
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingLog'
  /libraries/wellness_entries:
    post:
      tags:
        - libraries
      summary: Clone a wellness entry
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
                - id
                - status
              properties:
                id:
                  type: integer
                  description: ID of wellness entry from the library
                  format: int64
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                status:
                  type: string
                  default: regular
          multipart/form-data:
            schema:
              required:
                - date
                - id
                - status
              properties:
                id:
                  type: integer
                  description: ID of wellness entry from the library
                  format: int64
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                status:
                  type: string
                  default: regular
          application/json:
            schema:
              required:
                - date
                - id
                - status
              properties:
                id:
                  type: integer
                  description: ID of wellness entry from the library
                  format: int64
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                status:
                  type: string
                  default: regular
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
  /libraries/workouts:
    get:
      tags:
        - libraries
      summary: List of available workouts
      description: >-
        More information about structure can ba found here:
        https://paper.dropbox.com/doc/Better-Life-API-description--AWHof1lxWZLkWJxRpAf4_UVkAg-zYuIzunnfjOtijGR5BiwX#:uid=038703152342316731380785&h2=Workout-Library
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: object
  '/libraries/{id}':
    get:
      tags:
        - libraries
      summary: Find library by ID
      parameters:
        - name: id
          in: path
          description: The id of the library.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Library'
  '/libraries/{library_id}/folders':
    get:
      tags:
        - libraries
      summary: List library folders
      parameters:
        - name: library_id
          in: path
          description: The id of the library whose folders to list.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryFolder'
  '/libraries/{library_id}/folders/{folder_id}/items':
    get:
      tags:
        - libraries
      summary: List library folder items
      parameters:
        - name: library_id
          in: path
          description: The id of the library containing the folder whose items to list.
          required: true
          schema:
            type: integer
            format: int64
        - name: folder_id
          in: path
          description: The id of the folder whose items to list.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryItem'
  '/libraries/{library_id}/folders/{folder_id}/items/{id}':
    get:
      tags:
        - libraries
      summary: Find library item by ID
      parameters:
        - name: library_id
          in: path
          description: The id of the library.
          required: true
          schema:
            type: integer
            format: int64
        - name: folder_id
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: The id of the item.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LibraryItem'
  '/libraries/{library_id}/folders/{id}':
    get:
      tags:
        - libraries
      summary: Find library folder by ID
      parameters:
        - name: library_id
          in: path
          description: The id of the library.
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: The id of the folder.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LibraryFolder'
  '/libraries/{library_id}/items':
    get:
      tags:
        - libraries
      summary: List library item
      parameters:
        - name: library_id
          in: path
          description: The id of the library whose items to list.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryItem'
  '/libraries/{library_id}/items/{id}':
    get:
      tags:
        - libraries
      summary: Find library item by ID
      parameters:
        - name: library_id
          in: path
          description: The id of the library.
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: The id of the item.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LibraryItem'
  /me:
    get:
      tags:
        - me
      summary: Logged in user
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - me
      summary: Update logged in user
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                locale:
                  type: string
                measurement_units:
                  type: string
                privacy:
                  type: string
                birthdate:
                  type: string
                  description: Format YYYY-MM-DD
                  format: date
                gender:
                  type: string
                my_sports:
                  type: string
                records_and_highlights:
                  type: string
                linked_with_mixpanel:
                  type: boolean
                daily_steps_target:
                  type: integer
                  format: int32
                sleep_target:
                  type: integer
                  description: Daily sleep target in minutes
                  format: int32
          multipart/form-data:
            schema:
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                locale:
                  type: string
                measurement_units:
                  type: string
                privacy:
                  type: string
                birthdate:
                  type: string
                  description: Format YYYY-MM-DD
                  format: date
                gender:
                  type: string
                my_sports:
                  type: string
                records_and_highlights:
                  type: string
                linked_with_mixpanel:
                  type: boolean
                daily_steps_target:
                  type: integer
                  format: int32
                sleep_target:
                  type: integer
                  description: Daily sleep target in minutes
                  format: int32
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                locale:
                  type: string
                measurement_units:
                  type: string
                privacy:
                  type: string
                birthdate:
                  type: string
                  description: Format YYYY-MM-DD
                  format: date
                gender:
                  type: string
                my_sports:
                  type: string
                records_and_highlights:
                  type: string
                linked_with_mixpanel:
                  type: boolean
                daily_steps_target:
                  type: integer
                  format: int32
                sleep_target:
                  type: integer
                  description: Daily sleep target in minutes
                  format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - me
      summary: Deletes the user account of the logged in user
      responses:
        '200':
          description: No response was specified
          content: {}
  /me/avatar:
    put:
      tags:
        - me
      summary: Update user avatar
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                image:
                  type: string
                  description: >-
                    The image should be square size, support only .JPEG and .PNG
                    format.
                  format: binary
          multipart/form-data:
            schema:
              properties:
                image:
                  type: string
                  description: >-
                    The image should be square size, support only .JPEG and .PNG
                    format.
                  format: binary
          application/json:
            schema:
              properties:
                image:
                  type: string
                  description: >-
                    The image should be square size, support only .JPEG and .PNG
                    format.
                  format: binary
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CompactUser'
    delete:
      tags:
        - me
      summary: Delete avatar
      responses:
        '200':
          description: No response was specified
          content: {}
  /me/consents:
    get:
      tags:
        - me
      summary: List the consents the user has given
      parameters:
        - name: scope
          in: query
          description: >-
            Restricts consents to return by scope. Supported scopes are 'hh' and
            'org_surveys'.
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserConsent'
    post:
      tags:
        - me
      summary: Adds new consent given by the user
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                scope:
                  type: string
                  description: >-
                    The scope of the given consent. Supported scopes are 'hh'
                    and 'org_surveys'.
                consent_type:
                  type: string
                  description: >-
                    The type of consent that was given. Supported types are
                    'terms_of_service' and 'privacy_policy'.
          multipart/form-data:
            schema:
              properties:
                scope:
                  type: string
                  description: >-
                    The scope of the given consent. Supported scopes are 'hh'
                    and 'org_surveys'.
                consent_type:
                  type: string
                  description: >-
                    The type of consent that was given. Supported types are
                    'terms_of_service' and 'privacy_policy'.
          application/json:
            schema:
              properties:
                scope:
                  type: string
                  description: >-
                    The scope of the given consent. Supported scopes are 'hh'
                    and 'org_surveys'.
                consent_type:
                  type: string
                  description: >-
                    The type of consent that was given. Supported types are
                    'terms_of_service' and 'privacy_policy'.
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserConsent'
  /medals:
    get:
      tags:
        - medals
      summary: Medals of current user
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medal'
  /medals/years:
    get:
      tags:
        - medals
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/medals/{id}':
    get:
      tags:
        - medals
      summary: Get a medal by ID
      parameters:
        - name: id
          in: path
          description: The id of the medal
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Medal'
  '/medals/{medal_id}/cheers':
    get:
      tags:
        - medals
      summary: Get list of cheers
      parameters:
        - name: medal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - medals
      summary: Add a new cheer
      parameters:
        - name: medal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/medals/{medal_id}/comments':
    get:
      tags:
        - medals
      summary: Get list of comments
      parameters:
        - name: medal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - medals
      summary: Add a new comment
      parameters:
        - name: medal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /media:
    post:
      tags:
        - media
      summary: Add a new media
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - entry_id
                - entry_type
              properties:
                entry_id:
                  type: integer
                  format: int64
                entry_type:
                  type: string
                  default: regular
                file:
                  type: string
                  description: 'The file, support only .JPEG and .PNG format.'
                  format: binary
                notes:
                  type: string
                  description: Informal notes for the entry.
          multipart/form-data:
            schema:
              required:
                - entry_id
                - entry_type
              properties:
                entry_id:
                  type: integer
                  format: int64
                entry_type:
                  type: string
                  default: regular
                file:
                  type: string
                  description: 'The file, support only .JPEG and .PNG format.'
                  format: binary
                notes:
                  type: string
                  description: Informal notes for the entry.
          application/json:
            schema:
              required:
                - entry_id
                - entry_type
              properties:
                entry_id:
                  type: integer
                  format: int64
                entry_type:
                  type: string
                  default: regular
                file:
                  type: string
                  description: 'The file, support only .JPEG and .PNG format.'
                  format: binary
                notes:
                  type: string
                  description: Informal notes for the entry.
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Media'
  '/media/{id}':
    get:
      tags:
        - media
      summary: Find media by ID
      parameters:
        - name: id
          in: path
          description: The id of the media.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Media'
    delete:
      tags:
        - media
      summary: Delete media
      parameters:
        - name: id
          in: path
          description: ID of media that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  /megaphones:
    get:
      tags:
        - megaphones
      summary: Finds megaphones
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Megaphone'
    post:
      tags:
        - megaphones
      summary: Add a new megaphone
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - notes
                - organisation_id
              properties:
                organisation_id:
                  type: integer
                  format: int64
                notify:
                  type: boolean
                  description: >-
                    Set to false to skip generating feed entries and
                    notifications; update to true later when media uploads are
                    finished
                notes:
                  type: string
                  description: Informal notes for the entry.
          multipart/form-data:
            schema:
              required:
                - notes
                - organisation_id
              properties:
                organisation_id:
                  type: integer
                  format: int64
                notify:
                  type: boolean
                  description: >-
                    Set to false to skip generating feed entries and
                    notifications; update to true later when media uploads are
                    finished
                notes:
                  type: string
                  description: Informal notes for the entry.
          application/json:
            schema:
              required:
                - notes
                - organisation_id
              properties:
                organisation_id:
                  type: integer
                  format: int64
                notify:
                  type: boolean
                  description: >-
                    Set to false to skip generating feed entries and
                    notifications; update to true later when media uploads are
                    finished
                notes:
                  type: string
                  description: Informal notes for the entry.
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Megaphone'
  /megaphones/years:
    get:
      tags:
        - megaphones
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/megaphones/{id}':
    get:
      tags:
        - megaphones
      summary: Find megaphone by ID
      parameters:
        - name: id
          in: path
          description: The id of the megaphone.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Megaphone'
    put:
      tags:
        - megaphones
      summary: Update an existing megaphone
      parameters:
        - name: id
          in: path
          description: The id of the megaphone.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - notes
              properties:
                notify:
                  type: boolean
                  description: >-
                    Generates feed entries and notifications when set to true
                    (unless already generated earlier)
                notes:
                  type: string
                  description: Informal notes for the entry.
          multipart/form-data:
            schema:
              required:
                - notes
              properties:
                notify:
                  type: boolean
                  description: >-
                    Generates feed entries and notifications when set to true
                    (unless already generated earlier)
                notes:
                  type: string
                  description: Informal notes for the entry.
          application/json:
            schema:
              required:
                - notes
              properties:
                notify:
                  type: boolean
                  description: >-
                    Generates feed entries and notifications when set to true
                    (unless already generated earlier)
                notes:
                  type: string
                  description: Informal notes for the entry.
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Megaphone'
    delete:
      tags:
        - megaphones
      summary: Delete megaphone entry
      parameters:
        - name: id
          in: path
          description: ID of megaphone entry that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/megaphones/{megaphone_id}/cheers':
    get:
      tags:
        - megaphones
      summary: Get list of cheers
      parameters:
        - name: megaphone_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - megaphones
      summary: Add a new cheer
      parameters:
        - name: megaphone_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/megaphones/{megaphone_id}/comments':
    get:
      tags:
        - megaphones
      summary: Get list of comments
      parameters:
        - name: megaphone_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - megaphones
      summary: Add a new comment
      parameters:
        - name: megaphone_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  '/messages/{id}':
    get:
      tags:
        - messages
      summary: Find message by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Message'
    put:
      tags:
        - messages
      summary: Mark as read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Message'
  /notifications:
    get:
      tags:
        - notifications
      summary: Finds notifications
      parameters:
        - name: after
          in: query
          description: ID of the last seen notification
          schema:
            type: integer
            format: int64
        - name: before
          in: query
          description: Return only notifications whose ID is less than this value
          schema:
            type: integer
            format: int64
        - name: created_after
          in: query
          description: Return only notifications that have been created after given date
          schema:
            type: string
            format: date
        - name: unread
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
    put:
      tags:
        - notifications
      summary: Mark all as read
      parameters:
        - name: before
          in: query
          description: ID of the last seen notification
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/notifications/{id}':
    put:
      tags:
        - notifications
      summary: Mark as read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Notification'
  /organisations:
    get:
      tags:
        - organisations
      summary: List of my organisations
      parameters:
        - name: coach
          in: query
          description: When 'true' returns organisations where you coach in.
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
    post:
      tags:
        - organisations
      summary: Join an organisation
      parameters:
        - name: code
          in: query
          description: Company code for the organisation to join.
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organisation'
  '/organisations/{id}':
    get:
      tags:
        - organisations
      summary: Find organisation by ID
      parameters:
        - name: id
          in: path
          description: The ID of the organisation.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Organisation'
    delete:
      tags:
        - organisations
      summary: Remove organisation membership
      parameters:
        - name: id
          in: path
          description: The ID of the organisation to unjoin.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/organisations/{organisation_id}/teams':
    get:
      tags:
        - organisations
      summary: List all teams belonging to given organisation
      parameters:
        - name: organisation_id
          in: path
          description: The ID of the organisation.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Group'
  /personal_programs:
    get:
      tags:
        - personal_programs
      summary: Finds personal programs
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
        - name: status
          in: query
          required: true
          schema:
            type: string
            default: all
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonalProgram'
    post:
      tags:
        - personal_programs
      summary: Add a new personal program
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - program_id
                - start_date
              properties:
                program_id:
                  type: integer
                  format: int64
                start_date:
                  type: string
                  description: Only monday
                  format: date
          multipart/form-data:
            schema:
              required:
                - program_id
                - start_date
              properties:
                program_id:
                  type: integer
                  format: int64
                start_date:
                  type: string
                  description: Only monday
                  format: date
          application/json:
            schema:
              required:
                - program_id
                - start_date
              properties:
                program_id:
                  type: integer
                  format: int64
                start_date:
                  type: string
                  description: Only monday
                  format: date
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
  /personal_programs/years:
    get:
      tags:
        - personal_programs
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/personal_programs/{id}':
    get:
      tags:
        - personal_programs
      summary: Find personal program by ID
      parameters:
        - name: id
          in: path
          description: The id of the personal program.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
    delete:
      tags:
        - personal_programs
      summary: Delete personal program entry
      parameters:
        - name: id
          in: path
          description: ID of personal program that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/personal_programs/{personal_program_id}/cheers':
    get:
      tags:
        - personal_programs
      summary: Get list of cheers
      parameters:
        - name: personal_program_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - personal_programs
      summary: Add a new cheer
      parameters:
        - name: personal_program_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/personal_programs/{personal_program_id}/comments':
    get:
      tags:
        - personal_programs
      summary: Get list of comments
      parameters:
        - name: personal_program_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - personal_programs
      summary: Add a new comment
      parameters:
        - name: personal_program_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  '/personal_programs/{personal_program_id}/items':
    get:
      tags:
        - personal_programs
      summary: Get list of personal program items
      parameters:
        - name: personal_program_id
          in: path
          description: The id of the personal program.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /places:
    post:
      tags:
        - places
      summary: Add a new place
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - latitude
                - longitude
                - name
              properties:
                latitude:
                  type: number
                  description: 'Latitude of the place, as accurate as is known.'
                  format: double
                longitude:
                  type: number
                  description: 'Longitude of the place, as accurate as is known.'
                  format: double
                name:
                  type: string
                  description: The name of the place.
          multipart/form-data:
            schema:
              required:
                - latitude
                - longitude
                - name
              properties:
                latitude:
                  type: number
                  description: 'Latitude of the place, as accurate as is known.'
                  format: double
                longitude:
                  type: number
                  description: 'Longitude of the place, as accurate as is known.'
                  format: double
                name:
                  type: string
                  description: The name of the place.
          application/json:
            schema:
              required:
                - latitude
                - longitude
                - name
              properties:
                latitude:
                  type: number
                  description: 'Latitude of the place, as accurate as is known.'
                  format: double
                longitude:
                  type: number
                  description: 'Longitude of the place, as accurate as is known.'
                  format: double
                name:
                  type: string
                  description: The name of the place.
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Place'
  /places/search:
    get:
      tags:
        - places
      summary: Finds places
      description: The results ordered based on their distance from a given point.
      parameters:
        - name: q
          in: query
          description: A search term to be applied against place names.
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
        - name: latitude
          in: query
          description: 'Latitude of the place, as accurate as is known.'
          schema:
            type: number
            format: double
        - name: longitude
          in: query
          schema:
            type: number
            format: double
          description: 'Longitude of the place, as accurate as is known.'
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Place'
  '/places/{id}':
    get:
      tags:
        - places
      summary: Find place by ID
      parameters:
        - name: id
          in: path
          description: The id of the place.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Place'
  /planned_surveys:
    get:
      tags:
        - planned_surveys
      summary: Finds planned surveys
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
        - name: date
          in: query
          description: Only return entries on given date
          schema:
            type: string
            format: date
        - name: planned_after
          in: query
          description: Return only planned surveys that have been planned after given date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlannedSurvey'
  '/planned_surveys/{id}':
    get:
      tags:
        - planned_surveys
      parameters:
        - name: id
          in: path
          description: ID of planned that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      summary: Return planned survey
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlannedSurvey'
    delete:
      tags:
        - planned_surveys
      summary: Delete planned survey
      parameters:
        - name: id
          in: path
          description: ID of planned that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  /point_systems:
    get:
      tags:
        - point_systems
      summary: List of user's point systems
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointSystem'
  /program_folders:
    get:
      tags:
        - program_folders
      summary: List of available program folders
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgramFolder'
  '/program_folders/{id}':
    get:
      tags:
        - program_folders
      summary: Find program folders by ID
      parameters:
        - name: id
          in: path
          description: The id of the program folder
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProgramFolder'
  /programs:
    get:
      tags:
        - programs
      summary: List of available programs
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
  '/programs/{id}':
    get:
      tags:
        - programs
      summary: Find program by ID
      parameters:
        - name: id
          in: path
          description: The id of the program.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Program'
  /pymk:
    get:
      tags:
        - pymk
      summary: List of PYMK
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompactUser'
  /pymk/search:
    get:
      tags:
        - pymk
      summary: Search PYMK
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompactUser'
  /recurring_surveys:
    get:
      tags:
        - recurring_surveys
      summary: Finds results for recurring surveys
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SurveyResult'
  /requests:
    get:
      tags:
        - requests
      summary: Finds requests
      parameters:
        - name: after
          in: query
          description: ID of the last seen request
          schema:
            type: integer
            format: int64
        - name: before
          in: query
          description: Return only requests whose ID is less than this value
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
        - name: status
          in: query
          schema:
            type: string
            default: open
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
  '/requests/{id}':
    get:
      tags:
        - requests
      summary: Find request by ID
      parameters:
        - name: id
          in: path
          description: The id of the request.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Request'
  '/requests/{id}/accept':
    patch:
      parameters:
        - name: id
          in: path
          description: The id of the request.
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - requests
      summary: Accept request
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Request'
  '/requests/{id}/reject':
    patch:
      parameters:
        - name: id
          in: path
          description: The id of the request.
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - requests
      summary: Reject request
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Request'
  /reset_password:
    put:
      tags:
        - reset_password
      summary: Set a new password
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - password
                - token
              properties:
                token:
                  type: string
                password:
                  type: string
                  description: at least 10 chars
          multipart/form-data:
            schema:
              required:
                - password
                - token
              properties:
                token:
                  type: string
                password:
                  type: string
                  description: at least 10 chars
          application/json:
            schema:
              required:
                - password
                - token
              properties:
                token:
                  type: string
                password:
                  type: string
                  description: at least 10 chars
        required: true
      responses:
        '200':
          description: No response was specified
          content: {}
    post:
      tags:
        - reset_password
      summary: >-
        Request password reset. Sends email with reset link to user's email
        address
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
          multipart/form-data:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
        required: true
      responses:
        '200':
          description: No response was specified
          content: {}
  /sick_days:
    get:
      tags:
        - sick_days
      summary: Finds sick days
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SickDay'
    post:
      tags:
        - sick_days
      summary: Add a new sick day
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
                  description: By default 'true'
          multipart/form-data:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
                  description: By default 'true'
          application/json:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
                  description: By default 'true'
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SickDay'
  /sick_days/years:
    get:
      tags:
        - sick_days
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/sick_days/{id}':
    get:
      tags:
        - sick_days
      summary: Find sick day by ID
      parameters:
        - name: id
          in: path
          description: The id of the sick day.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SickDay'
    put:
      tags:
        - sick_days
      summary: Update an existing sick day
      parameters:
        - name: id
          in: path
          description: ID of sick day that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          multipart/form-data:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          application/json:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SickDay'
    delete:
      tags:
        - sick_days
      summary: Delete sick day entry
      parameters:
        - name: id
          in: path
          description: ID of sick day that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/sick_days/{sick_day_id}/cheers':
    get:
      tags:
        - sick_days
      summary: Get list of cheers
      parameters:
        - name: sick_day_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - sick_days
      summary: Add a new cheer
      parameters:
        - name: sick_day_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/sick_days/{sick_day_id}/comments':
    get:
      tags:
        - sick_days
      summary: Get list of comments
      parameters:
        - name: sick_day_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - sick_days
      summary: Add a new comment
      parameters:
        - name: sick_day_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /sport_categories:
    get:
      tags:
        - sport_categories
      summary: List of sport categories
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompactSportCategory'
  /sport_categories/all:
    get:
      tags:
        - sport_categories
      summary: List of all sport categories
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SportCategory'
  '/sport_categories/{id}':
    get:
      tags:
        - sport_categories
      summary: Find sport category by ID
      parameters:
        - name: id
          in: path
          description: The id of the sport category.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CompactSportCategory'
  '/sport_categories/{sport_category_id}/sports':
    get:
      tags:
        - sport_categories
      summary: Find sports by category ID
      parameters:
        - name: sport_category_id
          in: path
          description: The id of the sport category.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Sport'
  /sports:
    get:
      tags:
        - sports
      summary: Finds sports
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sport'
  /sports/all:
    get:
      tags:
        - sports
      summary: List of all sports
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sport'
  /sports/recommended:
    get:
      tags:
        - sports
      summary: List of recommended sports
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sport'
  '/sports/{id}':
    get:
      tags:
        - sports
      summary: Find sport by ID
      parameters:
        - name: id
          in: path
          description: The id of the sport.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Sport'
  /survey_results:
    get:
      tags:
        - survey_results
      summary: Finds survey results
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
        - name: survey_id
          in: query
          schema:
            type: integer
            format: int64
          description: >-
            Return only results associated with given survey. The year parameter
            is ignored when survey_id is present.
        - name: planned_survey_id
          in: query
          schema:
            type: integer
            format: int64
          description: >-
            Fetches survey results associated with given planned survey. In
            practise only returns incomplete results and cannot return more than
            one entry.
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SurveyResult'
    post:
      tags:
        - survey_results
      summary: Add a new survey result
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - 'answers[][option_ids][]'
                - 'answers[][question_id]'
                - survey_id
              properties:
                survey_id:
                  type: integer
                  format: int64
                planned_survey_id:
                  type: integer
                  format: int64
                complete:
                  type: boolean
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Default is true
                'answers[][question_id]':
                  type: integer
                  format: int64
                'answers[][option_ids][]':
                  type: integer
                  format: int64
                'answers[][note]':
                  type: string
          multipart/form-data:
            schema:
              required:
                - 'answers[][option_ids][]'
                - 'answers[][question_id]'
                - survey_id
              properties:
                survey_id:
                  type: integer
                  format: int64
                planned_survey_id:
                  type: integer
                  format: int64
                complete:
                  type: boolean
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Default is true
                'answers[][question_id]':
                  type: integer
                  format: int64
                'answers[][option_ids][]':
                  type: integer
                  format: int64
                'answers[][note]':
                  type: string
          application/json:
            schema:
              required:
                - 'answers[][option_ids][]'
                - 'answers[][question_id]'
                - survey_id
              properties:
                survey_id:
                  type: integer
                  format: int64
                planned_survey_id:
                  type: integer
                  format: int64
                complete:
                  type: boolean
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Default is true
                'answers[][question_id]':
                  type: integer
                  format: int64
                'answers[][option_ids][]':
                  type: integer
                  format: int64
                'answers[][note]':
                  type: string
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SurveyResult'
  /survey_results/years:
    get:
      tags:
        - survey_results
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/survey_results/{id}':
    get:
      tags:
        - survey_results
      summary: Find survey result by ID
      parameters:
        - name: id
          in: path
          description: The id of the survey result.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SurveyResult'
    put:
      tags:
        - survey_results
      parameters:
        - name: id
          in: path
          description: The id of the survey result.
          required: true
          schema:
            type: integer
            format: int64
      summary: Update existing incomplete survey result
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - 'answers[][option_ids][]'
                - 'answers[][question_id]'
              properties:
                complete:
                  type: boolean
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Existing state is not changed when this parameter is
                    missing.
                'answers[][question_id]':
                  type: integer
                  format: int64
                'answers[][option_ids][]':
                  type: integer
                  format: int64
                'answers[][note]':
                  type: string
          multipart/form-data:
            schema:
              required:
                - 'answers[][option_ids][]'
                - 'answers[][question_id]'
              properties:
                complete:
                  type: boolean
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Existing state is not changed when this parameter is
                    missing.
                'answers[][question_id]':
                  type: integer
                  format: int64
                'answers[][option_ids][]':
                  type: integer
                  format: int64
                'answers[][note]':
                  type: string
          application/json:
            schema:
              required:
                - 'answers[][option_ids][]'
                - 'answers[][question_id]'
              properties:
                complete:
                  type: boolean
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Existing state is not changed when this parameter is
                    missing.
                'answers[][question_id]':
                  type: integer
                  format: int64
                'answers[][option_ids][]':
                  type: integer
                  format: int64
                'answers[][note]':
                  type: string
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SurveyResult'
    delete:
      tags:
        - survey_results
      summary: Delete survey result
      parameters:
        - name: id
          in: path
          description: ID of survey result that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/survey_results/{survey_result_id}/cheers':
    get:
      tags:
        - survey_results
      summary: Get list of cheers
      parameters:
        - name: survey_result_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - survey_results
      summary: Add a new cheer
      parameters:
        - name: survey_result_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/survey_results/{survey_result_id}/comments':
    get:
      tags:
        - survey_results
      summary: Get list of comments
      parameters:
        - name: survey_result_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - survey_results
      summary: Add a new comment
      parameters:
        - name: survey_result_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /surveys:
    get:
      tags:
        - surveys
      summary: Available surveys
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
  '/surveys/{id}':
    get:
      tags:
        - surveys
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Find survey by ID
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Survey'
  '/surveys/{survey_id}/personal_programs':
    post:
      tags:
        - surveys
      summary: Add a new personal program
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - program_id
              properties:
                program_id:
                  type: integer
                  format: int64
                parent_personal_program_id:
                  type: integer
                  format: int64
          multipart/form-data:
            schema:
              required:
                - program_id
              properties:
                program_id:
                  type: integer
                  format: int64
                parent_personal_program_id:
                  type: integer
                  format: int64
          application/json:
            schema:
              required:
                - program_id
              properties:
                program_id:
                  type: integer
                  format: int64
                parent_personal_program_id:
                  type: integer
                  format: int64
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
  '/surveys/{survey_id}/programs':
    get:
      tags:
        - surveys
      summary: Recommended programs
      parameters:
        - name: survey_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
  /tags:
    get:
      tags:
        - tags
      summary: Available tags
      description: >-
        Always returns default tags with type 'strain' and 'commute' even if no
        entries with tags were created.
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  '/tips/{id}':
    get:
      tags:
        - tips
      parameters:
        - name: id
          in: path
          description: The id of the tip
          required: true
          schema:
            type: integer
            format: int64
      summary: Find tip by ID
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Tip'
  /top_sports:
    get:
      tags:
        - top_sports
      summary: Top sports of current user
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopSport'
  /top_sports/years:
    get:
      tags:
        - top_sports
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/top_sports/{id}':
    get:
      tags:
        - top_sports
      summary: Get a sport statistic by sport id
      parameters:
        - name: id
          in: path
          description: The id of the sport
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TopSport'
  /training_goals:
    get:
      tags:
        - training_goals
      summary: Finds training goals
      description: Finds training goals
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainingGoal'
    post:
      tags:
        - training_goals
      summary: Add a new training goal
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          multipart/form-data:
            schema:
              properties:
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          application/json:
            schema:
              properties:
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingGoal'
  /training_goals/years:
    get:
      tags:
        - training_goals
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/training_goals/{id}':
    get:
      tags:
        - training_goals
      summary: Get a training goal by ID
      parameters:
        - name: id
          in: path
          description: The id of the training goal
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingGoal'
    put:
      tags:
        - training_goals
      summary: Update an existing training goal
      parameters:
        - name: id
          in: path
          description: ID of training goal that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          multipart/form-data:
            schema:
              properties:
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
          application/json:
            schema:
              properties:
                notes:
                  type: string
                  description: Informal notes for the entry.
                private:
                  type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingGoal'
    delete:
      tags:
        - training_goals
      summary: Delete training goal
      parameters:
        - name: id
          in: path
          description: ID of training goal that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/training_goals/{training_goal_id}/cheers':
    get:
      tags:
        - training_goals
      summary: Get list of cheers
      parameters:
        - name: training_goal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - training_goals
      summary: Add a new cheer
      parameters:
        - name: training_goal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/training_goals/{training_goal_id}/comments':
    get:
      tags:
        - training_goals
      summary: Get list of comments
      parameters:
        - name: training_goal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - training_goals
      summary: Add a new comment
      parameters:
        - name: training_goal_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /training_logs:
    get:
      tags:
        - training_logs
      summary: Finds training logs
      description: Finds training logs
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: string
            default: regular
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: date
          in: query
          description: Only return entries on given date
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainingLog'
    post:
      tags:
        - training_logs
      summary: Add a new training log
      description: >-
        Allowed only one tag with type 'strain' for
        entry.<br/>sport_id=2&avg_hr=110&calories=148&comment=Great%20ride%21&date=2010-04-27&duration_h=1&duration_m=15&duration_s=34&favourite=1&max_hr=150&mood=4&sport_param_values[distance]=34.5&sport_param_values[avg_speed]=12&sport_param_values[score]=27
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
                - sport_id
                - status
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                sport_id:
                  type: integer
                  format: int32
                status:
                  type: string
                  default: regular
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                place_id:
                  type: integer
                  format: int32
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
                workout_collection_id:
                  type: integer
                  format: int32
          multipart/form-data:
            schema:
              required:
                - date
                - sport_id
                - status
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                sport_id:
                  type: integer
                  format: int32
                status:
                  type: string
                  default: regular
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                place_id:
                  type: integer
                  format: int32
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
                workout_collection_id:
                  type: integer
                  format: int32
          application/json:
            schema:
              required:
                - date
                - sport_id
                - status
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                sport_id:
                  type: integer
                  format: int32
                status:
                  type: string
                  default: regular
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                place_id:
                  type: integer
                  format: int32
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
                workout_collection_id:
                  type: integer
                  format: int32
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingLog'
  /training_logs/years:
    get:
      tags:
        - training_logs
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/training_logs/{id}':
    get:
      tags:
        - training_logs
      summary: Find training log entry by ID
      description: Returns a training log entry based on ID
      parameters:
        - name: id
          in: path
          description: ID of training log that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingLog'
    put:
      tags:
        - training_logs
      summary: Update an existing training log
      description: >-
        If you want approve entry, just update entry with
        status=regular.<br/>Allowed only one tag with type 'strain' for entry.
      parameters:
        - name: id
          in: path
          description: ID of training log that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                sport_id:
                  type: integer
                  description: >-
                    ID of sport that needs to be set. Works only when resource
                    with editable_sport=true
                  format: int32
                planned_entry_id:
                  type: integer
                  description: >-
                    ID of entry which will be merged into current entry. Works
                    only when resource with editable_sport=true
                  format: int64
                status:
                  type: string
                  default: regular
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
          multipart/form-data:
            schema:
              properties:
                sport_id:
                  type: integer
                  description: >-
                    ID of sport that needs to be set. Works only when resource
                    with editable_sport=true
                  format: int32
                planned_entry_id:
                  type: integer
                  description: >-
                    ID of entry which will be merged into current entry. Works
                    only when resource with editable_sport=true
                  format: int64
                status:
                  type: string
                  default: regular
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
          application/json:
            schema:
              properties:
                sport_id:
                  type: integer
                  description: >-
                    ID of sport that needs to be set. Works only when resource
                    with editable_sport=true
                  format: int32
                planned_entry_id:
                  type: integer
                  description: >-
                    ID of entry which will be merged into current entry. Works
                    only when resource with editable_sport=true
                  format: int64
                status:
                  type: string
                  default: regular
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingLog'
    delete:
      tags:
        - training_logs
      summary: Delete training log entry
      parameters:
        - name: id
          in: path
          description: ID of training log that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/training_logs/{training_log_id}/cheers':
    get:
      tags:
        - training_logs
      summary: Get list of cheers
      parameters:
        - name: training_log_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - training_logs
      summary: Add a new cheer
      parameters:
        - name: training_log_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/training_logs/{training_log_id}/comments':
    get:
      tags:
        - training_logs
      summary: Get list of comments
      parameters:
        - name: training_log_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - training_logs
      summary: Add a new comment
      parameters:
        - name: training_log_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /users/invite:
    post:
      tags:
        - users
      summary: Invite users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - subject
              properties:
                email:
                  type: string
                  description: User email.
                subject:
                  type: string
                  description: Subject of email.
                message:
                  type: string
                  description: >-
                    We’ll add a link to accept your invitation and send some
                    explanatory text.
          multipart/form-data:
            schema:
              required:
                - email
                - subject
              properties:
                email:
                  type: string
                  description: User email.
                subject:
                  type: string
                  description: Subject of email.
                message:
                  type: string
                  description: >-
                    We’ll add a link to accept your invitation and send some
                    explanatory text.
          application/json:
            schema:
              required:
                - email
                - subject
              properties:
                email:
                  type: string
                  description: User email.
                subject:
                  type: string
                  description: Subject of email.
                message:
                  type: string
                  description: >-
                    We’ll add a link to accept your invitation and send some
                    explanatory text.
        required: true
      responses:
        '200':
          description: No response was specified
          content: {}
  /users/search:
    get:
      tags:
        - users
      summary: Search users
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: colleagues
          in: query
          description: >-
            When 'true' returns only colleagues from all organizations where you
            member.
          schema:
            type: string
        - name: organisation_id
          in: query
          description: Restricts search by one particular organization.
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompactUser'
  '/users/{id}':
    get:
      tags:
        - users
      summary: Find user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  '/users/{user_id}/daily_stats':
    get:
      tags:
        - users
      summary: List of user's daily statistics
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: since
          in: query
          description: The date (e.g. 2015-09-18) since when to return the daily statistics
          schema:
            type: string
        - name: days
          in: query
          description: The number of days for which to return statistics
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyStatistic'
  '/users/{user_id}/free_entries':
    get:
      tags:
        - users
      summary: List of user free entries
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FreeEntry'
  '/users/{user_id}/free_entries/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/friends':
    get:
      tags:
        - users
      summary: User's friends
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompactUser'
  '/users/{user_id}/items':
    get:
      tags:
        - users
      summary: Items of user specified by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  '/users/{user_id}/items/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/medals':
    get:
      tags:
        - users
      summary: Medals of user specified by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medal'
  '/users/{user_id}/medals/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/monthly_stats':
    get:
      tags:
        - users
      summary: List of user's monthly statistics
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: since
          in: query
          description: The month (e.g. 2015-09) since when to return the monthly statistics
          schema:
            type: string
        - name: months
          in: query
          description: The number of months for which to return statistics
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonthlyStatistic'
  '/users/{user_id}/personal_programs':
    get:
      tags:
        - users
      summary: Finds personal programs
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
        - name: status
          in: query
          required: true
          schema:
            type: string
            default: all
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonalProgram'
    post:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Add a new personal program
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - program_id
                - start_date
              properties:
                program_id:
                  type: integer
                  format: int64
                start_date:
                  type: string
                  description: Only monday
                  format: date
          multipart/form-data:
            schema:
              required:
                - program_id
                - start_date
              properties:
                program_id:
                  type: integer
                  format: int64
                start_date:
                  type: string
                  description: Only monday
                  format: date
          application/json:
            schema:
              required:
                - program_id
                - start_date
              properties:
                program_id:
                  type: integer
                  format: int64
                start_date:
                  type: string
                  description: Only monday
                  format: date
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
  '/users/{user_id}/planned_surveys':
    post:
      tags:
        - users
      summary: Add a new planned survey
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
                - recurrence_times
                - recurrence_type
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                recurrence_type:
                  type: string
                  description: This event recurs for (N) days/weeks.
                recurrence_times:
                  type: integer
                  format: int32
          multipart/form-data:
            schema:
              required:
                - date
                - recurrence_times
                - recurrence_type
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                recurrence_type:
                  type: string
                  description: This event recurs for (N) days/weeks.
                recurrence_times:
                  type: integer
                  format: int32
          application/json:
            schema:
              required:
                - date
                - recurrence_times
                - recurrence_type
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                recurrence_type:
                  type: string
                  description: This event recurs for (N) days/weeks.
                recurrence_times:
                  type: integer
                  format: int32
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PlannedSurvey'
  '/users/{user_id}/sick_days':
    get:
      tags:
        - users
      summary: List of user sick days
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SickDay'
  '/users/{user_id}/sick_days/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/team_memberships':
    get:
      tags:
        - users
      summary: List of user's team memberships
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: organisation_id
          in: query
          description: >-
            Optional filter for returning team memberships only for the given
            organisation
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMembership'
    post:
      tags:
        - users
      summary: Join a team or request to join a team
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - team_id
              properties:
                team_id:
                  type: integer
                  description: Identifier of the team to join
                  format: int64
          multipart/form-data:
            schema:
              required:
                - team_id
              properties:
                team_id:
                  type: integer
                  description: Identifier of the team to join
                  format: int64
          application/json:
            schema:
              required:
                - team_id
              properties:
                team_id:
                  type: integer
                  description: Identifier of the team to join
                  format: int64
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TeamMembership'
  '/users/{user_id}/team_memberships/{id}':
    delete:
      tags:
        - users
      summary: Unjoin a team
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: The id of the team membership
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/users/{user_id}/top_sports':
    get:
      tags:
        - users
      summary: List of user top sports
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopSport'
  '/users/{user_id}/top_sports/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/top_sports/{id}':
    get:
      tags:
        - users
      summary: Get a sport statistic by sport id
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: The id of the sport
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TopSport'
  '/users/{user_id}/training_goals':
    get:
      tags:
        - users
      summary: List of user training goals
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainingGoal'
  '/users/{user_id}/training_goals/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/training_logs':
    get:
      tags:
        - users
      summary: List of user training logs
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: string
            default: regular
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainingLog'
    post:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Add a new training log
      description: >-
        Allowed only one tag with type 'strain' for
        entry.<br/>sport_id=2&avg_hr=110&calories=148&comment=Great%20ride%21&date=2010-04-27&duration_h=1&duration_m=15&duration_s=34&favourite=1&max_hr=150&mood=4&sport_param_values[distance]=34.5&sport_param_values[avg_speed]=12&sport_param_values[score]=27
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
                - sport_id
                - status
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                sport_id:
                  type: integer
                  format: int32
                status:
                  type: string
                  default: regular
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                place_id:
                  type: integer
                  format: int32
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
                workout_collection_id:
                  type: integer
                  format: int32
          multipart/form-data:
            schema:
              required:
                - date
                - sport_id
                - status
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                sport_id:
                  type: integer
                  format: int32
                status:
                  type: string
                  default: regular
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                place_id:
                  type: integer
                  format: int32
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
                workout_collection_id:
                  type: integer
                  format: int32
          application/json:
            schema:
              required:
                - date
                - sport_id
                - status
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                sport_id:
                  type: integer
                  format: int32
                status:
                  type: string
                  default: regular
                duration_h:
                  type: integer
                  description: Duration of the exercise - hours.
                  format: int32
                duration_m:
                  type: integer
                  description: Duration of the exercise - minutes.
                  format: int32
                duration_s:
                  type: integer
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  format: int32
                notes:
                  type: string
                  description: Informal notes for the entry.
                mood:
                  type: string
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best mood
                  format: byte
                calories:
                  type: integer
                  description: Calories spent during the exercise.
                  format: int32
                avg_hr:
                  type: integer
                  description: Average heart rate.
                  format: int32
                max_hr:
                  type: integer
                  description: Maximum heart rate.
                  format: int32
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  type: string
                  description: 'The file, support only GPX format.'
                  format: binary
                'sport_param_values[distance]':
                  description: Depends on the sport.
                'sport_param_values[score]':
                  description: Depends on the sport.
                place_id:
                  type: integer
                  format: int32
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
                workout_collection_id:
                  type: integer
                  format: int32
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TrainingLog'
  '/users/{user_id}/training_logs/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/weekly_targets':
    get:
      tags:
        - users
      summary: List of user's weekly targets
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: since
          in: query
          description: >-
            The year and week number (e.g. 2015-38) since when to return the
            targets
          schema:
            type: string
        - name: weeks
          in: query
          description: The number of weekly targets to return
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeeklyTarget'
  '/users/{user_id}/weekly_targets/current':
    put:
      tags:
        - users
      summary: Sets current weekly target for the user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - unit
              properties:
                unit:
                  type: string
                  description: Type of the weekly target metric
                target_amount:
                  type: number
                  format: float
          multipart/form-data:
            schema:
              required:
                - unit
              properties:
                unit:
                  type: string
                  description: Type of the weekly target metric
                target_amount:
                  type: number
                  format: float
          application/json:
            schema:
              required:
                - unit
              properties:
                unit:
                  type: string
                  description: Type of the weekly target metric
                target_amount:
                  type: number
                  format: float
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeeklyTarget'
  '/users/{user_id}/weights':
    get:
      tags:
        - users
      summary: List of user weights
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weight'
  '/users/{user_id}/weights/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/users/{user_id}/wellness_entries':
    get:
      tags:
        - users
      summary: List of user wellness entries
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: string
            default: regular
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WellnessEntry'
    post:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Add a new wellness entry
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
                - status
                - wellness_type_id
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                wellness_type_id:
                  type: integer
                  description: ID of WellnessType
                  format: int32
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
                'param_values[wellness_param_id]': {}
          multipart/form-data:
            schema:
              required:
                - date
                - status
                - wellness_type_id
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                wellness_type_id:
                  type: integer
                  description: ID of WellnessType
                  format: int32
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
                'param_values[wellness_param_id]': {}
          application/json:
            schema:
              required:
                - date
                - status
                - wellness_type_id
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                wellness_type_id:
                  type: integer
                  description: ID of WellnessType
                  format: int32
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
                'param_values[wellness_param_id]': {}
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
  '/users/{user_id}/wellness_entries/years':
    get:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  /wearables:
    get:
      tags:
        - wearables
      summary: >-
        Lists all available wearable device services and their current status
        information
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wearable'
  '/wearables/{provider}':
    get:
      tags:
        - wearables
      summary: Find wearable device service by provider name
      parameters:
        - name: provider
          in: path
          description: The name of the wearable provider.
          required: true
          schema:
            type: string
        - name: prepare_auth
          in: query
          description: >-
            When true the 'oauth_url' property will be available in response,
            allowing client to start the OAuth access grant flow.
          schema:
            type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wearable'
    put:
      tags:
        - wearables
      summary: Update the connection status of a wearable device service
      parameters:
        - name: provider
          in: path
          description: The name of the wearable provider.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                status:
                  type: string
                email:
                  type: string
                  description: >-
                    If 'status' is 'requested' this defines the user's email
                    address in Polar.
                oauth_redirect_url:
                  type: string
                  description: >-
                    If 'status' is 'connected' this defines the URL the user was
                    redirected to at the end of the OAuth flow.
          multipart/form-data:
            schema:
              properties:
                status:
                  type: string
                email:
                  type: string
                  description: >-
                    If 'status' is 'requested' this defines the user's email
                    address in Polar.
                oauth_redirect_url:
                  type: string
                  description: >-
                    If 'status' is 'connected' this defines the URL the user was
                    redirected to at the end of the OAuth flow.
          application/json:
            schema:
              properties:
                status:
                  type: string
                email:
                  type: string
                  description: >-
                    If 'status' is 'requested' this defines the user's email
                    address in Polar.
                oauth_redirect_url:
                  type: string
                  description: >-
                    If 'status' is 'connected' this defines the URL the user was
                    redirected to at the end of the OAuth flow.
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wearable'
  /weekly_point_system_summaries:
    get:
      tags:
        - weekly_point_system_summaries
      summary: Finds weekly point system summaries
      parameters:
        - name: point_system_id
          in: query
          description: ID of the point system
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeeklyPointSystemSummary'
  '/weekly_point_system_summaries/{id}':
    get:
      tags:
        - weekly_point_system_summaries
      summary: Find summary by ID
      parameters:
        - name: id
          in: path
          description: The id of the weekly point system summary.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeeklyPointSystemSummary'
  /weekly_summaries:
    get:
      tags:
        - weekly_summaries
      summary: Finds weekly summaries
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeeklySummary'
  '/weekly_summaries/{id}':
    get:
      tags:
        - weekly_summaries
      summary: Find summary by ID
      parameters:
        - name: id
          in: path
          description: The id of the weekly summary.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WeeklySummary'
  /weights:
    get:
      tags:
        - weights
      summary: Finds weights
      parameters:
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weight'
    post:
      tags:
        - weights
      summary: Add a new weight
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                value:
                  type: string
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                private:
                  type: boolean
                  description: By default 'true'
          multipart/form-data:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                value:
                  type: string
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                private:
                  type: boolean
                  description: By default 'true'
          application/json:
            schema:
              required:
                - date
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                value:
                  type: string
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                private:
                  type: boolean
                  description: By default 'true'
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Weight'
  /weights/years:
    get:
      tags:
        - weights
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/weights/{id}':
    get:
      tags:
        - weights
      summary: Find weight by ID
      parameters:
        - name: id
          in: path
          description: The id of the weight.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Weight'
    put:
      tags:
        - weights
      summary: Update an existing weight
      parameters:
        - name: id
          in: path
          description: ID of weight that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                value:
                  type: string
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                private:
                  type: boolean
                  description: By default 'true'
          multipart/form-data:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                value:
                  type: string
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                private:
                  type: boolean
                  description: By default 'true'
          application/json:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                value:
                  type: string
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                private:
                  type: boolean
                  description: By default 'true'
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Weight'
    delete:
      tags:
        - weights
      summary: Delete weight entry
      parameters:
        - name: id
          in: path
          description: ID of weight that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/weights/{weight_id}/cheers':
    get:
      tags:
        - weights
      summary: Get list of cheers
      parameters:
        - name: weight_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - weights
      summary: Add a new cheer
      parameters:
        - name: weight_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/weights/{weight_id}/comments':
    get:
      tags:
        - weights
      summary: Get list of comments
      parameters:
        - name: weight_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - weights
      summary: Add a new comment
      parameters:
        - name: weight_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /wellness_entries:
    get:
      tags:
        - wellness_entries
      summary: Finds wellness entries
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: string
            default: regular
        - name: year
          in: query
          description: Gets list of entries for given year. Be default it's current year.
          schema:
            type: integer
            format: int32
            default: 2019
        - name: date
          in: query
          description: Only return entries on given date
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WellnessEntry'
    post:
      tags:
        - wellness_entries
      summary: Add a new wellness entry
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - date
                - status
                - wellness_type_id
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                wellness_type_id:
                  type: integer
                  description: ID of WellnessType
                  format: int32
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
                'param_values[wellness_param_id]': {}
          multipart/form-data:
            schema:
              required:
                - date
                - status
                - wellness_type_id
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                wellness_type_id:
                  type: integer
                  description: ID of WellnessType
                  format: int32
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
                'param_values[wellness_param_id]': {}
          application/json:
            schema:
              required:
                - date
                - status
                - wellness_type_id
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                wellness_type_id:
                  type: integer
                  description: ID of WellnessType
                  format: int32
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
                'param_values[wellness_param_id]': {}
        required: true
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
  /wellness_entries/years:
    get:
      tags:
        - wellness_entries
      summary: Get list of available years
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  '/wellness_entries/{id}':
    get:
      tags:
        - wellness_entries
      summary: Find wellness entry by ID
      parameters:
        - name: id
          in: path
          description: The id of the wellness entry.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
    put:
      tags:
        - wellness_entries
      summary: Update an existing wellness entry
      parameters:
        - name: id
          in: path
          description: ID of wellness entry that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
          multipart/form-data:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
          application/json:
            schema:
              properties:
                date:
                  type: string
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  format: date
                notes:
                  type: string
                  description: Informal notes for the entry.
                status:
                  type: string
                  default: regular
                numeric_value:
                  type: number
                  description: Applicable if wellness types has enabled numeric value
                  format: float
                bool_value:
                  type: boolean
                  description: Applicable if wellness types has enabled boolean value
                private:
                  type: boolean
                  description: By default 'false'
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
    delete:
      tags:
        - wellness_entries
      summary: Delete wellness entry
      parameters:
        - name: id
          in: path
          description: ID of wellness entry that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content: {}
  '/wellness_entries/{wellness_entry_id}/cheers':
    get:
      tags:
        - wellness_entries
      summary: Get list of cheers
      parameters:
        - name: wellness_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cheer'
    post:
      tags:
        - wellness_entries
      summary: Add a new cheer
      parameters:
        - name: wellness_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: cheer_type_id
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cheer'
  '/wellness_entries/{wellness_entry_id}/comments':
    get:
      tags:
        - wellness_entries
      summary: Get list of comments
      parameters:
        - name: wellness_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - wellness_entries
      summary: Add a new comment
      parameters:
        - name: wellness_entry_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: notes
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /wellness_types:
    get:
      tags:
        - wellness_types
      summary: List of available wellness entry types
      parameters:
        - name: page
          in: query
          schema:
            type: string
            format: byte
        - name: per_page
          in: query
          description: Per page between 1 and 100
          schema:
            type: string
            format: byte
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WellnessType'
  /wellness_types/all:
    get:
      tags:
        - wellness_types
      summary: List of all available wellness entry types
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WellnessType'
  '/wellness_types/{id}':
    get:
      tags:
        - wellness_types
      summary: Find wellness type by ID
      parameters:
        - name: id
          in: path
          description: The id of the wellness type.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: No response was specified
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WellnessType'
components:
  schemas:
    Answer:
      required:
        - options
        - question_id
        - title
      type: object
      properties:
        note:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/QuestionOption'
        question_id:
          type: integer
          format: int64
        question_key:
          type: string
        title:
          type: string
    Cheer:
      required:
        - cheer_type
        - created_at
        - editable
        - id
        - removable
        - user
      type: object
      properties:
        cheer_type:
          $ref: '#/components/schemas/CheerType'
        created_at:
          type: string
          format: date-time
        editable:
          type: boolean
        id:
          type: integer
          format: int64
        removable:
          type: boolean
        user:
          $ref: '#/components/schemas/CompactUser'
    CheerType:
      required:
        - icon_url
        - id
        - level
      type: object
      properties:
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{height}.png',
                                        where '{height}' value can be from this list ['34', '44', '48', '60', '64', '72', '80', '96', '128', '144', '192']
        id:
          type: integer
          format: int32
        level:
          pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
          type: string
          format: byte
    Comment:
      required:
        - created_at
        - editable
        - id
        - notes
        - removable
        - url
        - user
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        editable:
          type: boolean
        id:
          type: integer
          format: int64
        notes:
          type: string
        removable:
          type: boolean
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    CompactPersonalProgram:
      required:
        - date
        - editable
        - end_date
        - id
        - items_count
        - items_done
        - removable
        - start_date
        - title
        - url
      type: object
      properties:
        date:
          type: string
          format: date
        description:
          type: string
        editable:
          type: boolean
        end_date:
          type: string
          format: date
        id:
          type: integer
          format: int64
        items_count:
          type: integer
          format: int32
        items_done:
          type: integer
          format: int32
        parent_personal_program_id:
          type: integer
          format: int64
        removable:
          type: boolean
        start_date:
          type: string
          format: date
        title:
          type: string
        url:
          type: string
    CompactProgram:
      required:
        - description
        - icon_url
        - id
        - start_only_once
        - super_program
        - svg_icon_url
        - title
        - url
      type: object
      properties:
        banner_url:
          type: string
        description:
          type: string
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        start_only_once:
          type: boolean
        subtitle:
          type: string
        super_program:
          type: boolean
        svg_icon_url:
          type: string
        title:
          type: string
        url:
          type: string
    CompactSport:
      required:
        - icon_url
        - id
        - key
        - name
        - planned_icon_url
        - url
      type: object
      properties:
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        key:
          type: string
        name:
          type: string
        planned_icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        url:
          type: string
    CompactSportCategory:
      required:
        - icon_url
        - id
        - name
        - sports_url
        - url
      type: object
      properties:
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        name:
          type: string
        sports_url:
          type: string
        url:
          type: string
    CompactSurvey:
      required:
        - icon_url
        - id
        - planned_icon_url
        - recurring
        - title
        - url
      type: object
      properties:
        banner_image_url:
          type: string
          description: >-
            Banner image to use with the survey, if any. There is only single
            size that the client must scale appropriately.
        description:
          type: string
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        planned_icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        recurring:
          type: boolean
        title:
          type: string
        url:
          type: string
    CompactUser:
      required:
        - avatar_url
        - first_name
        - friendship_status
        - friendship_url
        - id
        - url
      type: object
      properties:
        avatar_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        city:
          type: string
        country:
          type: string
        first_name:
          type: string
        friendship_status:
          type: string
          description: >-
            "pending" when you sent the friend request, "requested" when friend
            request was sent to you
        friendship_url:
          type: string
        id:
          type: integer
          format: int64
        last_name:
          type: string
        pymk_reason:
          type: string
        training_for:
          type: string
        url:
          type: string
    CompactWeeklyPointSystemSummary:
      required:
        - end_date
        - points_earned
        - points_expired
        - points_total
        - start_date
      type: object
      properties:
        end_date:
          type: string
          format: date
        points_earned:
          type: integer
          format: int32
        points_expired:
          type: integer
          format: int32
        points_total:
          type: integer
          format: int32
        start_date:
          type: string
          format: date
    Conversation:
      required:
        - id
        - last_message
        - messages_url
        - unread
        - url
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
        id:
          type: integer
          description: Identifier of the conversation
          format: int64
        last_message:
          $ref: '#/components/schemas/Message'
        messages_url:
          type: string
        unread:
          type: boolean
        url:
          type: string
        user_id:
          type: integer
          format: int64
    DailyStatistic:
      required:
        - date
      type: object
      properties:
        date:
          type: string
          description: 'Date of the daily statistic, e.g. "2015-09-18"'
        distance:
          type: number
          description: Distance covered in kilometers or miles (depending on user settings)
          format: float
        exercise_count:
          type: integer
          format: int32
        exercise_duration:
          type: integer
          description: Combined exercise duration in minutes
          format: int32
        floors:
          type: integer
          format: int32
        resting_heart_rate:
          type: integer
          format: int32
        sick_day:
          type: boolean
        sleep:
          type: integer
          description: Sleep in minutes
          format: int32
        steps:
          type: integer
          format: int32
        weight:
          type: number
          description: Weight in kilograms or pounds (depending on user settings)
          format: float
        wellness_entry_count:
          type: integer
          format: int32
    Feed:
      required:
        - created_at
        - editable
        - entry
        - id
        - kind
        - removable
        - url
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        editable:
          type: boolean
        entry:
          oneOf:
            - $ref: '#/components/schemas/TextEntry'
            - $ref: '#/components/schemas/TrainingLog'
            - $ref: '#/components/schemas/FreeEntry'
            - $ref: '#/components/schemas/Weight'
            - $ref: '#/components/schemas/SickDay'
            - $ref: '#/components/schemas/Medal'
            - $ref: '#/components/schemas/TrainingGoal'
            - $ref: '#/components/schemas/Megaphone'
            - $ref: '#/components/schemas/WellnessEntry'
            - $ref: '#/components/schemas/PersonalProgram'
            - $ref: '#/components/schemas/WeeklySummary'
            - $ref: '#/components/schemas/Tip'
        id:
          type: integer
          format: int64
        kind:
          type: string
        removable:
          type: boolean
        url:
          type: string
    FreeEntry:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
      type: object
      properties:
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        date:
          type: string
          format: date
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                 {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        id:
          type: integer
          format: int64
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    Group:
      required:
        - access_type
        - id
        - managed
        - member_count
        - name
        - official
        - organisation
      type: object
      properties:
        access_type:
          type: string
          description: >-
            Defines whether the team can be joined by anyone, membership needs
            to be requested, or the team is invite only
        avatar_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        description:
          type: string
        id:
          type: integer
          format: int64
        managed:
          type: boolean
          description: >-
            True for teams whose memberships are managed by administrators,
            false for teams that can be freely joined and left by users
            themselves
        member_count:
          type: integer
          description: Number of accepted members in the group
          format: int32
        name:
          type: string
        official:
          type: boolean
          description: >-
            True for teams greated by organisation administrator, false for user
            created teams
        organisation:
          $ref: '#/components/schemas/Organisation'
    Invite:
      required:
        - email
        - status
        - user
      type: object
      properties:
        email:
          type: string
          description: Email associated with this invite.
        status:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    Item:
      required:
        - entry
        - id
        - kind
        - url
      type: object
      properties:
        entry:
          oneOf:
            - $ref: '#/components/schemas/TrainingLog'
            - $ref: '#/components/schemas/FreeEntry'
            - $ref: '#/components/schemas/Weight'
            - $ref: '#/components/schemas/SickDay'
            - $ref: '#/components/schemas/Medal'
            - $ref: '#/components/schemas/TrainingGoal'
            - $ref: '#/components/schemas/Megaphone'
            - $ref: '#/components/schemas/WellnessEntry'
            - $ref: '#/components/schemas/PersonalProgram'
        id:
          type: integer
          format: int64
        kind:
          type: string
        url:
          type: string
    Library:
      required:
        - id
        - name
        - url
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
    LibraryFolder:
      required:
        - exercise_count
        - id
        - name
        - program_count
        - survey_count
        - url
        - video_count
      type: object
      properties:
        exercise_count:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        name:
          type: string
        program_count:
          type: integer
          format: int32
        survey_count:
          type: integer
          format: int32
        url:
          type: string
        video_count:
          type: integer
          format: int32
    LibraryItem:
      required:
        - canonical_url
        - entry
        - folder_id
        - id
        - kind
        - name
        - url
      type: object
      properties:
        canonical_url:
          type: string
          description: Item URL without folder part
        description:
          type: string
        entry:
          oneOf:
            - $ref: '#/components/schemas/CompactProgram'
            - $ref: '#/components/schemas/Survey'
            - $ref: '#/components/schemas/Video'
            - $ref: '#/components/schemas/Document'
            - $ref: '#/components/schemas/TrainingLog'
            - $ref: '#/components/schemas/WellnessEntry'
        folder_id:
          type: integer
          description: Identifier of the folder the item is contained in
          format: int64
        id:
          type: integer
          format: int64
        kind:
          type: string
        name:
          type: string
        url:
          type: string
          description: 'Full item URL, including folder part'
    Medal:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - editable
        - icon_url
        - id
        - private
        - removable
        - title
        - url
        - user
        - year
      type: object
      properties:
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{width}.png,
                                       {width} - possible width of image(could be 48, 64, 72, 80, 96, 120, 144, 192).
                                       Icon can be with dimension WxW or Wx4/3*W. All sizes of icons:
                                       48x48, 48x64, 64x64, 64x85, 72x72, 72x96, 80x80, 80x107, 96x96, 96x128, 120x120, 120x160, 144x144, 144x192, 192x192, 192x256
        id:
          type: integer
          format: int64
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        organisation:
          $ref: '#/components/schemas/Organisation'
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        year:
          type: integer
          format: int32
    Media:
      required:
        - content_url
        - created_at
        - id
        - image_url
        - notes
        - type
        - url
      type: object
      properties:
        content_url:
          type: string
          description: URL on original file
        created_at:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        image_url:
          type: string
          description: >-
            Example https://example.com/path/to/image/{size}.png, {size} -
            possible size of image(could be 192, 480, 1080)
        notes:
          type: string
        type:
          type: string
        url:
          type: string
    Megaphone:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - editable
        - icon_url
        - id
        - notes
        - organisation
        - organisation_name
        - removable
        - title
        - url
        - user
      type: object
      properties:
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          type: string
        id:
          type: integer
          format: int64
        image_url:
          type: string
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        notes:
          type: string
        organisation:
          $ref: '#/components/schemas/Organisation'
        organisation_name:
          type: string
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    Message:
      required:
        - body
        - conversation_url
        - created_at
        - from
        - id
        - to
        - unread
        - url
      type: object
      properties:
        body:
          type: string
        conversation_url:
          type: string
        created_at:
          type: string
          format: date-time
        from:
          $ref: '#/components/schemas/CompactUser'
        id:
          type: integer
          format: int64
        image_url:
          type: string
          description: >-
            Example https://example.com/path/to/image/{size}.png, {size} -
            possible size of image(could be 192, 480, 1080)
        to:
          $ref: '#/components/schemas/CompactUser'
        unread:
          type: boolean
        url:
          type: string
    ModeValues:
      type: object
      properties:
        distance:
          type: string
        duration:
          type: string
        steps:
          type: string
    MonthlyStatistic:
      required:
        - month
      type: object
      properties:
        month:
          type: string
          description: 'Month of the monthly statistic, e.g. "2015-10"'
        weight:
          type: number
          description: Weight in kilograms or pounds (depending on user settings)
          format: float
    Notification:
      required:
        - action
        - created_at
        - id
        - message
        - object
        - unread
        - url
      type: object
      properties:
        action:
          type: string
        actors:
          type: array
          items:
            $ref: '#/components/schemas/CompactUser'
        conversation:
          $ref: '#/components/schemas/Conversation'
        created_at:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        message:
          type: string
        object:
          $ref: '#/components/schemas/NotificationObject'
        unread:
          type: boolean
        url:
          type: string
    NotificationObject:
      required:
        - id
        - kind
        - url
      type: object
      properties:
        id:
          type: integer
          format: int64
        kind:
          type: string
        url:
          type: string
    Organisation:
      required:
        - creatable_megaphones
        - id
        - name
        - url
      type: object
      properties:
        creatable_megaphones:
          type: boolean
        id:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string
    OrganisationSurvey:
      required:
        - ends_on
        - started_at
      type: object
      properties:
        ends_on:
          type: string
          format: date
        started_at:
          type: string
          format: date-time
        title:
          type: string
    PersonalProgram:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - end_date
        - id
        - items_count
        - items_done
        - program
        - removable
        - start_date
        - title
        - url
        - user
      type: object
      properties:
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        date:
          type: string
          format: date
        description:
          type: string
        editable:
          type: boolean
        end_date:
          type: string
          format: date
        id:
          type: integer
          format: int64
        items_count:
          type: integer
          format: int32
        items_done:
          type: integer
          format: int32
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        linked_personal_programs:
          type: array
          items:
            $ref: '#/components/schemas/PersonalProgram'
        parent_personal_program_id:
          type: integer
          format: int64
        program:
          $ref: '#/components/schemas/CompactProgram'
        removable:
          type: boolean
        start_date:
          type: string
          format: date
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    Place:
      required:
        - editable
        - id
        - latitude
        - longitude
        - name
        - removable
        - url
      type: object
      properties:
        editable:
          type: boolean
        id:
          type: integer
          format: int32
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        name:
          type: string
        removable:
          type: boolean
        url:
          type: string
    PlannedSurvey:
      required:
        - date
        - id
        - sticky_days
        - survey
        - url
      type: object
      properties:
        date:
          type: string
          format: date
        id:
          type: integer
          format: int64
        organisation_survey:
          $ref: '#/components/schemas/OrganisationSurvey'
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        reminder_button:
          type: string
        reminder_description:
          type: string
        reminder_description_short:
          type: string
        reminder_footer:
          type: string
        reminder_title:
          type: string
        reminder_title_short:
          type: string
        sticky_days:
          type: integer
          format: int32
        survey:
          $ref: '#/components/schemas/Survey'
        url:
          type: string
    PointSystem:
      required:
        - description
        - id
        - image_url
        - levels
        - levels_title
        - points_total
        - rules
        - rules_image_url
        - rules_title
        - title
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int32
        image_url:
          type: string
          description: >-
            Example https://example.com/path/to/image?size={resolution}, where
            {resolution} in (640x344, 750x344, 1125x516, 1242x516)
        levels:
          type: array
          items:
            $ref: '#/components/schemas/PointSystemLevel'
        levels_title:
          type: string
        points_total:
          type: integer
          format: int32
        rules:
          type: array
          items:
            $ref: '#/components/schemas/PointSystemRule'
        rules_image_url:
          type: string
          description: >-
            Example https://example.com/path/to/image?width={width}, where
            {width} in (640, 750, 1125, 1242)
        rules_title:
          type: string
        title:
          type: string
    PointSystemLevel:
      required:
        - name
        - points
        - title
      type: object
      properties:
        name:
          type: string
        points:
          type: string
        title:
          type: string
    PointSystemRule:
      required:
        - points
        - title
      type: object
      properties:
        points:
          type: string
        title:
          type: string
    Program:
      required:
        - description
        - icon_url
        - id
        - start_only_once
        - super_program
        - svg_icon_url
        - title
        - url
      type: object
      properties:
        banner_url:
          type: string
        description:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/ProgramEntry'
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        start_only_once:
          type: boolean
        subtitle:
          type: string
        super_program:
          type: boolean
        svg_icon_url:
          type: string
        title:
          type: string
        url:
          type: string
    ProgramEntry:
      required:
        - day
        - icon_url
        - kind
        - name
        - week
      type: object
      properties:
        day:
          type: integer
          format: int64
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        kind:
          type: string
        name:
          type: string
        week:
          type: integer
          format: int64
    ProgramFolder:
      required:
        - icon_url
        - id
        - title
        - url
      type: object
      properties:
        icon_url:
          type: string
          description: SVG icon
        id:
          type: integer
          format: int64
        programs:
          type: array
          items:
            $ref: '#/components/schemas/Program'
        started_personal_programs:
          type: array
          items:
            $ref: '#/components/schemas/PersonalProgram'
        title:
          type: string
        url:
          type: string
    Question:
      required:
        - compare_to_previous_result
        - id
        - kind
        - max_required_options
        - min_required_options
        - notable
        - options
        - show_historical_comparison
        - title
      type: object
      properties:
        category:
          type: string
        compare_to_previous_result:
          type: boolean
          description: >-
            Compare current answer to previous answer for the same question key.
            Delta is shown on survey answers summary screen
        description:
          type: string
        global_comparison_type:
          type: string
          description: >-
            The algorithm to apply to answer option's answer percentage to
            calculate reference number to compare user's result to. Unsupported
            types must be ignored.
        id:
          type: integer
          format: int64
        key:
          type: string
        kind:
          type: string
        max_required_options:
          type: integer
          format: int32
        min_required_options:
          type: integer
          format: int32
        notable:
          type: boolean
        options:
          type: array
          items:
            $ref: '#/components/schemas/QuestionOption'
        show_historical_comparison:
          type: boolean
          description: >-
            Whether or not this question should be included in graph comparing
            current answer with old answers.
        subtype:
          type: string
        title:
          type: string
    QuestionOption:
      required:
        - answer_percentage
        - conclusion
        - icon_url
        - id
        - points
        - title
      type: object
      properties:
        answer_percentage:
          type: number
          description: >-
            The percentage (0.0-100.0) of answers where this particular option
            was chosen.
          format: float
        conclusion:
          type: string
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                 {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        id:
          type: integer
          format: int64
        points:
          type: integer
          description: Used to compare questions with previous result
          format: int64
        title:
          type: string
    Request:
      required:
        - actor
        - description
        - icon_url
        - id
        - status
        - target
        - title
        - type
        - url
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/RequestAction'
        actor:
          $ref: '#/components/schemas/CompactUser'
        description:
          type: string
        icon_url:
          type: string
        id:
          type: integer
          format: int64
        status:
          type: string
        target:
          oneOf:
            - $ref: '#/components/schemas/CompactUser'
            - $ref: '#/components/schemas/Group'
            - $ref: '#/components/schemas/Organisation'
        title:
          type: string
        type:
          type: string
        url:
          type: string
    RequestAction:
      required:
        - title
        - type
        - url
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        url:
          type: string
    SickDay:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
      type: object
      properties:
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        date:
          type: string
          format: date
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                 {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        id:
          type: integer
          format: int64
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    Sport:
      required:
        - creatable
        - dummy
        - exclude_stats
        - icon_url
        - id
        - key
        - name
        - planned_icon_url
        - url
      type: object
      properties:
        creatable:
          type: boolean
          description: >-
            Indicates that user can create this kind of entry. Value is 'false'
            for Polar, FitBit, ActiveDay (wearable devices).
        dummy:
          type: boolean
        exclude_stats:
          type: boolean
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        key:
          type: string
        name:
          type: string
        planned_icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        sport_params:
          type: array
          items:
            $ref: '#/components/schemas/SportParam'
        url:
          type: string
    SportCategory:
      required:
        - icon_url
        - id
        - name
        - sports_url
        - url
      type: object
      properties:
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        name:
          type: string
        sports:
          type: array
          items:
            $ref: '#/components/schemas/Sport'
        sports_url:
          type: string
        url:
          type: string
    SportParam:
      required:
        - distance
        - key
        - name
        - unit_name
        - unit_type
        - value_type
      type: object
      properties:
        distance:
          type: boolean
          description: Params distance or not.
        key:
          type: string
          description: >-
            score, avg_speed, max_speed, best_lap_time, etc. Depends on the
            sport.
        name:
          type: string
          description: Human readable name. Depends on user locale
        unit_name:
          type: string
          description: >-
            Human readable format: "mi, km, ft, m, mph, km/h, sec, °F, °C, rpm
            ". Depends on user locale and unit system
        unit_type:
          type: string
          description: >-
            mi, km, ft, m, mph, kmph, sec, f, c, rpm or empty. Depends on user
            unit system
        value_type:
          type: string
    SportParamValue:
      required:
        - sport_param
        - value
      type: object
      properties:
        sport_param:
          $ref: '#/components/schemas/SportParam'
        value:
          oneOf:
            - type: integer
            - type: number
            - type: string
            - type: boolean
    Survey:
      required:
        - icon_url
        - id
        - planned_icon_url
        - questions
        - recurring
        - show_answers_summary
        - title
        - url
      type: object
      properties:
        banner_image_url:
          type: string
          description: >-
            Banner image to use with the survey, if any. There is only single
            size that the client must scale appropriately.
        description:
          type: string
        graph_options:
          type: integer
          description: >-
            Graph type specific options. For graph type 'bar' this value
            indicates how many past surveys should be included in the
            comparison.
          format: int32
        graph_type:
          type: string
          description: >-
            Type of historical comparison to show for this survey. Unsupported
            graph types must be ignored.
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        max_required_programs:
          type: integer
          format: int32
        min_required_programs:
          type: integer
          format: int32
        planned_icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
        recurring:
          type: boolean
        report_key:
          type: string
        show_answers_summary:
          type: boolean
        title:
          type: string
        url:
          type: string
    SurveyFeedback:
      required:
        - icon_url
        - program_ids
        - type
        - visible
      type: object
      properties:
        conclusion:
          type: string
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                 {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        non_square_icon_url:
          type: string
          description: >-
            (A possibly) non-square icon that should be used with surveys that
            have banner image. {height} variable in the URL needs to be replaced
            with desired height, width is undefined and depends on icon.
            Accepted height values are 40, 60, 80, 120 and 160.
        program_ids:
          type: array
          items:
            type: integer
            format: int64
        summary:
          type: string
        title:
          type: string
        type:
          type: string
        visible:
          type: boolean
          description: 'When False, feedback should be used only for recommending programs'
    SurveyResult:
      required:
        - answers
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - complete
        - created_at
        - date
        - editable
        - icon_url
        - id
        - maximum_score
        - private
        - removable
        - survey
        - title
        - url
        - user
        - user_score
      type: object
      properties:
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        complete:
          type: boolean
        created_at:
          type: string
          format: date-time
        date:
          type: string
          format: date
        description:
          type: string
        editable:
          type: boolean
        feedbacks:
          type: array
          items:
            $ref: '#/components/schemas/SurveyFeedback'
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                 {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        id:
          type: integer
          format: int64
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        maximum_score:
          type: integer
          description: The maximum score possible to obtain for this survey.
          format: int32
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        previous_results:
          type: object
        private:
          type: boolean
        removable:
          type: boolean
        survey:
          $ref: '#/components/schemas/CompactSurvey'
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        user_score:
          type: integer
          description: Stable score the user got from the survey (bigger number is better).
          format: int32
    Tag:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    TeamMembership:
      required:
        - id
        - status
        - team
        - team_id
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          description: Indicates whether the team membership has been accepted or not
        team:
          $ref: '#/components/schemas/Group'
        team_id:
          type: integer
          description: Identifier of the team this membership is associated with
          format: int64
    TextEntry:
      required:
        - created_at
        - date
        - actor
        - id
        - description
        - dictionary
      type: object
      description: >-
        The 'TextEntry' special kind of entry that can not be cheered and
        commented. This kind of entry contain atttributes 'actor', 'description'
        and 'dictionary'. The 'actor' field is a 'CompactUser' object
        identifying the user who performed the action that resulted in the
        creation of this text entry. The 'description' attribute has special
        format contain embedded entries:
      properties:
        id:
          type: integer
          format: int64
        dictionary:
          type: object
          example: |
            {
              "dictionary": {
                  "User:3": {
                    "kind": "User",
                    "name": "Bender Bending Rodríguez",
                    "url": "https://api.heiaheia.com/v2/users/3"
                  },
                  "TrainingGoal:1": {
                    "kind": "TrainingGoal",
                    "name": "I’m gonna go build my own theme park, with blackjack and hookers!",
                    "url": "https://api.heiaheia.com/v2/training_goals/1"
                  }
                }
            }
        description:
          type: string
          description: >-
            The 'description' attribute has special format contain embedded
            entries:
          example: '{{User:3}}''s training goal ({{TrainingGoal:1}})'
        actor:
          $ref: '#/components/schemas/CompactUser'
    Tip:
      required:
        - cheerable
        - commentable
        - created_at
        - editable
        - id
        - image_url
        - private
        - removable
        - title
        - url
      type: object
      properties:
        body:
          type: string
        cheerable:
          type: boolean
        commentable:
          type: boolean
        created_at:
          type: string
          format: date-time
        editable:
          type: boolean
        id:
          type: integer
          format: int32
        image_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                 {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
    TopSport:
      required:
        - count
        - sport
        - url
      type: object
      properties:
        count:
          type: integer
          format: int32
        distance:
          type: integer
          description: In unit that set in the user settings (km or mi)
          format: int32
        hours:
          type: integer
          format: int32
        minutes:
          type: integer
          format: int32
        mode_values:
          $ref: '#/components/schemas/ModeValues'
        sport:
          $ref: '#/components/schemas/Sport'
        url:
          type: string
    TrainingGoal:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
      type: object
      properties:
        cheerable:
          type: boolean
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                                       {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        id:
          type: integer
          format: int64
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    Document:
      required:
        - id
      type: object
    Video:
      required:
        - id
      type: object
    TrainingLog:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - editable_sport
        - exclude_stats
        - favourite
        - id
        - mood
        - mood_icon_url
        - notes
        - private
        - removable
        - sport
        - status
        - title
        - user
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        avg_hr:
          type: integer
          format: int32
        calories:
          type: integer
          format: int32
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        date:
          type: string
          format: date
        description:
          type: string
        duration_h:
          type: integer
          format: int32
        duration_m:
          type: integer
          format: int32
        duration_s:
          type: integer
          format: int32
        editable:
          type: boolean
        editable_sport:
          type: boolean
        exclude_stats:
          type: boolean
        favourite:
          type: boolean
        gpx_url:
          type: string
        id:
          type: integer
          format: int64
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        max_hr:
          type: integer
          format: int32
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        mood:
          pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
          type: string
          description: >-
            A value from 0 to 5. Where 0 - no mood set, 1 - worst mood, 5 - best
            mood
          format: byte
        mood_icon_url:
          type: string
        notes:
          type: string
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        place:
          $ref: '#/components/schemas/Place'
        private:
          type: boolean
        removable:
          type: boolean
        sport:
          $ref: '#/components/schemas/CompactSport'
        sport_param_values:
          type: array
          description: Contain all sport parameter values even if they have not been set
          items:
            $ref: '#/components/schemas/SportParamValue'
        status:
          type: string
        title:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    User:
      required:
        - avatar_url
        - consent_rewards
        - created_at
        - daily_steps_target
        - first_name
        - friends_count
        - friends_url
        - friendship_status
        - friendship_url
        - id
        - items_url
        - level
        - linked_with_mixpanel
        - locale
        - location_privacy
        - measurement_units
        - medals_count
        - medals_url
        - privacy
        - sleep_target
        - top_sports_url
        - training_logs_count
        - training_logs_url
        - url
      type: object
      properties:
        avatar_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        birthday:
          type: string
          format: date
        city:
          type: string
        consent_rewards:
          type: boolean
        country:
          type: string
        created_at:
          type: string
          format: date-time
        daily_steps_target:
          type: integer
          format: int32
        first_name:
          type: string
        friends_count:
          type: integer
          format: int32
        friends_url:
          type: string
        friendship_status:
          type: string
          description: >-
            "pending" when you sent the friend request, "requested" when friend
            request was sent to you
        friendship_url:
          type: string
        gender:
          type: string
        id:
          type: integer
          format: int64
        items_url:
          type: string
        last_name:
          type: string
        level:
          type: string
        linked_with_mixpanel:
          type: boolean
        locale:
          type: string
        location_privacy:
          type: string
        measurement_units:
          type: string
        medals_count:
          type: integer
          format: int32
        medals_url:
          type: string
        my_sports:
          type: string
        privacy:
          type: string
        records_and_highlights:
          type: string
        sleep_target:
          type: integer
          description: Daily sleep target in minutes
          format: int32
        top_sports_url:
          type: string
        training_for:
          type: string
        training_logs_count:
          type: integer
          format: int32
        training_logs_url:
          type: string
        url:
          type: string
    UserConsent:
      required:
        - consent_type
        - created_at
        - id
        - scope
      type: object
      properties:
        consent_type:
          type: string
        created_at:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        scope:
          type: string
    Wearable:
      required:
        - connection_mechanism
        - disconnectable
        - display_name
        - logo_url
        - provider
        - status
      type: object
      properties:
        confirm_url:
          type: string
          description: >-
            URL where the user should be redirected after requesting connection.
            Only applicable when connection_mechanism is 'email'.
        connection_mechanism:
          type: string
          description: >-
            This value is 'oauth' for most services, indicating regular OAuth
            flow. For Polar the value is 'email'.
        disconnectable:
          type: boolean
          description: >-
            Tells whether or not the service can be disconnected via API. If
            false user needs to disconnect from the wearable provider side.
        display_name:
          type: string
          description: Display name of the service
        email:
          type: string
          description: >-
            Email associated with this service, if any. Only applicable when
            connection_mechanism is 'email'.
        logo_url:
          type: string
          description: >-
            URL for service logo (png). No size patterns are supported and the
            logo size is always 160x160 pixels.
        oauth_redirect_url_pattern:
          type: string
          description: >-
            Regular expression defining the URL where browser will be redirected
            at the end of the OAuth flow.
        oauth_url:
          type: string
          description: >-
            URL where user should be taken to start the OAuth flow. Only
            returned when explicitly requested.
        provider:
          type: string
          description: Name of the wearable service provider.
        status:
          type: string
          description: Current connection status for this service.
    WeeklyPointSystemSummary:
      required:
        - end_date
        - id
        - image_url
        - points_balance
        - points_breakdown
        - points_earned
        - points_expired
        - points_total
        - start_date
        - title
        - url
      type: object
      properties:
        end_date:
          type: string
          format: date
        id:
          type: integer
          format: int32
        image_url:
          type: string
          description: >-
            Example https://example.com/path/to/image?size={resolution}, where
            {resolution} in (640x344, 750x344, 1125x516, 1242x516)
        points_balance:
          type: string
        points_breakdown:
          type: array
          items:
            $ref: '#/components/schemas/WeeklyPointSystemSummaryBreakdown'
        points_earned:
          type: integer
          format: int32
        points_expired:
          type: integer
          format: int32
        points_history:
          type: array
          items:
            $ref: '#/components/schemas/CompactWeeklyPointSystemSummary'
        points_total:
          type: integer
          format: int32
        start_date:
          type: string
          format: date
        title:
          type: string
        url:
          type: string
    WeeklyPointSystemSummaryBreakdown:
      required:
        - points
        - title
      type: object
      properties:
        details:
          type: string
        points:
          type: string
        title:
          type: string
    WeeklySummary:
      required:
        - breakdown
        - cheerable
        - commentable
        - created_at
        - editable
        - end_date
        - id
        - private
        - removable
        - start_date
        - title
        - url
        - user
      type: object
      properties:
        breakdown:
          type: array
          items:
            $ref: '#/components/schemas/WeeklySummaryBreakdown'
        cheerable:
          type: boolean
        commentable:
          type: boolean
        created_at:
          type: string
          format: date-time
        editable:
          type: boolean
        end_date:
          type: string
          format: date
        highlight:
          type: string
        id:
          type: integer
          format: int32
        point_systems:
          type: array
          items:
            $ref: '#/components/schemas/WeeklyPointSystemSummary'
        private:
          type: boolean
        removable:
          type: boolean
        start_date:
          type: string
          format: date
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
    WeeklySummaryBreakdown:
      required:
        - kind
        - title
      type: object
      properties:
        description:
          type: string
        kind:
          type: string
        result:
          type: string
        title:
          type: string
    WeeklyTarget:
      required:
        - week
      type: object
      properties:
        real_amount:
          type: number
          format: float
        target_amount:
          type: number
          format: float
        unit:
          type: string
          description: Type of the weekly target metric
        week:
          type: string
          description: 'Year and week of the target, e.g. "2015-38"'
    Weight:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
        - value
      type: object
      properties:
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        date:
          type: string
          format: date
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          type: string
          description: |-
            Example https://example.com/path/to/image/{size}.png,
                 {size} - possible size of image(could be 48x48, 64x64, 72x72, 80x80, 96x96, 120x120, 144x144, 192x192)
        id:
          type: integer
          format: int64
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        value:
          type: number
          description: In unit that set in the user settings (kg or lb)
          format: float
    WellnessEntry:
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - exclude_stats
        - icon_url
        - id
        - notes
        - private
        - removable
        - status
        - title
        - url
        - user
        - wellness_type
      type: object
      properties:
        cheerable:
          type: boolean
        cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        cheers_count:
          type: integer
          format: int32
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
          format: int32
        comments_url:
          type: string
        created_at:
          type: string
          format: date-time
        date:
          type: string
          format: date
        description:
          type: string
        editable:
          type: boolean
        exclude_stats:
          type: boolean
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        latest_cheers:
          type: array
          items:
            $ref: '#/components/schemas/Cheer'
        latest_comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        media:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        notes:
          type: string
        param_values:
          type: array
          description: Contain parameter values
          items:
            $ref: '#/components/schemas/WellnessParamValue'
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        private:
          type: boolean
        removable:
          type: boolean
        status:
          type: string
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        wellness_type:
          $ref: '#/components/schemas/WellnessType'
    WellnessParam:
      required:
        - id
        - name
        - value_type
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        options:
          type: array
          description: Available when value type is radio or checkbox
          items:
            $ref: '#/components/schemas/WellnessParamOption'
        value_type:
          type: string
    WellnessParamOption:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    WellnessParamValue:
      required:
        - param
        - value
      type: object
      properties:
        param:
          $ref: '#/components/schemas/WellnessParam'
        value:
          oneOf:
            - type: integer
            - type: number
            - type: boolean
    WellnessType:
      required:
        - description
        - icon_url
        - id
        - is_tip
        - notesable
        - planned_icon_url
        - title
        - url
      type: object
      properties:
        description:
          type: string
        icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        id:
          type: integer
          format: int64
        is_tip:
          type: boolean
        notesable:
          type: boolean
        params:
          type: array
          items:
            $ref: '#/components/schemas/WellnessParam'
        planned_icon_url:
          type: string
          description: |-
            Template URL 'https://example.com/path/to/image/{size}.png',
                 where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192']. Avatars also have sizes '60x60', '160x160' and '320x320'
        title:
          type: string
        url:
          type: string
