openapi: 3.0.0
info:
  title: api.heiaheia.com
  version: "2-oas3"
  description: |
    This document describes how to use the HeiaHeia API.
    - [Authorization](https://github.com/HeiaHeia/api-docs/blob/master/authorization.md)
    - [Authentication](https://github.com/HeiaHeia/api-docs/blob/master/authentication.md)
    - [Error Codes & Responses](https://github.com/HeiaHeia/api-docs/blob/master/errors-responses.md)
    - [Date & DateTime format](https://github.com/HeiaHeia/api-docs/blob/master/date-format.md)
servers:
  - url: 'https://api.heiaheia.com'
    description: "Production"
  - url: 'https://api.h2hstage.com'
    description: "Staging"
  - url: 'http://api.hh.test'
    description: "Development"
paths:
  /banners:
    get:
      operationId: banners_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Banner'
                type: array
      summary: List of Banners 
      tags:
        - banners
  /cheer_types:
    get:
      description: Cheers refilled on Monday.
      operationId: cheer_types_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CheerType'
                type: array
      summary: Available cheer types
      tags:
        - cheer_types
  '/comments/{id}':
    delete:
      operationId: comments_destroy
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '204':
          description: No response was specified
      summary: Delete a comment entry
      tags:
        - comments
  /conversations:
    get:
      operationId: conversations_index
      parameters:
        - description: When true also team related conversations are returned
          in: query
          name: by_conversation
          schema:
            type: boolean
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Conversation'
                type: array
      summary: List of conversations
      tags:
        - conversations
    post:
      operationId: conversations_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Conversation'
      summary: Create or fetch conversation
      tags:
        - conversations
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_id:
                  description: >-
                    The user for whom to create or fetch a conversation. Either this or group_id must be provided
                  type: integer
                group_id:
                  description: >-
                    The group for which to create or fetch a conversation. Either this or user_id must be provided
                  type: integer
  /conversations/unread:
    get:
      operationId: conversations_unread_index
      parameters:
        - description: When true also team related conversations are returned
          in: query
          name: by_conversation
          schema:
            type: boolean
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Conversation'
                type: array
      summary: List of unread conversations
      tags:
        - conversations
  '/conversations/{id}':
    parameters:
      - description: >-
          Identifier of the conversation. When by_conversation is omitted or false this is the conversation partner (user) id
        in: path
        name: id
        required: true
        schema:
          type: integer
      - description: Specifies how the id parameter should be handled
        in: query
        name: by_conversation
        schema:
          type: boolean
    delete:
      operationId: conversations_destroy
      responses:
        '200':
          description: No response was specified
      summary: >-
        Delete conversation. Note: This operation is currently not allowed when by_conversation is true
      tags:
        - conversations
    put:
      operationId: conversations_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Conversation'
      summary: Mark as read
      tags:
        - conversations
  '/conversations/{id}/messages':
    parameters:
      - description: >-
          Identifier of the conversation. When by_conversation is omitted or false this is the conversation partner (user) id
        in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      operationId: conversations_messages_index
      parameters:
        - description: Specifies how the id parameter should be handled
          in: query
          name: by_conversation
          schema:
            type: boolean
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Message'
                type: array
      summary: Get list of messages from conversation.
      tags:
        - conversations
    post:
      operationId: conversations_messages_create
      parameters:
        - description: Specifies how the id parameter should be handled
          in: query
          name: by_conversation
          schema:
            type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Message'
      summary: Create a new message
      tags:
        - conversations
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  description: Required if image param blank.
                  type: string
                image:
                  description: 'The file, support only .JPEG and .PNG format.'
                  type: string
                  format: binary
              required:
                - body
  /email/verify:
    put:
      operationId: emails_verify
      responses:
        '200':
          description: No response was specified
      summary: Verify email
      tags:
        - emails
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
  /feeds:
    get:
      description: >-
        The 'TextEntry' special kind of entry that can not be cheered and
        commented. This kind of entry contain attributes 'actor', 'description'
        and 'dictionary'. The 'actor' field is a 'CompactUser' object
        identifying the user who performed the action that resulted in the
        creation of this text entry. The 'description' attribute has special
        format contain embedded entries: <pre>{{User:3}}'s training goal
        ({{TrainingGoal:1}})</pre> <br> The information about embedded entries
        stored in 'dictionary' atrribute in format 'dictionary['kind:id']':
        <pre>{
         "dictionary": {
            "User:3": {
              "kind": "User",
              "name": "Bender Bending Rodríguez",
              "url": "https://api.heiaheia.com/v2/users/3"
            },
            "TrainingGoal:1": {
              "kind": "TrainingGoal",
              "name": "I’m gonna go build my own theme park, with blackjack and hookers!",
              "url": "https://api.heiaheia.com/v2/training_goals/1"
            }
          }
        }</pre>
      operationId: feeds_index
      parameters:
        - description: The ID of the feed entry that you’ve seen.
          in: query
          name: since
          schema:
            type: integer
        - description: Direction
          in: query
          name: direction
          schema:
            type: string
            default: desc
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Feed'
                type: array
      summary: Finds feeds
      tags:
        - feeds
  '/feeds/{id}':
    get:
      description: >-
        The 'TextEntry' special kind of entry that can not be cheered and
        commented. This kind of entry contain atttributes 'actor', 'description'
        and 'dictionary'. The 'actor' field is a 'CompactUser' object
        identifying the user who performed the action that resulted in the
        creation of this text entry. The 'description' attribute has special
        format contain embedded entries: <pre>{{User:3}}'s training goal
        ({{TrainingGoal:1}})</pre> <br> The information about embedded entries
        stored in 'dictionary' atrribute in format 'dictionary['kind:id']':
        <pre>{
         "dictionary": {
            "User:3": {
              "kind": "User",
              "name": "Bender Bending Rodríguez",
              "url": "https://api.heiaheia.com/v2/users/3"
            },
            "TrainingGoal:1": {
              "kind": "TrainingGoal",
              "name": "I’m gonna go build my own theme park, with blackjack and hookers!",
              "url": "https://api.heiaheia.com/v2/training_goals/1"
            }
          }
        }</pre>
      operationId: feeds_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Feed'
      summary: Find feed by ID
      tags:
        - feeds
  /free_entries:
    get:
      operationId: free_entries_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/FreeEntry'
                type: array
      summary: Finds free entries
      tags:
        - free_entries
    post:
      operationId: free_entries_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/FreeEntry'
      summary: Add a new free entry
      tags:
        - free_entries
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                notes:
                  description: Informal notes for the entry.
                  type: string
                private:
                  type: boolean
              required:
                - date
  /free_entries/years:
    get:
      operationId: free_entries_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - free_entries
  '/free_entries/{free_entry_id}/cheers':
    parameters:
      - in: path
        name: free_entry_id
        required: true
        schema:
          type: integer
    get:
      operationId: free_entries_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - free_entries
    post:
      operationId: free_entries_cheer_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - free_entries
  '/free_entries/{free_entry_id}/comments':
    parameters:
      - in: path
        name: free_entry_id
        required: true
        schema:
          type: integer
    get:
      operationId: free_entries_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - free_entries
    post:
      operationId: free_entries_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - free_entries
  '/free_entries/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: free_entries_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete free entry
      tags:
        - free_entries
    get:
      operationId: free_entries_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/FreeEntry'
      summary: Find free entry by ID
      tags:
        - free_entries
    put:
      operationId: free_entries_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/FreeEntry'
      summary: Update an existing free entry
      tags:
        - free_entries
      requestBody:
        $ref: '#/components/requestBodies/free_entries_update'
  /friends:
    get:
      operationId: friends_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CompactUser'
                type: array
      summary: My friends
      tags:
        - friends
  /friends/requests:
    get:
      operationId: friends_requests_index
      parameters:
        - description: >-
            <b>pending</b> when you sent the friend request <b>requested</b>
            when friend request was sent to you
          in: query
          name: status
          required: true
          schema:
            type: string
            default: requested
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CompactUser'
                type: array
      summary: My friend requests
      tags:
        - friends
  '/friends/{user_id}':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    delete:
      operationId: friends_destroy
      responses:
        '200':
          description: No response was specified
      summary: Decline friendship requests or delete users from friends
      tags:
        - friends
    put:
      operationId: friends_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CompactUser'
      summary: Create or accept friendship requests
      tags:
        - friends
  /invites:
    post:
      operationId: invites_create
      responses:
        '200':
          description: No response was specified
      summary: Send an invitation for yourself.
      tags:
        - invites
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                company_code:
                  type: string
                email:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
              required:
                - company_code
                - email
                - first_name
  '/invites/{id}':
    get:
      operationId: invites_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Invite'
      summary: Find invite by ID
      tags:
        - invites
  /items:
    get:
      operationId: items_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
      summary: Finds items
      tags:
        - items
  /items/agenda:
    get:
      operationId: items_agenda
      parameters:
        - description: Fetch agenda starting from this date (inclusive)
          in: path
          name: start_date
          required: true
          schema:
            type: string
            format: date
        - description: Fetch agenda until this date (inclusive)
          in: path
          name: end_date
          required: true
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
      summary: Finds agenda items
      tags:
        - items
  /items/years:
    get:
      operationId: items_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - items
  '/items/{id}':
    get:
      operationId: items_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Item'
      summary: Find item by ID
      tags:
        - items
  /libraries:
    get:
      operationId: libraries_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Library'
                type: array
      summary: Lists available content libraries
      tags:
        - libraries
  /libraries/training_logs:
    post:
      operationId: libraries_training_logs_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingLog'
      summary: Clone a training log entry
      tags:
        - libraries
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  description: ID of training log entry from the library
                  type: integer
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                status:
                  type: string
                  default: regular
              required:
                - id
                - date
                - status
  /libraries/wellness_entries:
    post:
      operationId: libraries_welllness_entries_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
      summary: Clone a wellness entry
      tags:
        - libraries
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  description: ID of wellness entry from the library
                  type: integer
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                status:
                  type: string
                  default: regular
              required:
                - id
                - date
                - status
  /libraries/workouts:
    get:
      description: >-
        More information about structure can ba found here:
        https://paper.dropbox.com/doc/Better-Life-API-description--AWHof1lxWZLkWJxRpAf4_UVkAg-zYuIzunnfjOtijGR5BiwX#:uid=038703152342316731380785&h2=Workout-Library
      operationId: library_workouts_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: object
                type: array
      summary: List of available workouts
      tags:
        - libraries
  '/libraries/{id}':
    get:
      operationId: libraries_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Library'
      summary: Find library by ID
      tags:
        - libraries
  '/libraries/{library_id}/folders':
    get:
      operationId: libraries_folders_index
      parameters:
        - description: The id of the library whose folders to list.
          in: path
          name: library_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/LibraryFolder'
                type: array
      summary: List library folders
      tags:
        - libraries
  '/libraries/{library_id}/folders/{folder_id}/items':
    get:
      operationId: libraries_folders_items_index
      parameters:
        - description: The id of the library containing the folder whose items to list.
          in: path
          name: library_id
          required: true
          schema:
            type: integer
        - description: The id of the folder whose items to list.
          in: path
          name: folder_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/LibraryItem'
                type: array
      summary: List library folder items
      tags:
        - libraries
  '/libraries/{library_id}/folders/{folder_id}/items/{id}':
    get:
      operationId: libraries_folders_items_show
      parameters:
        - in: path
          name: library_id
          required: true
          schema:
            type: integer
        - in: path
          name: folder_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LibraryItem'
      summary: Find library item by ID
      tags:
        - libraries
  '/libraries/{library_id}/folders/{id}':
    get:
      operationId: libraries_folders_show
      parameters:
        - in: path
          name: library_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LibraryFolder'
      summary: Find library folder by ID
      tags:
        - libraries
  '/libraries/{library_id}/items':
    get:
      operationId: library_items_index
      parameters:
        - in: path
          name: library_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/LibraryItem'
                type: array
      summary: List library item
      tags:
        - libraries
  '/libraries/{library_id}/items/{id}':
    get:
      operationId: libraries_items_show
      parameters:
        - in: path
          name: library_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LibraryItem'
      summary: Find library item by ID
      tags:
        - libraries
  /me:
    delete:
      operationId: me_destroy
      responses:
        '200':
          description: No response was specified
      summary: Deletes the user account of the logged in user
      tags:
        - me
    get:
      operationId: me_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
      summary: Logged in user
      tags:
        - me
    put:
      operationId: me_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
      summary: Update logged in user
      tags:
        - me
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                locale:
                  type: string
                measurement_units:
                  type: string
                privacy:
                  type: string
                birthdate:
                  description: Format YYYY-MM-DD
                  type: string
                  format: date
                gender:
                  type: string
                my_sports:
                  type: string
                records_and_highlights:
                  type: string
                linked_with_mixpanel:
                  type: boolean
                daily_steps_target:
                  type: integer
                sleep_target:
                  description: Daily sleep target in minutes
                  type: integer
  /me/avatar:
    delete:
      operationId: me_avatar_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete avatar
      tags:
        - me
    put:
      operationId: me_avatar_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CompactUser'
      summary: Update user avatar
      tags:
        - me
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  description: >-
                    The image should be square size, support only .JPEG and .PNG
                    format.
                  type: string
                  format: binary
  /me/consents:
    get:
      operationId: mew_consents_index
      parameters:
        - description: >-
            Restricts consents to return by scope. Supported scopes are 'hh' and
            'org_surveys'.
          in: query
          name: scope
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/UserConsent'
                type: array
      summary: List the consents the user has given
      tags:
        - me
    post:
      operationId: me_consents_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UserConsent'
      summary: Adds new consent given by the user
      tags:
        - me
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                scope:
                  type: string
                  enum:
                    - hh
                    - org_surveys
                consent_type:
                  type: string
                  enum:
                    - terms_of_service
                    - privacy_policy
  /medals:
    get:
      operationId: medals_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Medal'
                type: array
      summary: Medals of current user
      tags:
        - medals
  /medals/years:
    get:
      operationId: medals_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - medals
  '/medals/{id}':
    get:
      operationId: medals_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Medal'
      summary: Get a medal by ID
      tags:
        - medals
  '/medals/{medal_id}/cheers':
    parameters:
      - in: path
        name: medal_id
        required: true
        schema:
          type: integer
    get:
      operationId: medals_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - medals
    post:
      operationId: medals_cheers_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - medals
  '/medals/{medal_id}/comments':
    parameters:
      - in: path
        name: medal_id
        required: true
        schema:
          type: integer
    get:
      operationId: medals_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - medals
    post:
      operationId: medals_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - medals
  /media:
    post:
      operationId: media_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Media'
      summary: Add a new media
      tags:
        - media
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                entry_id:
                  type: integer
                entry_type:
                  type: string
                  default: regular
                file:
                  description: 'The file, support only .JPEG and .PNG format.'
                  type: string
                  format: binary
                notes:
                  description: Informal notes for the entry.
                  type: string
              required:
                - entry_id
                - entry_type
  '/media/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: media_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete media
      tags:
        - media
    get:
      operationId: media_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Media'
      summary: Find media by ID
      tags:
        - media
  /megaphones:
    get:
      operationId: megaphones_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Megaphone'
                type: array
      summary: Finds megaphones
      tags:
        - megaphones
    post:
      operationId: megaphones_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Megaphone'
      summary: Add a new megaphone
      tags:
        - megaphones
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organisation_id:
                  type: integer
                notify:
                  description: >-
                    Set to false to skip generating feed entries and
                    notifications; update to true later when media uploads are
                    finished
                  type: boolean
                notes:
                  description: Informal notes for the entry.
                  type: string
              required:
                - organisation_id
                - notes
  /megaphones/years:
    get:
      operationId: megaphones_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - megaphones
  '/megaphones/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: megaphones_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete megaphone entry
      tags:
        - megaphones
    get:
      operationId: megaphones_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Megaphone'
      summary: Find megaphone by ID
      tags:
        - megaphones
    put:
      operationId: megaphones_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Megaphone'
      summary: Update an existing megaphone
      tags:
        - megaphones
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                notify:
                  description: >-
                    Generates feed entries and notifications when set to true
                    (unless already generated earlier)
                  type: boolean
                notes:
                  description: Informal notes for the entry.
                  type: string
              required:
                - notes
  '/megaphones/{megaphone_id}/cheers':
    parameters:
      - in: path
        name: megaphone_id
        required: true
        schema:
          type: integer
    get:
      operationId: megaphones_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - megaphones
    post:
      operationId: megaphones_cheer_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - megaphones
  '/megaphones/{megaphone_id}/comments':
    parameters:
      - in: path
        name: megaphone_id
        required: true
        schema:
          type: integer
    get:
      operationId: megaphones_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - megaphones
    post:
      operationId: megaphones_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - megaphones
  '/messages/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      operationId: messages_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Message'
      summary: Find message by ID
      tags:
        - messages
    put:
      operationId: messages_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Message'
      summary: Mark as read
      tags:
        - messages
  /notifications:
    get:
      operationId: notifications_index
      parameters:
        - description: ID of the last seen notification
          in: query
          name: after
          schema:
            type: integer
        - description: Return only notifications whose ID is less than this value
          in: query
          name: before
          schema:
            type: integer
        - description: Return only notifications that have been created after given date
          in: query
          name: created_after
          schema:
            type: string
            format: date
        - in: query
          name: unread
          schema:
            type: boolean
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Notification'
                type: array
      summary: Finds notifications
      tags:
        - notifications
    put:
      operationId: notifications_mark_all
      parameters:
        - description: ID of the last seen notification
          in: query
          name: before
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
      summary: Mark all as read
      tags:
        - notifications
  '/notifications/{id}':
    put:
      operationId: notifications_update
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Notification'
      summary: Mark as read
      tags:
        - notifications
  /organisations:
    get:
      operationId: organisations_index
      parameters:
        - description: When 'true' returns organisations where you coach in.
          in: query
          name: coach
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Organisation'
                type: array
      summary: List of my organisations
      tags:
        - organisations
    post:
      operationId: organisations_join
      parameters:
        - description: Company code for the organisation to join.
          in: query
          name: code
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organisation'
      summary: Join an organisation
      tags:
        - organisations
  '/organisations/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: organisations_leave
      responses:
        '200':
          description: No response was specified
      summary: Remove organisation membership
      tags:
        - organisations
    get:
      operationId: organisations_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Organisation'
      summary: Find organisation by ID
      tags:
        - organisations
  '/organisations/{organisation_id}/teams':
    get:
      operationId: organisations_teams_index
      parameters:
        - description: The ID of the organisation.
          in: path
          name: organisation_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Group'
      summary: List all teams belonging to given organisation
      tags:
        - organisations
  /personal_programs:
    get:
      operationId: personal_programs_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - in: query
          name: status
          required: true
          schema:
            type: string
            default: all
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/PersonalProgram'
                type: array
      summary: Finds personal programs
      tags:
        - personal_programs
    post:
      operationId: personal_programs_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
      summary: Add a new personal program
      tags:
        - personal_programs
      requestBody:
        $ref: '#/components/requestBodies/personal_programs_create'
  /personal_programs/years:
    get:
      operationId: personal_programs_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - personal_programs
  '/personal_programs/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: personal_programs_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete personal program entry
      tags:
        - personal_programs
    get:
      operationId: personal_programs_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
      summary: Find personal program by ID
      tags:
        - personal_programs
  '/personal_programs/{personal_program_id}/cheers':
    parameters:
      - in: path
        name: personal_program_id
        required: true
        schema:
          type: integer
    get:
      operationId: personal_programs_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - personal_programs
    post:
      operationId: personal_programs_cheers_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - personal_programs
  '/personal_programs/{personal_program_id}/comments':
    parameters:
      - in: path
        name: personal_program_id
        required: true
        schema:
          type: integer
    get:
      operationId: personal_programs_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - personal_programs
    post:
      operationId: personal_programs_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - personal_programs
  '/personal_programs/{personal_program_id}/items':
    get:
      operationId: personal_programs_items_index
      parameters:
        - in: path
          name: personal_program_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
      summary: Get list of personal program items
      tags:
        - personal_programs
  /places:
    post:
      operationId: places_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Place'
      summary: Add a new place
      tags:
        - places
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                latitude:
                  description: 'Latitude of the place, as accurate as is known.'
                  type: number
                  format: double
                longitude:
                  description: 'Longitude of the place, as accurate as is known.'
                  type: number
                  format: double
                name:
                  description: The name of the place.
                  type: string
              required:
                - latitude
                - longitude
                - name
  /places/serach:
    get:
      description: The results ordered based on their distance from a given point.
      operationId: places_search
      parameters:
        - description: A search term to be applied against place names.
          in: query
          name: q
          schema:
            type: string
        - name: latitude
          in: query
          description: 'Latitude of the place, as accurate as is known.'
          schema:
            type: number
            format: double
          required: true
        - name: longitude
          in: query
          description: 'Longitude of the place, as accurate as is known.'
          schema:
            type: number
            format: double
          required: true
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Place'
                type: array
      summary: Finds places
      tags:
        - places
  '/places/{id}':
    get:
      operationId: places_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Place'
      summary: Find place by ID
      tags:
        - places
  /planned_surveys:
    get:
      operationId: planned_surveys_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - description: Only return entries on given date
          in: query
          name: date
          schema:
            type: string
            format: date
        - description: Return only planned surveys that have been planned after given date
          in: query
          name: planned_after
          schema:
            type: string
            format: date
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/PlannedSurvey'
                type: array
      summary: Finds planned surveys
      tags:
        - planned_surveys
  '/planned_surveys/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: planned_surveys_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete planned survey
      tags:
        - planned_surveys
    get:
      operationId: planned_surveys_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlannedSurvey'
      summary: Return planned survey
      tags:
        - planned_surveys
  /point_systems:
    get:
      operationId: point_systems_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/PointSystem'
                type: array
      summary: List of user's point systems
      tags:
        - point_systems
  /program_folders:
    get:
      operationId: program_folders_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/ProgramFolder'
                type: array
      summary: List of available program folders
      tags:
        - program_folders
  '/program_folders/{id}':
    get:
      operationId: program_folders_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProgramFolder'
      summary: Find program folders by ID
      tags:
        - program_folders
  /programs:
    get:
      operationId: programs_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Program'
                type: array
      summary: List of available programs
      tags:
        - programs
  '/programs/{id}':
    get:
      operationId: programs_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Program'
      summary: Find program by ID
      tags:
        - programs
  /pymk:
    get:
      operationId: pymk_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CompactUser'
                type: array
      summary: List of PYMK
      tags:
        - pymk
  /pymk/search:
    get:
      operationId: pymk_search
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CompactUser'
                type: array
      summary: Search PYMK
      tags:
        - pymk
  /recurring_surveys:
    get:
      operationId: recurring_surveys_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/SurveyResult'
                type: array
      summary: Finds results for recurring surveys
      tags:
        - recurring_surveys
  /requests:
    get:
      operationId: requests_index
      parameters:
        - description: ID of the last seen request
          in: query
          name: after
          schema:
            type: integer
        - description: Return only requests whose ID is less than this value
          in: query
          name: before
          schema:
            type: integer
        - in: query
          name: status
          schema:
            type: string
            default: open
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Request'
                type: array
      summary: Finds requests
      tags:
        - requests
  '/requests/{id}':
    get:
      operationId: requests_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Request'
      summary: Find request by ID
      tags:
        - requests
  '/requests/{request_id}/accept':
    patch:
      operationId: requests_accept
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Request'
      summary: Accept request
      tags:
        - requests
  '/requests/{request_id}/reject':
    patch:
      operationId: requests_reject
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Request'
      summary: Reject request
      tags:
        - requests
  /reset_password:
    post:
      operationId: reset_password_create
      responses:
        '200':
          description: No response was specified
      summary: >-
        Request password reset. Sends email with reset link to user's email
        address
      tags:
        - reset_password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
    put:
      operationId: reset_password_update
      responses:
        '200':
          description: No response was specified
      summary: Set a new password
      tags:
        - reset_password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  description: at least 10 chars
                  type: string
              required:
                - token
                - password
  /sick_days:
    get:
      operationId: sick_days_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/SickDay'
                type: array
      summary: Finds sick days
      tags:
        - sick_days
    post:
      operationId: sick_days_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SickDay'
      summary: Add a new sick day
      tags:
        - sick_days
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                notes:
                  description: Informal notes for the entry.
                  type: string
                private:
                  description: By default 'true'
                  type: boolean
              required:
                - date
  /sick_days/years:
    get:
      operationId: sick_days_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - sick_days
  '/sick_days/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: sick_days_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete sick day entry
      tags:
        - sick_days
    get:
      operationId: sick_days_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SickDay'
      summary: Find sick day by ID
      tags:
        - sick_days
    put:
      operationId: sick_days_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SickDay'
      summary: Update an existing sick day
      tags:
        - sick_days
      requestBody:
        $ref: '#/components/requestBodies/free_entries_update'
  '/sick_days/{sick_day_id}/cheers':
    parameters:
      - in: path
        name: sick_day_id
        required: true
        schema:
          type: integer
    get:
      operationId: sick_days_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - sick_days
    post:
      operationId: sick_days_cheer_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - sick_days
  '/sick_days/{sick_day_id}/comments':
    parameters:
      - in: path
        name: sick_day_id
        required: true
        schema:
          type: integer
    get:
      operationId: sick_days_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - sick_days
    post:
      operationId: sick_days_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - sick_days
  /sport_categories:
    get:
      operationId: sport_categories_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CompactSportCategory'
                type: array
      summary: List of sport categories
      tags:
        - sport_categories
  /sport_categories/all:
    get:
      operationId: sport_categories_all
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/SportCategory'
                type: array
      summary: List of all sport categories
      tags:
        - sport_categories
  '/sport_categories/{id}':
    get:
      operationId: sport_categories_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CompactSportCategory'
      summary: Find sport category by ID
      tags:
        - sport_categories
  '/sport_categories/{sport_category_id}/sports':
    get:
      operationId: sport_categories_sports_index
      parameters:
        - in: path
          name: sport_category_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Sport'
      summary: Find sports by category ID
      tags:
        - sport_categories
  /sports:
    get:
      operationId: sports_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Sport'
                type: array
      summary: Finds sports
      tags:
        - sports
  /sports/all:
    get:
      operationId: sports_all
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Sport'
                type: array
      summary: List of all sports
      tags:
        - sports
  /sports/recommended:
    get:
      operationId: sports_recommended
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Sport'
                type: array
      summary: List of recommended sports
      tags:
        - sports
  '/sports/{id}':
    get:
      operationId: sports_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Sport'
      summary: Find sport by ID
      tags:
        - sports
  /survey_results:
    get:
      operationId: survey_results_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - name: survey_id
          in: query
          description: >-
            Return only results associated with given survey. The year
            parameter is ignored when survey_id is present.
          schema:
            type: integer
        - name: planned_survey_id
          in: query
          description: >-
            Fetches survey results associated with given planned survey.
            In practise only returns incomplete results and cannot
            return more than one entry.
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/SurveyResult'
                type: array
      summary: Finds survey results
      tags:
        - survey_results
    post:
      operationId: survey_results_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SurveyResult'
      summary: Add a new survey result
      tags:
        - survey_results
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                survey_id:
                  type: integer
                planned_survey_id:
                  type: integer
                complete:
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Default is true
                  type: boolean
                  default: true
                'answers[][question_id]':
                  type: integer
                'answers[][option_ids][]':
                  type: integer
                'answers[][note]':
                  type: string
              required:
                - survey_id
                - 'answers[][question_id]'
                - 'answers[][option_ids][]'
  /survey_results/years:
    get:
      operationId: survey_results_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - survey_results
  '/survey_results/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: survey_results_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete survey result
      tags:
        - survey_results
    get:
      operationId: survey_results_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SurveyResult'
      summary: Find survey result by ID
      tags:
        - survey_results
    put:
      operationId: survey_results_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/SurveyResult'
      summary: Update existing incomplete survey result
      tags:
        - survey_results
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                complete:
                  description: >-
                    Whether the survey was fully completed or only in part.
                    Existing state is not changed when this parameter is
                    missing.
                  type: boolean
                'answers[][question_id]':
                  type: integer
                'answers[][option_ids][]':
                  type: integer
                'answers[][note]':
                  type: string
              required:
                - 'answers[][question_id]'
                - 'answers[][option_ids][]'
  '/survey_results/{survey_result_id}/cheers':
    parameters:
      - in: path
        name: survey_result_id
        required: true
        schema:
          type: integer
    get:
      operationId: survey_results_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - survey_results
    post:
      operationId: survey_results_cheers_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - survey_results
  '/survey_results/{survey_result_id}/comments':
    parameters:
      - in: path
        name: survey_result_id
        required: true
        schema:
          type: integer
    get:
      operationId: survey_results_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - survey_results
    post:
      operationId: survey_results_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - survey_results
  /surveys:
    get:
      operationId: surveys_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Survey'
                type: array
      summary: Available surveys
      tags:
        - surveys
  '/surveys/{id}':
    get:
      operationId: surveys_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Survey'
      summary: Find survey by ID
      tags:
        - surveys
  '/surveys/{survey_id}/personal_programs':
    post:
      operationId: surveys_personal_programs_create
      parameters:
        - in: path
          name: survey_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
      summary: Add a new personal program
      tags:
        - surveys
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                program_id:
                  type: integer
                parent_personal_program_id:
                  type: integer
              required:
                - program_id
  '/surveys/{survey_id}/programs':
    get:
      operationId: surveys_programs_index
      parameters:
        - in: path
          name: survey_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Program'
                type: array
      summary: Recommended programs
      tags:
        - surveys
  /tags:
    get:
      description: >-
        Always returns default tags with type 'strain' and 'commute' even if no
        entries with tags were created.
      operationId: tags_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Tag'
                type: array
      summary: Available tags
      tags:
        - tags
  '/tips/{id}':
    get:
      operationId: tips_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Tip'
      summary: Find tip by ID
      tags:
        - tips
  /top_sports:
    get:
      operationId: top_sports_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/TopSport'
                type: array
      summary: Top sports of current user
      tags:
        - top_sports
  /top_sports/years:
    get:
      operationId: top_sports_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - top_sports
  '/top_sports/{id}':
    get:
      operationId: top_sports_show
      parameters:
        - $ref: '#/components/parameters/idParam'
        - $ref: '#/components/parameters/yearParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TopSport'
      summary: Get a sport statistic by sport id
      tags:
        - top_sports
  /training_goals:
    get:
      description: Finds training goals
      operationId: training_goals_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/TrainingGoal'
                type: array
      summary: Finds training goals
      tags:
        - training_goals
    post:
      operationId: training_goals_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingGoal'
      summary: Add a new training goal
      tags:
        - training_goals
      requestBody:
        $ref: '#/components/requestBodies/training_goals_create'
  /training_goals/years:
    get:
      operationId: training_goals_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - training_goals
  '/training_goals/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: training_goals_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete training goal
      tags:
        - training_goals
    get:
      operationId: training_goals_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingGoal'
      summary: Get a training goal by ID
      tags:
        - training_goals
    put:
      operationId: training_goals_update
      parameters:
        - description: ID of training goal that needs to be updated
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingGoal'
      summary: Update an existing training goal
      tags:
        - training_goals
      requestBody:
        $ref: '#/components/requestBodies/training_goals_create'
  '/training_goals/{training_goal_id}/cheers':
    parameters:
      - in: path
        name: training_goal_id
        required: true
        schema:
          type: integer
    get:
      operationId: training_goals_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - training_goals
    post:
      operationId: training_goals_cheers_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - training_goals
  '/training_goals/{training_goal_id}/comments':
    parameters:
      - in: path
        name: training_goal_id
        required: true
        schema:
          type: integer
    get:
      operationId: training_goals_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - training_goals
    post:
      operationId: training_goals_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - training_goals
  /training_logs:
    get:
      description: Finds training logs
      operationId: training_logs_index
      parameters:
        - description: Status values that need to be considered for filter
          in: query
          name: status
          required: true
          schema:
            type: string
            default: regular
        - description: Only return entries on given date
          in: query
          name: date
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/TrainingLog'
                type: array
      summary: Finds training logs
      tags:
        - training_logs
    post:
      description: >-
        Allowed only one tag with type 'strain' for
        entry.<br/>sport_id=2&avg_hr=110&calories=148&comment=Great%20ride%21&date=2010-04-27&duration_h=1&duration_m=15&duration_s=34&favourite=1&max_hr=150&mood=4&sport_param_values[distance]=34.5&sport_param_values[avg_speed]=12&sport_param_values[score]=27
      operationId: training_logs_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingLog'
      summary: Add a new training log
      tags:
        - training_logs
      requestBody:
        $ref: '#/components/requestBodies/training_logs_create'
  /training_logs/years:
    get:
      operationId: training_logs_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - training_logs
  '/training_logs/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: training_logs_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete training log entry
      tags:
        - training_logs
    get:
      description: Returns a training log entry based on ID
      operationId: training_logs_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingLog'
      summary: Find training log entry by ID
      tags:
        - training_logs
    put:
      description: >-
        If you want approve entry, just update entry with
        status=regular.<br/>Allowed only one tag with type 'strain' for entry.
      operationId: training_logs_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingLog'
      summary: Update an existing training log
      tags:
        - training_logs
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                sport_id:
                  description: >-
                    ID of sport that needs to be set. Works only when resource
                    with editable_sport=true
                  type: integer
                planned_entry_id:
                  description: >-
                    ID of entry which will be merged into current entry. Works
                    only when resource with editable_sport=true
                  type: integer
                status:
                  type: string
                  default: regular
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                duration_h:
                  description: Duration of the exercise - hours.
                  type: integer
                duration_m:
                  description: Duration of the exercise - minutes.
                  type: integer
                duration_s:
                  description: >-
                    Duration of the exercise - seconds. Note: duration can be
                    expressed in any format convenient to the user: e.g. 110
                    minutes and 1 h 50 minutes are both acceptable.
                  type: integer
                notes:
                  description: Informal notes for the entry.
                  type: string
                mood:
                  description: >-
                    A value from 0 to 5. Where 0 - no mood set, 1 - worst mood,
                    5 - best
                  type: string
                calories:
                  description: Calories spent during the exercise.
                  type: integer
                avg_hr:
                  description: Average heart rate.
                  type: integer
                max_hr:
                  description: Maximum heart rate.
                  type: integer
                favourite:
                  type: boolean
                private:
                  type: boolean
                gpx:
                  description: 'The file, support only GPX format.'
                  type: string
                  format: binary
                'sport_param_values[distance]':
                  description: 'Depends on the sport - int, float, string'
                  type: string
                'sport_param_values[score]':
                  description: 'Depends on the sport  - int, float, string'
                  type: string
                exclude_stats:
                  type: boolean
                'tags[]':
                  type: string
  '/training_logs/{training_log_id}/cheers':
    parameters:
      - in: path
        name: training_log_id
        required: true
        schema:
          type: integer
    get:
      operationId: training_logs_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - training_logs
    post:
      operationId: training_logs_cheers_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - training_logs
  '/training_logs/{training_log_id}/comments':
    parameters:
      - in: path
        name: training_log_id
        required: true
        schema:
          type: integer
    get:
      operationId: training_logs_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - training_logs
    post:
      operationId: training_logs_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - training_logs
  /users/invite:
    post:
      operationId: users_invite
      responses:
        '200':
          description: No response was specified
      summary: Invite users
      tags:
        - users
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  description: User email.
                  type: string
                subject:
                  description: Subject of email.
                  type: string
                message:
                  description: >-
                    We’ll add a link to accept your invitation and send some
                    explanatory text.
                  type: string
              required:
                - email
                - subject
  /users/search:
    get:
      operationId: users_search
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
        - description: >-
            When 'true' returns only colleagues from all organizations where you
            member.
          in: query
          name: colleagues
          schema:
            type: string
        - description: Restricts search by one particular organization.
          in: query
          name: organisation_id
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CompactUser'
                type: array
      summary: Search users
      tags:
        - users
  '/users/{id}':
    get:
      operationId: users_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
      summary: Find user by ID
      tags:
        - users
  '/users/{user_id}/daily_stats':
    get:
      operationId: users_daily_stats_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - description: The date (e.g. 2015-09-18) since when to return the daily statistics
          in: query
          name: since
          schema:
            type: string
        - description: The number of days for which to return statistics
          in: query
          name: days
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/DailyStatistic'
                type: array
      summary: List of user's daily statistics
      tags:
        - users
  '/users/{user_id}/free_entries':
    get:
      operationId: users_free_entries_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/FreeEntry'
                type: array
      summary: List of user free entries
      tags:
        - users
  '/users/{user_id}/free_entries/years':
    get:
      operationId: users_free_entries_years_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/friends':
    get:
      operationId: users_friends
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/CompactUser'
                type: array
      summary: User's friends
      tags:
        - users
  '/users/{user_id}/items':
    get:
      operationId: users_items_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Item'
                type: array
      summary: Items of user specified by user_id
      tags:
        - users
  '/users/{user_id}/items/years':
    get:
      operationId: users_items_years_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/medals':
    get:
      operationId: users_medals_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Medal'
                type: array
      summary: Medals of user specified by user_id
      tags:
        - users
  '/users/{user_id}/medals/years':
    get:
      operationId: users_medals_years_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/monthly_stats':
    get:
      operationId: users_monthly_stats_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - description: The month (e.g. 2015-09) since when to return the monthly statistics
          in: query
          name: since
          schema:
            type: string
        - description: The number of months for which to return statistics
          in: query
          name: months
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/MonthlyStatistic'
                type: array
      summary: List of user's monthly statistics
      tags:
        - users
  '/users/{user_id}/personal_programs':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_personal_programs_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
        - in: query
          name: status
          required: true
          schema:
            type: string
            default: all
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/PersonalProgram'
                type: array
      summary: Finds personal programs
      tags:
        - users
    post:
      operationId: users_personal_programs_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PersonalProgram'
      summary: Add a new personal program
      tags:
        - users
      requestBody:
        $ref: '#/components/requestBodies/personal_programs_create'
  '/users/{user_id}/planned_surveys':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    post:
      operationId: users_planned_surveys_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlannedSurvey'
      summary: Add a new planned survey
      tags:
        - users
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                survey_id:
                  type: integer
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                recurrence_type:
                  description: This event recurs for (N) days/weeks.
                  type: string
                recurrence_times:
                  type: integer
              required:
                - survey_id
                - date
                - recurrence_type
                - recurrence_times
  '/users/{user_id}/sick_days':
    get:
      operationId: users_sick_days_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/SickDay'
                type: array
      summary: List of user sick days
      tags:
        - users
  '/users/{user_id}/sick_days/years':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_sick_days_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/team_memberships':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_team_memberships_index
      parameters:
        - description: >-
            Optional filter for returning team memberships only for the given
            organisation
          in: query
          name: organisation_id
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/TeamMembership'
                type: array
      summary: List of user's team memberships
      tags:
        - users
    post:
      operationId: users_team_memberships_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TeamMembership'
      summary: Join a team or request to join a team
      tags:
        - users
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                team_id:
                  type: integer
              required:
                - team_id
  '/users/{user_id}/team_memberships/{id}':
    delete:
      operationId: users_team_memberships_destroy
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
      summary: Unjoin a team
      tags:
        - users
  '/users/{user_id}/top_sports':
    get:
      operationId: users_top_sports_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/TopSport'
                type: array
      summary: List of user top sports
      tags:
        - users
  '/users/{user_id}/top_sports/years':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_top_sports_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/top_sports/{id}':
    get:
      operationId: users_top_sports_show
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TopSport'
      summary: Get a sport statistic by sport id
      tags:
        - users
  '/users/{user_id}/training_goals':
    get:
      operationId: users_training_goals_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/TrainingGoal'
                type: array
      summary: List of user training goals
      tags:
        - users
  '/users/{user_id}/training_goals/years':
    get:
      operationId: users_training_goals_years_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/training_logs':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_training_logs_index
      parameters:
        - description: Status values that need to be considered for filter
          in: query
          name: status
          required: true
          schema:
            type: string
            default: regular
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/TrainingLog'
                type: array
      summary: List of user training logs
      tags:
        - users
    post:
      description: >-
        Allowed only one tag with type 'strain' for
        entry.<br/>sport_id=2&avg_hr=110&calories=148&comment=Great%20ride%21&date=2010-04-27&duration_h=1&duration_m=15&duration_s=34&favourite=1&max_hr=150&mood=4&sport_param_values[distance]=34.5&sport_param_values[avg_speed]=12&sport_param_values[score]=27
      operationId: users_training_logs_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TrainingLog'
      summary: Add a new training log
      tags:
        - users
      requestBody:
        $ref: '#/components/requestBodies/training_logs_create'
  '/users/{user_id}/training_logs/years':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_training_logs_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/weekly_targets':
    get:
      operationId: users_weekly_targets_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - description: >-
            The year and week number (e.g. 2015-38) since when to return the
            targets
          in: query
          name: since
          schema:
            type: string
        - description: The number of weekly targets to return
          in: query
          name: weeks
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/WeeklyTarget'
                type: array
      summary: List of user's weekly targets
      tags:
        - users
  '/users/{user_id}/weekly_targets/current':
    put:
      operationId: users_weekly_targets_current
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WeeklyTarget'
      summary: Sets current weekly target for the user
      tags:
        - users
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                unit:
                  description: Type of the weekly target metric
                  type: string
                target_amount:
                  type: number
                  format: float
              required:
                - unit
  '/users/{user_id}/weights':
    get:
      operationId: users_weights_index
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Weight'
                type: array
      summary: List of user weights
      tags:
        - users
  '/users/{user_id}/weights/years':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_weights_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  '/users/{user_id}/wellness_entries':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_wellness_entries_index
      parameters:
        - description: Status values that need to be considered for filter
          in: query
          name: status
          required: true
          schema:
            type: string
            default: regular
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/WellnessEntry'
                type: array
      summary: List of user wellness entries
      tags:
        - users
    post:
      operationId: users_wellness_entries_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
      summary: Add a new wellness entry
      tags:
        - users
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                notes:
                  description: Informal notes for the entry.
                  type: string
                wellness_type_id:
                  type: integer
                status:
                  type: string
                  default: regular
                numeric_value:
                  description: Applicable if wellness types has enabled numeric value
                  type: number
                  format: float
                bool_value:
                  description: Applicable if wellness types has enabled boolean value
                  type: boolean
                private:
                  description: By default 'false'
                  type: boolean
                  default: false
                'param_values[wellness_param_id]':
                  description: >-
                    Available values - int, float, boolean, option_id,
                    array[option_id]
                  type: string
              required:
                - date
                - wellness_type_id
                - status
  '/users/{user_id}/wellness_entries/years':
    parameters:
      - in: path
        name: user_id
        required: true
        schema:
          type: integer
    get:
      operationId: users_wellness_entries_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - users
  /wearables:
    get:
      operationId: wearables_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Wearable'
                type: array
      summary: >-
        Lists all available wearable device services and their current status
        information
      tags:
        - wearables
  '/wearables/{provider}':
    parameters:
      - description: The name of the wearable provider.
        in: path
        name: provider
        required: true
        schema:
          type: string
    get:
      operationId: wearables_show
      parameters:
        - description: >-
            When true the 'oauth_url' property will be available in response,
            allowing client to start the OAuth access grant flow.
          in: query
          name: prepare_auth
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Wearable'
      summary: Find wearable device service by provider name
      tags:
        - wearables
    put:
      operationId: wearables_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Wearable'
      summary: Update the connection status of a wearable device service
      tags:
        - wearables
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                status:
                  type: string
                email:
                  description: >-
                    If 'status' is 'requested' this defines the user's email
                    address in Polar.
                  type: string
                oauth_redirect_url:
                  description: >-
                    If 'status' is 'connected' this defines the URL the user was
                    redirected to at the end of the OAuth flow.
                  type: string
  /weekly_point_system_summaries:
    get:
      operationId: weekly_point_system_summaries_index
      parameters:
        - description: Filter by point system ID
          in: query
          name: point_system_id
          schema:
            type: integer
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/WeeklyPointSystemSummary'
                type: array
      summary: Finds weekly point system summaries
      tags:
        - weekly_point_system_summaries
  '/weekly_point_system_summaries/{id}':
    get:
      operationId: weekly_point_system_summaries_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WeeklyPointSystemSummary'
      summary: Find summary by ID
      tags:
        - weekly_point_system_summaries
  /weekly_summaries:
    get:
      operationId: weekly_summaries_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/WeeklySummary'
                type: array
      summary: Finds weekly summaries
      tags:
        - weekly_summaries
  '/weekly_summaries/{id}':
    get:
      operationId: weekly_summaries_show
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WeeklySummary'
      summary: Find summary by ID
      tags:
        - weekly_summaries
  /weights:
    get:
      operationId: weights_index
      parameters:
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Weight'
                type: array
      summary: Finds weights
      tags:
        - weights
    post:
      operationId: weights_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Weight'
      summary: Add a new weight
      tags:
        - weights
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                notes:
                  description: Informal notes for the entry.
                  type: string
                value:
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                  type: string
                private:
                  description: By default 'true'
                  type: boolean
                  default: true
              required:
                - date
  /weights/years:
    get:
      operationId: weights_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - weights
  '/weights/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: weights_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete weight entry
      tags:
        - weights
    get:
      operationId: weights_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Weight'
      summary: Find weight by ID
      tags:
        - weights
    put:
      operationId: weights_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Weight'
      summary: Update an existing weight
      tags:
        - weights
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                notes:
                  description: Informal notes for the entry.
                  type: string
                value:
                  description: >-
                    Value should be in unit that set in the user settings (kg or
                    lb).
                  type: string
                private:
                  description: By default 'true'
                  type: boolean
                  default: true
  '/weights/{weight_id}/cheers':
    parameters:
      - in: path
        name: weight_id
        required: true
        schema:
          type: integer
    get:
      operationId: weights_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - weights
    post:
      operationId: weights_cheers_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - weights
  '/weights/{weight_id}/comments':
    parameters:
      - in: path
        name: weight_id
        required: true
        schema:
          type: integer
    get:
      operationId: weights_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - weights
    post:
      operationId: weights_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - weights
  /wellness_entries:
    get:
      operationId: wellness_entries_index
      parameters:
        - description: Status values that need to be considered for filter
          in: query
          name: status
          required: true
          schema:
            type: string
            default: regular
        - description: Only return entries on given date
          in: query
          name: date
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/yearParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/WellnessEntry'
                type: array
      summary: Finds wellness entries
      tags:
        - wellness_entries
    post:
      operationId: wellness_entries_create
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
      summary: Add a new wellness entry
      tags:
        - wellness_entries
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                notes:
                  description: Informal notes for the entry.
                  type: string
                wellness_type_id:
                  description: ID of WellnessType
                  type: integer
                status:
                  type: string
                  default: regular
                numeric_value:
                  description: Applicable if wellness types has enabled numeric value
                  type: number
                  format: float
                bool_value:
                  description: Applicable if wellness types has enabled boolean value
                  type: boolean
                private:
                  description: By default 'false'
                  type: boolean
                  default: false
                'param_values[wellness_param_id]':
                  description: >-
                    Available values - int, float, boolean, option_id,
                    array[option_id]
                  type: string
              required:
                - date
                - wellness_type_id
                - status
  /wellness_entries/years:
    get:
      operationId: wellness_entries_years_index
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  type: integer
                type: array
      summary: Get list of available years
      tags:
        - wellness_entries
  '/wellness_entries/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    delete:
      operationId: wellness_entries_destroy
      responses:
        '200':
          description: No response was specified
      summary: Delete wellness entry
      tags:
        - wellness_entries
    get:
      operationId: wellness_entries_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
      summary: Find wellness entry by ID
      tags:
        - wellness_entries
    put:
      operationId: wellness_entries_update
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WellnessEntry'
      summary: Update an existing wellness entry
      tags:
        - wellness_entries
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                date:
                  description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                  type: string
                  format: date
                notes:
                  description: Informal notes for the entry.
                  type: string
                status:
                  type: string
                  default: regular
                numeric_value:
                  description: Applicable if wellness types has enabled numeric value
                  type: number
                  format: float
                bool_value:
                  description: Applicable if wellness types has enabled boolean value
                  type: boolean
                private:
                  description: By default 'false'
                  type: boolean
                  default: false
  '/wellness_entries/{wellness_entry_id}/cheers':
    parameters:
      - in: path
        name: wellness_entry_id
        required: true
        schema:
          type: integer
    get:
      operationId: wellness_entries_cheers_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Cheer'
                type: array
      summary: Get list of cheers
      tags:
        - wellness_entries
    post:
      operationId: wellness_entries_cheers_create
      parameters:
        - in: query
          name: cheer_type_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cheer'
      summary: Add a new cheer
      tags:
        - wellness_entries
  '/wellness_entries/{wellness_entry_id}/comments':
    parameters:
      - in: path
        name: wellness_entry_id
        required: true
        schema:
          type: integer
    get:
      operationId: wellness_entries_comments_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
      summary: Get list of comments
      tags:
        - wellness_entries
    post:
      operationId: wellness_entries_comments_create
      parameters:
        - in: query
          name: notes
          required: true
          schema:
            type: string
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Comment'
      summary: Add a new comment
      tags:
        - wellness_entries
  /wellness_types:
    get:
      operationId: wellness_types_index
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/perPageParam'
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/WellnessType'
                type: array
      summary: List of available wellness entry types
      tags:
        - wellness_types
  /wellness_types/all:
    get:
      operationId: wellness_types_all
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/WellnessType'
                type: array
      summary: List of all available wellness entry types
      tags:
        - wellness_types
  '/wellness_types/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      operationId: wellness_types_show
      responses:
        '200':
          description: No response was specified
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/WellnessType'
      summary: Find wellness type by ID
      tags:
        - wellness_types
tags:
  - description: Cheer types
    name: cheer_types
  - description: Comments
    name: comments
  - description: Conversations
    name: conversations
  - description: Emails
    name: emails
  - description: Feeds
    name: feeds
  - description: Free entries
    name: free_entries
  - description: Friends
    name: friends
  - description: Invites
    name: invites
  - description: Items
    name: items
  - description: Libraries
    name: libraries
  - description: Me
    name: me
  - description: Medals
    name: medals
  - description: Media
    name: media
  - description: Megaphones
    name: megaphones
  - description: Messages
    name: messages
  - description: Notifications
    name: notifications
  - description: Organisations
    name: organisations
  - description: Personal programs
    name: personal_programs
  - description: Places
    name: places
  - description: Planned surveys
    name: planned_surveys
  - description: Point systems
    name: point_systems
  - description: Program folders
    name: program_folders
  - description: Programs
    name: programs
  - description: PYMK
    name: pymk
  - description: Recurring surveys
    name: recurring_surveys
  - description: Requests
    name: requests
  - description: Reset password
    name: reset_password
  - description: Sick days
    name: sick_days
  - description: Sport categories
    name: sport_categories
  - description: Sports
    name: sports
  - description: Survey results
    name: survey_results
  - description: Surveys
    name: surveys
  - description: Tags
    name: tags
  - description: Tips
    name: tips
  - description: Top Sports
    name: top_sports
  - description: Training Goals
    name: training_goals
  - description: Training logs
    name: training_logs
  - description: Users
    name: users
  - description: Wearable device services
    name: wearables
  - description: Weekly point system summaries
    name: weekly_point_system_summaries
  - description: Weekly summaries
    name: weekly_summaries
  - description: Weights
    name: weights
  - description: Wellness entries
    name: wellness_entries
  - description: Wellness entry types
    name: wellness_types
components:
  parameters:
    pageParam:
      in: query
      name: page
      schema:
        type: integer
        default: 1
    perPageParam:
      description: Per page between 1 and 100
      in: query
      name: per_page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    yearParam:
      description: Gets list of entries for given year. Be default it's current year.
      in: query
      name: year
      schema:
        type: integer
        default: 2019
    idParam:
      in: path
      name: id
      required: true
      schema:
        type: integer
  requestBodies:
    personal_programs_create:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              program_id:
                type: integer
              start_date:
                description: Only monday
                type: string
                format: date
            required:
              - program_id
              - start_date
    training_goals_create:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              notes:
                description: Informal notes for the entry.
                type: string
              private:
                type: boolean
    free_entries_update:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              date:
                description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                type: string
                format: date
              notes:
                description: Informal notes for the entry.
                type: string
              private:
                type: boolean
    training_logs_create:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              date:
                description: Date of the entry as “YYYY-MM-DD”. Example “2010-04-23”
                type: string
                format: date
              sport_id:
                type: integer
              status:
                type: string
                default: regular
              duration_h:
                description: Duration of the exercise - hours.
                type: integer
              duration_m:
                description: Duration of the exercise - minutes.
                type: integer
              duration_s:
                description: >-
                  Duration of the exercise - seconds. Note: duration can be
                  expressed in any format convenient to the user: e.g. 110
                  minutes and 1 h 50 minutes are both acceptable.
                type: integer
              notes:
                description: Informal notes for the entry.
                type: string
              mood:
                description: >-
                  A value from 0 to 5. Where 0 - no mood set, 1 - worst mood, 5
                  - best
                type: string
              calories:
                description: Calories spent during the exercise.
                type: integer
              avg_hr:
                description: Average heart rate.
                type: integer
              max_hr:
                description: Maximum heart rate.
                type: integer
              favourite:
                type: boolean
              private:
                type: boolean
              gpx:
                description: 'The file, support only GPX format.'
                type: string
                format: binary
              'sport_param_values[distance]':
                description: 'Depends on the sport - int, float, string'
                type: string
              'sport_param_values[score]':
                description: 'Depends on the sport - int, float, string'
                type: string
              place_id:
                type: integer
              exclude_stats:
                type: boolean
              'tags[]':
                type: string
              workout_collection_id:
                type: integer
            required:
              - date
              - sport_id
              - status
  properties:
    iconProperty:
      description: |-
        Template URL 'https://example.com/path/to/image/{size}.png',
        where '{size}' value can be from this list ['30x30', '34x34', '48x48', '64x64, '72x72', '80x80', '96x96', '120x120', '144x144', '192x192'].
        Avatars also have sizes '60x60', '160x160' and '320x320'
      type: string
  schemas:
    Answer:
      properties:
        note:
          type: string
        options:
          items:
            $ref: '#/components/schemas/QuestionOption'
          type: array
        question_id:
          type: integer
        question_key:
          type: string
        title:
          type: string
      required:
        - options
        - question_id
        - title
    Banner:
      properties:
        id:
          type: integer
        url:
          type: string
        title:
          type: string
        content:
          type: string
        image_url:
          description: >-
            Example https://example.com/path/to/image/{resolution}.jpg, where
            {resolution} in (640x344, 750x344, 1125x516, 1242x516)
          type: string
        created_at:
          format: date-time
          type: string
      required:
        - id
        - image_url
    Cheer:
      properties:
        cheer_type:
          $ref: '#/components/schemas/CheerType'
        created_at:
          format: date-time
          type: string
        editable:
          type: boolean
        id:
          type: integer
        removable:
          type: boolean
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - cheer_type
        - created_at
        - editable
        - id
        - removable
        - user
    CheerType:
      properties:
        icon_url:
          description: >-
            Template URL 'https://example.com/path/to/image/{height}.png', where
            '{height}' value can be from this list ['34', '44', '48', '60', '64', '72', '80', '96', '128', '144', '192']
          type: string
        id:
          type: integer
        level:
          type: integer
      required:
        - icon_url
        - id
        - level
    Comment:
      properties:
        created_at:
          format: date-time
          type: string
        editable:
          type: boolean
        id:
          type: integer
        notes:
          type: string
        removable:
          type: boolean
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - created_at
        - editable
        - id
        - notes
        - removable
        - url
        - user
    CompactPersonalProgram:
      properties:
        date:
          format: date
          type: string
        description:
          type: string
        editable:
          type: boolean
        end_date:
          format: date
          type: string
        id:
          type: integer
        items_count:
          type: integer
        items_done:
          type: integer
        parent_personal_program_id:
          type: integer
        removable:
          type: boolean
        start_date:
          format: date
          type: string
        title:
          type: string
        url:
          type: string
      required:
        - date
        - editable
        - end_date
        - id
        - items_count
        - items_done
        - removable
        - start_date
        - title
        - url
    CompactProgram:
      properties:
        banner_url:
          type: string
        description:
          type: string
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        start_only_once:
          type: boolean
        subtitle:
          type: string
        super_program:
          type: boolean
        svg_icon_url:
          type: string
        title:
          type: string
        url:
          type: string
      required:
        - description
        - icon_url
        - id
        - start_only_once
        - super_program
        - svg_icon_url
        - title
        - url
    CompactSport:
      properties:
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        key:
          type: string
        name:
          type: string
        planned_icon_url:
          $ref: '#/components/properties/iconProperty'
        url:
          type: string
      required:
        - icon_url
        - id
        - key
        - name
        - planned_icon_url
        - url
    CompactSportCategory:
      properties:
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        name:
          type: string
        sports_url:
          type: string
        url:
          type: string
      required:
        - icon_url
        - id
        - name
        - sports_url
        - url
    CompactSurvey:
      properties:
        banner_image_url:
          description: >-
            Banner image to use with the survey, if any. There is only single
            size that the client must scale appropriately.
          type: string
        description:
          type: string
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        planned_icon_url:
          $ref: '#/components/properties/iconProperty'
        recurring:
          type: boolean
        title:
          type: string
        url:
          type: string
      required:
        - icon_url
        - id
        - planned_icon_url
        - recurring
        - title
        - url
    CompactUser:
      properties:
        avatar_url:
          $ref: '#/components/properties/iconProperty'
        city:
          type: string
        country:
          type: string
        first_name:
          type: string
        friendship_status:
          description: >-
            "pending" when you sent the friend request, "requested" when friend
            request was sent to you
          type: string
        friendship_url:
          type: string
        id:
          type: integer
        last_name:
          type: string
        pymk_reason:
          type: string
        training_for:
          type: string
        url:
          type: string
      required:
        - avatar_url
        - first_name
        - friendship_status
        - friendship_url
        - id
        - url
    CompactWeeklyPointSystemSummary:
      properties:
        end_date:
          format: date
          type: string
        points_earned:
          type: integer
        points_expired:
          type: integer
        points_total:
          type: integer
        start_date:
          format: date
          type: string
      required:
        - end_date
        - points_earned
        - points_expired
        - points_total
        - start_date
    Conversation:
      description: >-
        The team this conversation belongs to. Only present for team
        conversations
      properties:
        group:
          $ref: '#/components/schemas/Group'
        id:
          description: Identifier of the conversation
          type: integer
        last_message:
          $ref: '#/components/schemas/Message'
        messages_url:
          type: string
        unread:
          type: boolean
        url:
          type: string
        user_id:
          type: integer
      required:
        - id
        - last_message
        - messages_url
        - unread
        - url
    DailyStatistic:
      properties:
        date:
          description: 'Date of the daily statistic, e.g. "2015-09-18"'
          type: string
        distance:
          description: Distance covered in kilometers or miles (depending on user settings)
          format: float
          type: number
        exercise_count:
          type: integer
        exercise_duration:
          description: Combined exercise duration in minutes
          type: integer
        floors:
          type: integer
        resting_heart_rate:
          type: integer
        sick_day:
          type: boolean
        sleep:
          description: Sleep in minutes
          type: integer
        steps:
          type: integer
        weight:
          description: Weight in kilograms or pounds (depending on user settings)
          format: float
          type: number
        wellness_entry_count:
          type: integer
      required:
        - date
    Feed:
      properties:
        created_at:
          format: date-time
          type: string
        editable:
          type: boolean
        entry:
          oneOf:
            - $ref: '#/components/schemas/TextEntry'
            - $ref: '#/components/schemas/TrainingLog'
            - $ref: '#/components/schemas/FreeEntry'
            - $ref: '#/components/schemas/Weight'
            - $ref: '#/components/schemas/SickDay'
            - $ref: '#/components/schemas/Medal'
            - $ref: '#/components/schemas/TrainingGoal'
            - $ref: '#/components/schemas/Megaphone'
            - $ref: '#/components/schemas/WellnessEntry'
            - $ref: '#/components/schemas/PersonalProgram'
            - $ref: '#/components/schemas/WeeklySummary'
            - $ref: '#/components/schemas/Tip'
        id:
          type: integer
        kind:
          type: string
        removable:
          type: boolean
        url:
          type: string
      required:
        - created_at
        - editable
        - entry
        - id
        - kind
        - removable
        - url
    FreeEntry:
      properties:
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        date:
          format: date
          type: string
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        media:
          items:
            $ref: '#/components/schemas/Media'
          type: array
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
    Group:
      properties:
        access_type:
          description: >-
            Defines whether the team can be joined by anyone, membership needs to be requested, or the team is invite only
          type: string
        avatar_url:
          $ref: '#/components/properties/iconProperty'
        description:
          type: string
        id:
          type: integer
        managed:
          description: >-
            True for teams whose memberships are managed by administrators,
            false for teams that can be freely joined and left by users
            themselves
          type: boolean
        member_count:
          description: Number of accepted members in the group
          type: integer
        name:
          type: string
        official:
          description: >-
            True for teams greated by organisation administrator, false for user
            created teams
          type: boolean
        organisation:
          $ref: '#/components/schemas/Organisation'
      required:
        - access_type
        - id
        - managed
        - member_count
        - name
        - official
        - organisation
    Invite:
      properties:
        email:
          description: Email associated with this invite.
          type: string
        status:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - email
        - status
        - user
    Item:
      properties:
        entry:
          oneOf:
            - $ref: '#/components/schemas/TrainingLog'
            - $ref: '#/components/schemas/FreeEntry'
            - $ref: '#/components/schemas/Weight'
            - $ref: '#/components/schemas/SickDay'
            - $ref: '#/components/schemas/Medal'
            - $ref: '#/components/schemas/TrainingGoal'
            - $ref: '#/components/schemas/Megaphone'
            - $ref: '#/components/schemas/WellnessEntry'
            - $ref: '#/components/schemas/PersonalProgram'
        id:
          type: integer
        kind:
          type: string
        url:
          type: string
      required:
        - entry
        - id
        - kind
        - url
    Library:
      properties:
        id:
          type: integer
        name:
          type: string
        url:
          type: string
      required:
        - id
        - name
        - url
    LibraryFolder:
      properties:
        exercise_count:
          type: integer
        id:
          type: integer
        name:
          type: string
        program_count:
          type: integer
        survey_count:
          type: integer
        url:
          type: string
        video_count:
          type: integer
      required:
        - exercise_count
        - id
        - name
        - program_count
        - survey_count
        - url
        - video_count
    LibraryItem:
      properties:
        canonical_url:
          description: Item URL without folder part
          type: string
        description:
          type: string
        entry:
          oneOf:
            - $ref: '#/components/schemas/CompactProgram'
            - $ref: '#/components/schemas/Survey'
            - $ref: '#/components/schemas/Video'
            - $ref: '#/components/schemas/TrainingLog'
            - $ref: '#/components/schemas/WellnessEntry'
        folder_id:
          description: Identifier of the folder the item is contained in
          type: integer
        id:
          type: integer
        kind:
          type: string
        name:
          type: string
        url:
          description: 'Full item URL, including folder part'
          type: string
      required:
        - canonical_url
        - entry
        - folder_id
        - id
        - kind
        - name
        - url
    Medal:
      properties:
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          description: |-
            Example https://example.com/path/to/image/{width}.png,
             {width} - possible width of image(could be 48, 64, 72, 80, 96, 120, 144, 192).
             Icon can be with dimension WxW or Wx4/3*W. All sizes of icons:
             48x48, 48x64, 64x64, 64x85, 72x72, 72x96, 80x80, 80x107, 96x96, 96x128, 120x120, 120x160, 144x144, 144x192, 192x192, 192x256
          type: string
        id:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        organisation:
          $ref: '#/components/schemas/Organisation'
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        year:
          type: integer
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - editable
        - icon_url
        - id
        - private
        - removable
        - title
        - url
        - user
        - year
    Media:
      properties:
        content_url:
          description: URL on original file
          type: string
        created_at:
          format: date-time
          type: string
        id:
          type: integer
        image_url:
          description: >-
            Example https://example.com/path/to/image/{size}.png, {size} -
            possible size of image(could be 192, 480, 1080)
          type: string
        notes:
          type: string
        type:
          type: string
        url:
          type: string
      required:
        - content_url
        - created_at
        - id
        - image_url
        - notes
        - type
        - url
    Megaphone:
      properties:
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          type: string
        id:
          type: integer
        image_url:
          type: string
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        media:
          items:
            $ref: '#/components/schemas/Media'
          type: array
        notes:
          type: string
        organisation:
          $ref: '#/components/schemas/Organisation'
        organisation_name:
          type: string
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - editable
        - icon_url
        - id
        - notes
        - organisation
        - organisation_name
        - removable
        - title
        - url
        - user
    Message:
      properties:
        body:
          type: string
        conversation_url:
          type: string
        created_at:
          format: date-time
          type: string
        from:
          $ref: '#/components/schemas/CompactUser'
        id:
          type: integer
        image_url:
          description: >-
            Example https://example.com/path/to/image/{size}.png, {size} -
            possible size of image(could be 192, 480, 1080)
          type: string
        to:
          $ref: '#/components/schemas/CompactUser'
        unread:
          type: boolean
        url:
          type: string
      required:
        - body
        - conversation_url
        - created_at
        - from
        - id
        - to
        - unread
        - url
    ModeValues:
      properties:
        distance:
          type: string
        duration:
          type: string
        steps:
          type: string
    MonthlyStatistic:
      properties:
        month:
          description: 'Month of the monthly statistic, e.g. "2015-10"'
          type: string
        weight:
          description: Weight in kilograms or pounds (depending on user settings)
          format: float
          type: number
      required:
        - month
    Notification:
      description: >-
        Conversation associated with this notification. Only present if action
        is 'sent_message'
      properties:
        action:
          type: string
        actors:
          items:
            $ref: '#/components/schemas/CompactUser'
          type: array
        conversation:
          $ref: '#/components/schemas/Conversation'
        created_at:
          format: date-time
          type: string
        id:
          type: integer
        message:
          type: string
        object:
          $ref: '#/components/schemas/NotificationObject'
        unread:
          type: boolean
        url:
          type: string
      required:
        - action
        - created_at
        - id
        - message
        - object
        - unread
        - url
    NotificationObject:
      properties:
        id:
          type: integer
        kind:
          type: string
        url:
          type: string
      required:
        - id
        - kind
        - url
    Organisation:
      properties:
        creatable_megaphones:
          type: boolean
        id:
          type: integer
        name:
          type: string
        url:
          type: string
        kind:
          type: string
          enum: [company, school, club, generic_community]
      required:
        - creatable_megaphones
        - id
        - name
        - url
        - kind
    OrganisationSurvey:
      properties:
        ends_on:
          format: date
          type: string
        started_at:
          format: date-time
          type: string
        title:
          type: string
      required:
        - ends_on
        - started_at
    PersonalProgram:
      properties:
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        date:
          format: date
          type: string
        description:
          type: string
        editable:
          type: boolean
        end_date:
          format: date
          type: string
        id:
          type: integer
        items_count:
          type: integer
        items_done:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        linked_personal_programs:
          items:
            $ref: '#/components/schemas/PersonalProgram'
          type: array
        parent_personal_program_id:
          type: integer
        program:
          $ref: '#/components/schemas/CompactProgram'
        removable:
          type: boolean
        start_date:
          format: date
          type: string
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - end_date
        - id
        - items_count
        - items_done
        - program
        - removable
        - start_date
        - title
        - url
        - user
    Place:
      properties:
        editable:
          type: boolean
        id:
          type: integer
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        name:
          type: string
        removable:
          type: boolean
        url:
          type: string
      required:
        - editable
        - id
        - latitude
        - longitude
        - name
        - removable
        - url
    PlannedSurvey:
      properties:
        date:
          format: date
          type: string
        id:
          type: integer
        organisation_survey:
          $ref: '#/components/schemas/OrganisationSurvey'
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        reminder_button:
          type: string
        reminder_description:
          type: string
        reminder_description_short:
          type: string
        reminder_footer:
          type: string
        reminder_title:
          type: string
        reminder_title_short:
          type: string
        sticky_days:
          type: integer
        survey:
          $ref: '#/components/schemas/Survey'
        url:
          type: string
      required:
        - date
        - id
        - sticky_days
        - survey
        - url
    PointSystem:
      properties:
        description:
          type: string
        id:
          type: integer
        image_url:
          description: >-
            Example https://example.com/path/to/image?size={resolution}, where
            {resolution} in (640x344, 750x344, 1125x516, 1242x516)
          type: string
        levels:
          items:
            $ref: '#/components/schemas/PointSystemLevel'
          type: array
        levels_title:
          type: string
        points_total:
          type: integer
        rules:
          items:
            $ref: '#/components/schemas/PointSystemRule'
          type: array
        rules_image_url:
          description: >-
            Example https://example.com/path/to/image?width={width}, where
            {width} in (640, 750, 1125, 1242)
          type: string
        rules_title:
          type: string
        title:
          type: string
      required:
        - description
        - id
        - image_url
        - levels
        - levels_title
        - points_total
        - rules
        - rules_image_url
        - rules_title
        - title
    PointSystemLevel:
      properties:
        name:
          type: string
        points:
          type: string
        title:
          type: string
      required:
        - name
        - points
        - title
    PointSystemRule:
      properties:
        points:
          type: string
        title:
          type: string
      required:
        - points
        - title
    Program:
      properties:
        banner_url:
          type: string
        description:
          type: string
        entries:
          items:
            $ref: '#/components/schemas/ProgramEntry'
          type: array
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        start_only_once:
          type: boolean
        subtitle:
          type: string
        super_program:
          type: boolean
        svg_icon_url:
          type: string
        title:
          type: string
        url:
          type: string
      required:
        - description
        - icon_url
        - id
        - start_only_once
        - super_program
        - svg_icon_url
        - title
        - url
    ProgramEntry:
      properties:
        day:
          type: integer
        icon_url:
          $ref: '#/components/properties/iconProperty'
        kind:
          type: string
        name:
          type: string
        week:
          type: integer
      required:
        - day
        - icon_url
        - kind
        - name
        - week
    ProgramFolder:
      properties:
        icon_url:
          description: SVG icon
          type: string
        id:
          type: integer
        programs:
          items:
            $ref: '#/components/schemas/Program'
          type: array
        started_personal_programs:
          items:
            $ref: '#/components/schemas/PersonalProgram'
          type: array
        title:
          type: string
        url:
          type: string
      required:
        - icon_url
        - id
        - title
        - url
    Question:
      properties:
        category:
          type: string
        compare_to_previous_result:
          description: >-
            Compare current answer to previous answer for the same question key.
            Delta is shown on survey answers summary screen
          type: boolean
        description:
          type: string
        global_comparison_type:
          description: >-
            The algorithm to apply to answer option's answer percentage to
            calculate reference number to compare user's result to. Unsupported
            types must be ignored.
          type: string
        id:
          type: integer
        key:
          type: string
        kind:
          type: string
        max_required_options:
          type: integer
        min_required_options:
          type: integer
        notable:
          type: boolean
        options:
          items:
            $ref: '#/components/schemas/QuestionOption'
          type: array
        show_historical_comparison:
          description: >-
            Whether or not this question should be included in graph comparing
            current answer with old answers.
          type: boolean
        subtype:
          type: string
        title:
          type: string
      required:
        - compare_to_previous_result
        - id
        - kind
        - max_required_options
        - min_required_options
        - notable
        - options
        - show_historical_comparison
        - title
    QuestionOption:
      properties:
        answer_percentage:
          description: >-
            The percentage (0.0-100.0) of answers where this particular option
            was chosen.
          format: float
          type: number
        conclusion:
          type: string
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        points:
          description: Used to compare questions with previous result
          type: integer
        title:
          type: string
      required:
        - answer_percentage
        - conclusion
        - icon_url
        - id
        - points
        - title
    Request:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/RequestAction'
          type: array
        actor:
          $ref: '#/components/schemas/CompactUser'
        description:
          type: string
        icon_url:
          type: string
        id:
          type: integer
        status:
          type: string
        target:
          oneOf:
            - $ref: '#/components/schemas/CompactUser'
            - $ref: '#/components/schemas/Group'
            - $ref: '#/components/schemas/Organisation'
        title:
          type: string
        type:
          type: string
        url:
          type: string
      required:
        - actor
        - description
        - icon_url
        - id
        - status
        - target
        - title
        - type
        - url
    RequestAction:
      properties:
        title:
          type: string
        type:
          type: string
        url:
          type: string
      required:
        - title
        - type
        - url
    SickDay:
      properties:
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        date:
          format: date
          type: string
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
    Sport:
      properties:
        creatable:
          description: >-
            Indicates that user can create this kind of entry. Value is 'false'
            for Polar, FitBit, ActiveDay (wearable devices).
          type: boolean
        dummy:
          type: boolean
        exclude_stats:
          type: boolean
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        key:
          type: string
        name:
          type: string
        planned_icon_url:
          $ref: '#/components/properties/iconProperty'
        sport_params:
          items:
            $ref: '#/components/schemas/SportParam'
          type: array
        url:
          type: string
      required:
        - creatable
        - dummy
        - exclude_stats
        - icon_url
        - id
        - key
        - name
        - planned_icon_url
        - url
    SportCategory:
      properties:
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        name:
          type: string
        sports:
          items:
            $ref: '#/components/schemas/Sport'
          type: array
        sports_url:
          type: string
        url:
          type: string
      required:
        - icon_url
        - id
        - name
        - sports_url
        - url
    SportParam:
      properties:
        distance:
          description: Params distance or not.
          type: boolean
        key:
          description: >-
            score, avg_speed, max_speed, best_lap_time, etc. Depends on the
            sport.
          type: string
        name:
          description: Human readable name. Depends on user locale
          type: string
        unit_name:
          description: >-
            Human readable format: "mi, km, ft, m, mph, km/h, sec, °F, °C, rpm
            ". Depends on user locale and unit system
          type: string
        unit_type:
          description: >-
            mi, km, ft, m, mph, kmph, sec, f, c, rpm or empty. Depends on user
            unit system
          type: string
        value_type:
          type: string
      required:
        - distance
        - key
        - name
        - unit_name
        - unit_type
        - value_type
    SportParamValue:
      properties:
        sport_param:
          $ref: '#/components/schemas/SportParam'
        value:
          oneOf:
            - type: integer
            - type: number
            - type: string
            - type: boolean
      required:
        - sport_param
        - value
    Survey:
      properties:
        banner_image_url:
          description: >-
            Banner image to use with the survey, if any. There is only single
            size that the client must scale appropriately.
          type: string
        description:
          type: string
        graph_options:
          description: >-
            Graph type specific options. For graph type 'bar' this value indicates how many past surveys should be
            included in the comparison.
          type: integer
        graph_type:
          description: >-
            Type of historical comparison to show for this survey. Unsupported graph types must be ignored.
          type: string
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        max_required_programs:
          type: integer
        min_required_programs:
          type: integer
        planned_icon_url:
          $ref: '#/components/properties/iconProperty'
        questions:
          items:
            $ref: '#/components/schemas/Question'
          type: array
        recurring:
          type: boolean
        report_key:
          type: string
        show_answers_summary:
          type: boolean
        title:
          type: string
        url:
          type: string
      required:
        - icon_url
        - id
        - planned_icon_url
        - questions
        - recurring
        - show_answers_summary
        - title
        - url
    SurveyFeedback:
      properties:
        conclusion:
          type: string
        icon_url:
          $ref: '#/components/properties/iconProperty'
        non_square_icon_url:
          description: >-
            (A possibly) non-square icon that should be used with surveys that
            have banner image. {height} variable in the URL needs to be replaced
            with desired height, width is undefined and depends on icon.
            Accepted height values are 40, 60, 80, 120 and 160.
          type: string
        program_ids:
          items:
            type: integer
          type: array
        summary:
          type: string
        title:
          type: string
        type:
          type: string
        visible:
          description: 'When False, feedback should be used only for recommending programs'
          type: boolean
      required:
        - icon_url
        - program_ids
        - type
        - visible
    SurveyResult:
      properties:
        answers:
          items:
            $ref: '#/components/schemas/Answer'
          type: array
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        complete:
          type: boolean
        created_at:
          format: date-time
          type: string
        date:
          format: date
          type: string
        description:
          type: string
        editable:
          type: boolean
        feedbacks:
          items:
            $ref: '#/components/schemas/SurveyFeedback'
          type: array
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        maximum_score:
          description: The maximum score possible to obtain for this survey.
          type: integer
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        previous_results:
          type: object
          description: >-
            Per question results from previous results in format:
            QUESTION_KEY(string) => POINTS(int)
        private:
          type: boolean
        removable:
          type: boolean
        survey:
          $ref: '#/components/schemas/CompactSurvey'
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        user_score:
          description: Stable score the user got from the survey (bigger number is better).
          type: integer
      required:
        - answers
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - complete
        - created_at
        - date
        - editable
        - icon_url
        - id
        - maximum_score
        - private
        - removable
        - survey
        - title
        - url
        - user
        - user_score
    Tag:
      properties:
        name:
          type: string
        type:
          type: string
      required:
        - name
        - type
    TeamMembership:
      properties:
        id:
          type: integer
        status:
          description: Indicates whether the team membership has been accepted or not
          type: string
        team:
          $ref: '#/components/schemas/Group'
        team_id:
          description: Identifier of the team this membership is associated with
          type: integer
      required:
        - id
        - status
        - team
        - team_id
    TextEntry:
      required:
        - created_at
        - date
        - actor
        - id
        - description
        - dictionary
      type: object
      description: >-
        The 'TextEntry' special kind of entry that can not be cheered and
        commented. This kind of entry contain atttributes 'actor', 'description'
        and 'dictionary'. The 'actor' field is a 'CompactUser' object
        identifying the user who performed the action that resulted in the
        creation of this text entry. The 'description' attribute has special
        format contain embedded entries:
      properties:
        id:
          type: integer
          format: int64
        dictionary:
          type: object
          example: |
            {
              "dictionary": {
                  "User:3": {
                    "kind": "User",
                    "name": "Bender Bending Rodríguez",
                    "url": "https://api.heiaheia.com/v2/users/3"
                  },
                  "TrainingGoal:1": {
                    "kind": "TrainingGoal",
                    "name": "I’m gonna go build my own theme park, with blackjack and hookers!",
                    "url": "https://api.heiaheia.com/v2/training_goals/1"
                  }
                }
            }
        description:
          type: string
          description: >-
            The 'description' attribute has special format contain embedded
            entries:
          example: '{{User:3}}''s training goal ({{TrainingGoal:1}})'
        actor:
          $ref: '#/components/schemas/CompactUser'
    Tip:
      properties:
        body:
          type: string
        cheerable:
          type: boolean
        commentable:
          type: boolean
        created_at:
          format: date-time
          type: string
        editable:
          type: boolean
        id:
          type: integer
        image_url:
          $ref: '#/components/properties/iconProperty'
        media:
          items:
            $ref: '#/components/schemas/Media'
          type: array
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
      required:
        - cheerable
        - commentable
        - created_at
        - editable
        - id
        - image_url
        - private
        - removable
        - title
        - url
    TopSport:
      description: >-
        Mode sport param values for this sport based on recent training log
        entries
      properties:
        count:
          type: integer
        distance:
          description: In unit that set in the user settings (km or mi)
          type: integer
        hours:
          type: integer
        minutes:
          type: integer
        mode_values:
          $ref: '#/components/schemas/ModeValues'
        sport:
          $ref: '#/components/schemas/Sport'
        url:
          type: string
      required:
        - count
        - sport
        - url
    TrainingGoal:
      properties:
        cheerable:
          type: boolean
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
    TrainingLog:
      properties:
        avg_hr:
          type: integer
        calories:
          type: integer
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        date:
          format: date
          type: string
        description:
          type: string
        duration_h:
          type: integer
        duration_m:
          type: integer
        duration_s:
          type: integer
        editable:
          type: boolean
        editable_sport:
          type: boolean
        exclude_stats:
          type: boolean
        favourite:
          type: boolean
        gpx_url:
          type: string
        id:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        max_hr:
          type: integer
        media:
          items:
            $ref: '#/components/schemas/Media'
          type: array
        mood:
          description: 'A value from 0 to 5. Where 0 - no mood set, 1 - worst mood, 5 - best'
          type: string
        mood_icon_url:
          type: string
        notes:
          type: string
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        place:
          $ref: '#/components/schemas/Place'
        private:
          type: boolean
        removable:
          type: boolean
        sport:
          $ref: '#/components/schemas/CompactSport'
        sport_param_values:
          description: Contain all sport parameter values even if they have not been set
          items:
            $ref: '#/components/schemas/SportParamValue'
          type: array
        status:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        title:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - editable_sport
        - exclude_stats
        - favourite
        - id
        - mood
        - mood_icon_url
        - notes
        - private
        - removable
        - sport
        - status
        - title
        - user
    User:
      properties:
        avatar_url:
          $ref: '#/components/properties/iconProperty'
        birthday:
          format: date
          type: string
        city:
          type: string
        consent_rewards:
          type: boolean
        country:
          type: string
        created_at:
          format: date-time
          type: string
        daily_steps_target:
          type: integer
        first_name:
          type: string
        friends_count:
          type: integer
        friends_url:
          type: string
        friendship_status:
          description: >-
            "pending" when you sent the friend request, "requested" when friend
            request was sent to you
          type: string
        friendship_url:
          type: string
        gender:
          type: string
        id:
          type: integer
        items_url:
          type: string
        last_name:
          type: string
        level:
          type: string
        linked_with_mixpanel:
          type: boolean
        locale:
          type: string
        location_privacy:
          type: string
        measurement_units:
          type: string
        medals_count:
          type: integer
        medals_url:
          type: string
        my_sports:
          type: string
        privacy:
          type: string
        records_and_highlights:
          type: string
        sleep_target:
          description: Daily sleep target in minutes
          type: integer
        top_sports_url:
          type: string
        training_for:
          type: string
        training_logs_count:
          type: integer
        training_logs_url:
          type: string
        url:
          type: string
      required:
        - avatar_url
        - consent_rewards
        - created_at
        - daily_steps_target
        - first_name
        - friends_count
        - friends_url
        - friendship_status
        - friendship_url
        - id
        - items_url
        - level
        - linked_with_mixpanel
        - locale
        - location_privacy
        - measurement_units
        - medals_count
        - medals_url
        - privacy
        - sleep_target
        - top_sports_url
        - training_logs_count
        - training_logs_url
        - url
    UserConsent:
      properties:
        consent_type:
          type: string
        created_at:
          format: date-time
          type: string
        id:
          type: integer
        scope:
          type: string
      required:
        - consent_type
        - created_at
        - id
        - scope
    Video:
      properties:
        description:
          type: string
        id:
          type: integer
        provider:
          type: string
          enum:
            - vimeo
            - youtube
        title:
          type: string
        url:
          type: string
        video_id:
          type: string
      required:
        - id
        - provider
        - title
        - url
        - video_id
    Wearable:
      properties:
        confirm_url:
          description: >-
            URL where the user should be redirected after requesting connection.
            Only applicable when connection_mechanism is 'email'.
          type: string
        connection_mechanism:
          description: >-
            This value is 'oauth' for most services, indicating regular OAuth
            flow. For Polar the value is 'email'.
          type: string
        disconnectable:
          description: >-
            Tells whether or not the service can be disconnected via API. If
            false user needs to disconnect from the wearable provider side.
          type: boolean
        display_name:
          description: Display name of the service
          type: string
        email:
          description: >-
            Email associated with this service, if any. Only applicable when connection_mechanism is 'email'.
          type: string
        logo_url:
          description: >-
            URL for service logo (png). No size patterns are supported and the
            logo size is always 160x160 pixels.
          type: string
        oauth_redirect_url_pattern:
          description: >-
            Regular expression defining the URL where browser will be redirected
            at the end of the OAuth flow.
          type: string
        oauth_url:
          description: >-
            URL where user should be taken to start the OAuth flow. Only
            returned when explicitly requested.
          type: string
        provider:
          description: Name of the wearable service provider.
          type: string
        status:
          description: Current connection status for this service.
          type: string
        last_sync_time:
          description: Last sync time with this service.
          format: date-time
          type: string
      required:
        - connection_mechanism
        - disconnectable
        - display_name
        - logo_url
        - provider
        - status
    WeeklyPointSystemSummary:
      properties:
        end_date:
          format: date
          type: string
        id:
          type: integer
        image_url:
          description: >-
            Example https://example.com/path/to/image?size={resolution}, where
            {resolution} in (640x344, 750x344, 1125x516, 1242x516)
          type: string
        points_balance:
          type: string
        points_breakdown:
          items:
            $ref: '#/components/schemas/WeeklyPointSystemSummaryBreakdown'
          type: array
        points_earned:
          type: integer
        points_expired:
          type: integer
        points_history:
          items:
            $ref: '#/components/schemas/CompactWeeklyPointSystemSummary'
          type: array
        points_total:
          type: integer
        start_date:
          format: date
          type: string
        title:
          type: string
        url:
          type: string
      required:
        - end_date
        - id
        - image_url
        - points_balance
        - points_breakdown
        - points_earned
        - points_expired
        - points_total
        - start_date
        - title
        - url
    WeeklyPointSystemSummaryBreakdown:
      properties:
        details:
          type: string
        points:
          type: string
        title:
          type: string
      required:
        - points
        - title
    WeeklySummary:
      properties:
        breakdown:
          items:
            $ref: '#/components/schemas/WeeklySummaryBreakdown'
          type: array
        cheerable:
          type: boolean
        commentable:
          type: boolean
        created_at:
          format: date-time
          type: string
        editable:
          type: boolean
        end_date:
          format: date
          type: string
        highlight:
          type: string
        id:
          type: integer
        point_systems:
          items:
            $ref: '#/components/schemas/WeeklyPointSystemSummary'
          type: array
        private:
          type: boolean
        removable:
          type: boolean
        start_date:
          format: date
          type: string
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
      required:
        - breakdown
        - cheerable
        - commentable
        - created_at
        - editable
        - end_date
        - id
        - private
        - removable
        - start_date
        - title
        - url
        - user
    WeeklySummaryBreakdown:
      properties:
        description:
          type: string
        kind:
          type: string
        result:
          type: string
        title:
          type: string
      required:
        - kind
        - title
    WeeklyTarget:
      properties:
        real_amount:
          format: float
          type: number
        target_amount:
          format: float
          type: number
        unit:
          description: Type of the weekly target metric
          type: string
        week:
          description: 'Year and week of the target, e.g. "2015-38"'
          type: string
      required:
        - week
    Weight:
      properties:
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        date:
          format: date
          type: string
        description:
          type: string
        editable:
          type: boolean
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        media:
          items:
            $ref: '#/components/schemas/Media'
          type: array
        notes:
          type: string
        private:
          type: boolean
        removable:
          type: boolean
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        value:
          description: In unit that set in the user settings (kg or lb)
          format: float
          type: number
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - icon_url
        - id
        - notes
        - private
        - removable
        - title
        - url
        - user
        - value
    WellnessEntry:
      properties:
        cheerable:
          type: boolean
        cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        cheers_count:
          type: integer
        cheers_url:
          type: string
        commentable:
          type: boolean
        comments_count:
          type: integer
        comments_url:
          type: string
        created_at:
          format: date-time
          type: string
        date:
          format: date
          type: string
        description:
          type: string
        editable:
          type: boolean
        exclude_stats:
          type: boolean
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        latest_cheers:
          items:
            $ref: '#/components/schemas/Cheer'
          type: array
        latest_comments:
          items:
            $ref: '#/components/schemas/Comment'
          type: array
        media:
          items:
            $ref: '#/components/schemas/Media'
          type: array
        notes:
          type: string
        param_values:
          description: Contain parameter values
          items:
            $ref: '#/components/schemas/WellnessParamValue'
          type: array
        personal_program:
          $ref: '#/components/schemas/CompactPersonalProgram'
        private:
          type: boolean
        removable:
          type: boolean
        status:
          type: string
        title:
          type: string
        url:
          type: string
        user:
          $ref: '#/components/schemas/CompactUser'
        wellness_type:
          $ref: '#/components/schemas/WellnessType'
      required:
        - cheerable
        - cheers_count
        - cheers_url
        - commentable
        - comments_count
        - comments_url
        - created_at
        - date
        - editable
        - exclude_stats
        - icon_url
        - id
        - notes
        - private
        - removable
        - status
        - title
        - url
        - user
        - wellness_type
    WellnessParam:
      properties:
        id:
          type: integer
        name:
          type: string
        options:
          description: Available when value type is radio or checkbox
          items:
            $ref: '#/components/schemas/WellnessParamOption'
          type: array
        value_type:
          type: string
      required:
        - id
        - name
        - value_type
    WellnessParamOption:
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    WellnessParamValue:
      properties:
        param:
          $ref: '#/components/schemas/WellnessParam'
        value:
          oneOf:
            - type: integer
            - type: number
            - type: boolean
      required:
        - param
        - value
    WellnessType:
      properties:
        description:
          type: string
        icon_url:
          $ref: '#/components/properties/iconProperty'
        id:
          type: integer
        is_tip:
          type: boolean
        notesable:
          type: boolean
        params:
          items:
            $ref: '#/components/schemas/WellnessParam'
          type: array
        planned_icon_url:
          $ref: '#/components/properties/iconProperty'
        title:
          type: string
        url:
          type: string
      required:
        - description
        - icon_url
        - id
        - is_tip
        - notesable
        - planned_icon_url
        - title
        - url
