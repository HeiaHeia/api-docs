openapi: 3.0.0
servers:
  - url: 'https://api.heiaheia.com'
    description: "Production"
  - url: 'https://api.h2hstage.com'
    description: "Staging"
  - url: 'http://api.hh.test'
    description: "Development"
info:
  description: |
    This document describes how to use the HeiaHeia Admin API.
    
    Authentication
    ==============
    
    For basic resource owner flow one needs to start by making a call to the
    `/oauth/token` resource:
    
    `POST /oauth/token?username=foo@example.com&password=bar&client_id=id&client_secret=secret`
    
    The server responds with a JSON object containing, among other things,
    the access token:
    
    `{"access_token": "secret_token"}`
    
    Also response contains header `Content-Language` with user's language. 
    
    For any subsequent calls the access token must be passed either as a
    query parameter (`access_token=secret_token`) or as a header
    (`Authorization: Bearer secret_token`).
  version: '1.0.1'
  title: HeiaHeia Admin API
  termsOfService: 'https://www.hintsa.com/terms/'
  contact:
    email: admin@luotaamo.fi
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: organisations
    description: Operations for managing organisations
  - name: memberships
    description: >-
      Operations for managing user accounts / user memberships in 
      organisation
  - name: scheduled surveys
    description: Operations for managing scheduled surveys
  - name: surveys
    description: Operations for managing surveys
  - name: survey categories
    description: Operations for managing survey question categories
  - name: survey questions
    description: Operations for managing survey questions
  - name: admin reports
    description: Operations for managing reports
  - name: tags
    description: Operations for managing organisation tags
  - name: teams
    description: Operations for managing organisation teams
  - name: updates
    description: Operations for following data changes on server
  - name: membership mass actions
    description: >-
      Mass operations that perform operations for a set of users.
      Since the mass operations can affect a large number of users
      and take considerable amount of time, they are performed in
      the background and caller should poll the `actions/{id}` API
      to follow the progress of operation. Note that technically it
      is possible for the operation to complete immediately and the
      caller must be prepared for that too.
  - name: membership imports
    description: >-
      Operations for managing importing users from CSV files
  - name: membership exports
    description: >-
      Operations for managing exporting users to CSV file
  - name: supervisors
    description: >-
      Operations for supervisor to initiate and/or destroy supervisor role under organisation.
  - name: reports
    description: >-
      Operations for accessing and sharing reports. These API calls
      do not require any authentication information, knowing the id
      of the report being accessed is sufficient.
  - name: survey report exports
    description: >-
      Operations for managing exporting survey reports to excel file    

  - name: energy levels
    description: >-
      Access to Parempi Vire "Test your energy levels" survey results.
  - name: statistics
    description: >-
      Access to organisation statistics.
  - name: authentication
    description: >-
      Operations for managing authentication
paths:
  /admin/v1/documents/organisations:
    get:
      tags:
        - organisations
      summary: >-
        List all organisations that can be administered by calling
        user
      operationId: listOrganisations
      parameters:
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/compact'
        - name: size_classes
          in: query
          description: >-
            Only return organisations whose size_class attribute matches any
            of the given size classes. (allowed values 20, 50, 10000)
          schema:
            type: array
            items:
              type: integer
              enum: [20, 50, 10000]
        - name: organisation_ids
          in: query
          description: >-
            Only return organisations whose id matches any of the given ids.
          schema:
            type: array
            items:
              type: integer
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Organisations were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationsResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{id}':
    get:
      tags:
        - organisations
      summary: Return details for a specific organisation
      operationId: showOrganisation
      parameters:
        - name: id
          in: path
          required: true
          description: >-
            Identifier of the organisation whose details to fetch
          schema:
            type: integer
            format: int32
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Organisation was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '400':
          description: >-
            Request was invalid. `error` can be any of: 
            `invalid_param`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/memberships':
    get:
      tags:
        - memberships
      summary: List all user memberships for given organisation
      operationId: listMemberships
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/compact'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Memberships were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationMembershipsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - memberships
      summary: >-
        Add a new member to an organisation. If no user with given
        email address exists in the system, also adds a new user.
      operationId: addMembership
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      requestBody:
        description: >-
          Defines attributes of the membership to add. Note that the
          following properties cannot currently be set for this API
          operation: `active_suveys`. Also, the objects in the `tags` and
          `team_memberships` array are expected to contain `id` field (and
          only the `id` field) as opposed to what the example shows.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationMembership'
      responses:
        '200':
          description: Membership was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationMembership'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `email_already_in_use`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/memberships/{membership_id}':
    get:
      tags:
        - memberships
      summary: Return details for a specific membership
      operationId: showMembership
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_membership_id'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Membership was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationMembership'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership not found. `error` can be any of:
            `membership_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    put:
      tags:
        - memberships
      summary: >-
        Update an existing organisation membership.
      operationId: updateMembership
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_membership_id'
      requestBody:
        description: >-
          Defines new attributes for the membership. Note that the
          following properties cannot currently be set with this API
          operation: `active_suveys`, `tags`, `team_memberships`.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationMembership'
      responses:
        '200':
          description: Membership was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationMembership'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `email_already_in_use`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership not found. `error` can be any of:
            `membership_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - memberships
      summary: Remove a user from an organisation
      operationId: deleteMembership
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_membership_id'
      responses:
        '204':
          description: Membership was successfully removed
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership not found. `error` can be any of:
            `membership_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/scheduled_surveys':
    get:
      tags:
        - scheduled surveys
      summary: List all scheduled surveys
      operationId: listScheduledSurveys
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - name: closed
          in: query
          description: >-
            Defines whether or not to return only scheduled surveys that are
            currently open, only those that are closed, or all scheduled
            surveys (when this parameter is not defined all scheduled
            surveys are returned).
          schema:
            type: boolean
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/compact'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Scheduled surveys were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationScheduledSurveysResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - scheduled surveys
      summary: >-
        Schedule new survey.
      operationId: scheduleSurvey
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      requestBody:
        description: >-
          Defines attributes of the scheduled survey to add.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationScheduledSurvey'
      responses:
        '200':
          description: Scheduled survey was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationScheduledSurvey'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `survey_already_open`,
            `survey_not_found`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/scheduled_surveys/{survey_id}':
    get:
      tags:
        - scheduled surveys
      summary: Return details for a specific scheduled survey
      operationId: showScheduledSurvey
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/scheduled_survey_id'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Scheduled survey was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationScheduledSurvey'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Scheduled survey not found. `error` can be any of:
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    put:
      tags:
        - scheduled surveys
      summary: >-
        Update an existing scheduled survey.
      operationId: updateScheduledSurvey
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/scheduled_survey_id'
      requestBody:
        description: >-
          Defines new attributes for the scheduled survey. The
          `closed` property is automatically updated based on the
          `ends_on` value. Note that the embedded survey object
          cannot in fact be updated.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationScheduledSurvey'
      responses:
        '200':
          description: Scheduled survey was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationScheduledSurvey'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Scheduled survey not found. `error` can be any of:
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - scheduled surveys
      summary: >-
        Remove a sheculed survey (and related reports) from an
        organisation
      operationId: removeScheduledSurvey
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/scheduled_survey_id'
      responses:
        '204':
          description: Scheduled survey was successfully removed
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Scheduled survey not found. `error` can be any of:
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/scheduled_surveys/{survey_id}/breakdown':
    get:
      tags:
        - scheduled surveys
      summary: >-
        Return participant and answer breakdown for a specific scheduled
        survey
      operationId: showScheduledSurveyBreakdown
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/scheduled_survey_id'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Breakdown was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationScheduledSurveyBreakdown'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Scheduled survey not found. `error` can be any of:
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/surveys':
    get:
      tags:
        - surveys
      summary: List all surveys
      operationId: listSurveys
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - name: schedulable
          in: query
          description: >-
            Defines whether or not to return only surveys that can currently
            the scheduled, only those that cannot be scheduled, or all surveys
            that can be accessed (when this parameter is not defined all
            surveys are returned).
          schema:
            type: boolean
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/compact'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Surveys were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSurveysResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - surveys
      summary: >-
        Add a new organisation specific variant of an existing survey.
      operationId: addSurvey
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      requestBody:
        description: >-
          Defines attributes of the survey to add. Note that only the
          parent object can be specified in request body and only the
          `id` field is expected to be present for that object.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '200':
          description: Survey was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `survey_not_found` (missing parent),
            `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/surveys/{survey_id}':
    get:
      tags:
        - surveys
      summary: Return details for a specific survey
      operationId: showSurvey
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Survey was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Survey not found. `error` can be any of:
            `survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/surveys/{survey_id}/categories':
    get:
      tags:
        - survey categories
      summary: List all question categories for a given survey
      operationId: listSurveyCategories
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
        - name: custom
          in: query
          description: >-
            Determines whether to return custom categories (those belonging
            organisation specific survey), non-custom categories (those
            belonging to global survey) or both. Default is to return both.
          schema:
            type: boolean
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/compact'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Survey question categories were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSurveyCategoriesResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object not found. `error` can be `survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - survey categories
      summary: >-
        Add a question category to a survey.
      operationId: addSurveyCategory
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
      requestBody:
        description: >-
          Defines attributes of the survey question category to add.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SurveyQuestionCategory'
      responses:
        '200':
          description: Survey question category was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyQuestionCategory'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `survey_not_owned`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object not found. `error` can be `survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/surveys/{survey_id}/categories/{category_id}':
    put:
      tags:
        - survey categories
      summary: >-
        Updates details of survey question category. Only custom
        categories can be updated.
      operationId: updateSurveyCategory
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
        - name: category_id
          in: path
          required: true
          description: Identifier of the category
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          Defines updated attributes for the survey question category.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SurveyQuestionCategory'
      responses:
        '200':
          description: Survey question category was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyQuestionCategory'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `survey_not_owned`,
            `category_not_owned`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Survey or category not found. `error` can be any of:
            `survey_not_found`, `survey_category_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - survey categories
      summary: Remove a custom survey question category
      operationId: deleteSurveyCategory
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
        - name: category_id
          in: path
          required: true
          description: Identifier of the category
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Category was successfully removed
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `survey_not_owned`, `category_not_owned`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Survey or category not found. `error` can be any of:
            `survey_not_found`, `survey_category_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/surveys/{survey_id}/questions':
    get:
      tags:
        - survey questions
      summary: List all questions for a given survey
      operationId: listSurveyQuestions
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
        - name: custom
          in: query
          description: >-
            Determines whether to return custom questions (those belonging
            to organisation specific survey), non-custom categories (those
            belonging to global survey) or both. Default is to return both.
          schema:
            type: boolean
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Survey questions were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSurveyQuestionsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object not found. `error` can be `survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - survey questions
      summary: >-
        Add a question to a survey.
      operationId: addSurveyQuestion
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
      requestBody:
        description: |
          Defines attributes of the survey question to add.

          **Note:** The request must currently contain property named
          `copy_options_from_parent` with value `true`. This will make
          the server automatically copy options for the question from
          similar question in parent survey. This is the only allowed
          mode of operation for the time being.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SurveyQuestion'
      responses:
        '200':
          description: Survey question was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyQuestion'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `survey_not_owned`,
            `survey_category_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object not found. `error` can be `survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/surveys/{survey_id}/questions/{question_id}':
    put:
      tags:
        - survey questions
      summary: >-
        Updates details of survey question. Only custom
        questions can be updated.
      operationId: updateSurveyQuestion
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
        - name: question_id
          in: path
          required: true
          description: Identifier of the question
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          Defines updated attributes for the survey question.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SurveyQuestion'
      responses:
        '200':
          description: Survey question was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyQuestion'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `survey_not_owned`,
            `question_not_owned`, `survey_category_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Survey or category not found. `error` can be any of:
            `survey_not_found`, `survey_question_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - survey questions
      summary: Remove a custom survey question
      operationId: deleteSurveyQuestion
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/survey_id'
        - name: question_id
          in: path
          required: true
          description: Identifier of the question
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Question was successfully removed
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `survey_not_owned`, `question_not_owned`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Survey or category not found. `error` can be any of:
            `survey_not_found`, `survey_question_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/reports':
    get:
      tags:
        - admin reports
      summary: Fetch available reports for given organisation
      operationId: listReports
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - name: viewed
          in: query
          description: >-
            Allows restricting results by their `viewed` status. By default
            all reports are returned regardless of whether they've been viewed
            or not, if this value is specified only reports matching given
            state are returned.
          schema:
            type: boolean
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Reports successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationSurveyReportsResponse'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - admin reports
      summary: Create report
      operationId: createReport
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrganisationReport'
      responses:
        '200':
          description: Report successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationSurveyReport'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `scheduled_survey_not_found`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/reports/{report_id}':
    put:
      tags:
        - admin reports
      summary: >-
        Update an existing report.
      operationId: updateReport
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - name: report_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: >-
          Defines new attributes for the report. Only the `viewed` property
          can be set.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationSurveyReport'
      responses:
        '200':
          description: Report was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationSurveyReport'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Report not found. `error` can be any of: `report_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/energy_levels':
    get:
      tags:
        - energy levels
      summary: >-
        Get Parempi Vire "Test your energy levels" survey results.
      description: |
        Retruns survey results based on current database state.
        
        This API should be used to obtain data right after desired date
        range has become available and the results stored offline.
        While the API allows getting results from any point in history,
        that typically does not yield desired data because the
        results do not reflect the historical state. E.g. team
        memberships may have changed or users may have been removed
        from the system and the results are generated based on the
        current system state, not the state that existed at the end
        of the given date range.
        
        The participant count in the generated data is the number of
        answers plus the number of planned (unanswered) surveys within
        the date range. If the range is longer than the period at which
        the "Test your energy levels" survey repeats, same user may be
        included in the count multiple times. (Same goes for answers.)
      operationId: getEnergyLevels
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - name: start_date
          in: query
          required: true
          description: >-
            Include answers given on or after this date.
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: true
          description: >-
            Include answers given on or before this date.
          schema:
            type: string
            format: date
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Survey results successfully generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParempiVireSurveyReportData'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/stats':
    get:
      tags:
        - statistics
      summary: >-
        Get current organisation statistics.
      description: >-
        Retruns current live statistics for the organisation. The caller
        is responsible for storing values if showing trends, past values
        or values within a date range is required.
      operationId: getStatistics
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Statistics successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationStats'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/tags':
    get:
      tags:
        - tags
      summary: List all tags for given organisation
      operationId: listTags
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/compact'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Tags were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationTagsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - tags
      summary: >-
        Add a new tag to an organisation.
      operationId: addTag
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      requestBody:
        description: >-
          Defines attributes of the tag to add.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationTag'
      responses:
        '200':
          description: Tag was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTag'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `tag_already_exists`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/tags/{tag_id}':
    get:
      tags:
        - tags
      summary: Return details for a specific tag
      operationId: showTag
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_tag_id'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Tag was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTag'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Tag not found. `error` can be any of: `tag_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    put:
      tags:
        - tags
      summary: >-
        Update an existing tag.
      operationId: updateTag
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_tag_id'
      requestBody:
        description: >-
          Defines new attributes for the tag.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationTag'
      responses:
        '200':
          description: Tag was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTag'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Tag not found. `error` can be any of: `tag_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - tags
      summary: Remove a tag from the system
      operationId: deleteTag
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_tag_id'
      responses:
        '204':
          description: Tag was successfully removed
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Tag not found. `error` can be any of: `tag_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/tags/search':          
    get:
      tags:
        - tags
      summary: Search tags
      operationId: searchTags
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_tag_ids'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Tags were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationTagsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'     
  '/admin/v1/documents/organisations/{organisation_id}/teams':
    get:
      tags:
        - teams
      summary: List all teams for given organisation
      operationId: listTeams
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/compact'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Teams were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationTeamsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - teams
      summary: >-
        Add a new team to an organisation.
      operationId: addTeam
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      requestBody:
        description: >-
          Defines attributes of the team to add. Note that for
          the parent team only the `id` field needs to / can be
          assigned.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationTeam'
      responses:
        '200':
          description: Team was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTeam'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `team_already_exists`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/teams/{team_id}':
    get:
      tags:
        - teams
      summary: Return details for a specific team
      operationId: showTeam
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_team_id'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Team was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTeam'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Team not found. `error` can be any of: `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    put:
      tags:
        - teams
      summary: >-
        Update an existing team.
      operationId: updateTeam
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_team_id'
      requestBody:
        description: >-
          Defines new attributes for the team. Note that only the
          `id` field for the parent needs to / can be defined. To
          clear the parent set the parent to `null`.
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationTeam'
      responses:
        '200':
          description: Team was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTeam'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `circular_team_tree`,
            (parent) `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Team not found. `error` can be any of: `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - teams
      summary: Remove a team from the system
      operationId: deleteTeam
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_team_id'
      responses:
        '204':
          description: Team was successfully removed
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Team not found. `error` can be any of: `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/teams/{team_id}/avatar':
    put:
      tags:
        - teams
      summary: Set a new avatar for a team
      operationId: setAvatar
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_team_id'
      requestBody:
        description: >-
          The image to use as team avatar. JPEG and PNG formats are
          supported. The server automatically generates various
          thumbnail sizes for the avatar.
        content:
          'image/png':
            schema:
              type: string
              format: binary        
          'image/jpeg':
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: New avatar was successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTeam'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Team not found. `error` can be any of: `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - teams
      summary: Remove avatar from a team
      operationId: removeAvatar
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/organisation_team_id'
      responses:
        '200':
          description: Team avatar was successfully removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTeam'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Team not found. `error` can be any of: `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/teams/search':          
    get:
      tags:
        - teams
      summary: Search teams
      operationId: searchTeams
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_team_ids'
      security:
        - admin_api_auth:
            - admin_api
            - read_only_admin_api
      responses:
        '200':
          description: Teams were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationTeam'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable' 
  '/admin/v1/documents/organisations/{organisation_id}/updates':
    get:
      tags:
        - updates
      summary: Fetch updates that have taken place since last call
      description: >-
        This API allows the caller to be notified of updates to
        objects the caller may have cached locally. Rich clients
        typically want to periodically poll this API to get ensure
        they remain up-to-date.
        This API uses different kind of pagination than other APIs
        and instead of passing some kind of page number the caller
        needs to pass the largest `OrganisationUpdate` object id it
        has seen thus far. Before the first call this API the client
        needs to make a call to the `latest_id` API to get initial
        identifier that must be passed to this API.
      operationId: listUpdates
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - name: last_seen_id
          in: query
          required: true
          description: >-
            Largest id seen in the last call to this API operation (or
            the value returned by the `latest_id` API call in case no
            updates have previously been returned).
          example: 592150323
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          description: Updates successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationUpdatesResponse'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/updates/latest_id':
    get:
      tags:
        - updates
      summary: Fetch identifier of latest id
      description: >-
        This API returns initial value that the client must pass
        to the first `updates` API call that it makes. Passing any
        other value than what this API returns may result in the
        `updates` API returning unexpected updates. This API should
        only be called once, after the first call the client needs
        to determine appropriate id based on the `updates` API
        response.
      operationId: getLatestUpdateId
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      responses:
        '200':
          description: Latest id successfully fetched
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 5285685
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/{action_id}':
    get:
      tags:
        - membership mass actions
      summary: >-
        Fetch latest state of a mass admin action
      description: >-
        Returns current state of given mass action. Clients should
        poll this API to observe the progress of a mass action
        until it completes.
      operationId: fetchMassActionDetails
      parameters:
        - name: action_id
          in: path
          description: Identifier of the mass action to access
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Action details were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Action not found. `error` can be any of:
            `mass_action_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/{action_id}/errors':
    get:
      tags:
        - membership mass actions
      summary: List errors for given mass admin action
      operationId: listMassActionErrors
      parameters:
        - name: action_id
          in: path
          description: Identifier of the mass action to access
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          description: Errors were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMassActionErrorsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Mass action not found. `error` can be any of:
            `mass_action_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/enable_hh_core':
    post:
      tags:
        - membership mass actions
      summary: >-
        Enable HeiaHeia (Parempi Vire) functionality for user(s).
      description: >-
        Finds all users matching given filter conditions and enables
        HeiaHeia functionality for matching users who don't already
        have it enabled. Users who already have it enabled are
        unaffected. Users are sent an email with instructions for
        taking the service into use.
      operationId: massEnableHHCore
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/disable_hh_core':
    post:
      tags:
        - membership mass actions
      summary: >-
        Disable HeiaHeia (Parempi Vire) functionality for user(s).
      description: >-
        Finds all users matching given filter conditions and disables
        HeiaHeia functionality for matching users who currently
        have it enabled. Users who already have it disabled are
        unaffected.
      operationId: massDisableHHCore
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/resend_invitation':
    post:
      tags:
        - membership mass actions
      summary: >-
        Resend HeiaHeia (Parempi Vire) invitation to user(s).
      description: >-
        Finds all users matching given filter conditions and resends
        invitation to start using the HeiaHeia (Parempi Vire) service
        to them. The invitation is not resent to users for whom the
        functionality has not been enabled.
      operationId: massResendInvitation
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/add_tag':
    post:
      tags:
        - membership mass actions
      summary: >-
        Add tag for user(s).
      description: >-
        Finds all users matching given filter conditions and adds
        given tag for them. Users who already have the tag are
        unaffected.
      operationId: massAddTag
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: tag_id
          in: query
          example: 520211
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `tag_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/remove_tag':
    post:
      tags:
        - membership mass actions
      summary: >-
        Remove tag from user(s).
      description: >-
        Finds all users matching given filter conditions and removes
        given tag from them. Users who don't currently have the tag
        are unaffected.
      operationId: massRemoveTag
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: tag_id
          in: query
          example: 520211
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/join_team':
    post:
      tags:
        - membership mass actions
      summary: >-
        Add user(s) to team.
      description: >-
        Finds all users matching given filter conditions and makes
        them members of given team. Users who are already members
        of the team are unaffected.
      operationId: massJoinTeam
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: team_id
          in: query
          example: 45328951
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/leave_team':
    post:
      tags:
        - membership mass actions
      summary: >-
        Remove user(s) from team.
      description: >-
        Finds all users matching given filter conditions and removes
        them from given team. Users who aren't currently members of
        the team are unaffected.
      operationId: massLeaveTeam
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: team_id
          in: query
          example: 45328951
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`, `team_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/start_survey':
    post:
      tags:
        - membership mass actions
      summary: >-
        Invite user(s) to take .urvey
      description: >-
        Finds all users matching given filter conditions and activates
        given survey for them. Users for whom the survey is already
        active are unaffected; use the `resend_survey_invitation` API
        to resend invitation for those. Affected users will be sent an
        email invitation to take the survey.
      operationId: massStartSurvey
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: scheduled_survey_id
          in: query
          example: 48373
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`,
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/start_or_resend_survey':
    post:
      tags:
        - membership mass actions
      summary: >-
        Send survey invitation (first or reminder) to user(s)
      description: >-
        Finds all users matching given filter conditions and if the
        survey hasn't already been activated for them it will be
        activated and all matching users (excluding those who have
        already taken the survey) will be sent email invitation to
        take the survey.
      operationId: massStartSurvey
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: scheduled_survey_id
          in: query
          example: 48373
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`,
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/stop_survey':
    post:
      tags:
        - membership mass actions
      summary: >-
        Deactivate survey for user(s).
      description: >-
        Finds all users matching given filter conditions and disables
        given scheduled survey for them. Users who have not been
        invited to take the survey are unaffected. Affected users
        will not be notified but if they try to take the survey using
        link they received earlier, they will be told the survey no
        longer exists.
      operationId: massStopSurvey
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: scheduled_survey_id
          in: query
          example: 48373
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`,
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/control/actions/memberships/resend_survey_invitation':
    post:
      tags:
        - membership mass actions
      summary: >-
        Resend survey invitation to user(s).
      description: >-
        Finds all users matching given filter conditions and resends
        invitation to take the survey to them. The invitation is not
        resent for users who have not been invited to the survey nor
        to users who have already completed the survey.
      operationId: massResendSurveyInvitation
      parameters:
        - $ref: '#/components/parameters/query_organisation_id'
        - name: scheduled_survey_id
          in: query
          example: 48373
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/filter_membership_ids'
        - $ref: '#/components/parameters/filter_team_ids'
        - $ref: '#/components/parameters/filter_tag_ids'
        - $ref: '#/components/parameters/filter_search'
        - $ref: '#/components/parameters/filter_no_filters'
      responses:
        '200':
          description: Action was successfully started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassAction'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `missing_param`,
            `scheduled_survey_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/membership_imports':
    get:
      tags:
        - membership imports
      summary: List all membership import tasks for given organisation
      description: >-
        The imports remain available for an indefinite amount after creation
        before they are cleaned up.
      operationId: listMembershipImports
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - name: state
          in: query
          description: >-
            Only return import tasks whose state matches given value. By
            default all tasks of any state are returned.
          schema:
            type: string
            enum: ["pending", "ongoing", "completed"]
      responses:
        '200':
          description: Membership imports were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationMembershipImportsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    post:
      tags:
        - membership imports
      summary: >-
        Create new membership import task
      description: >-
        The newly created task will be in `pending` state initially. Individual
        operations associated with the task can be listed and toggled on or off
        until the operation is actually started by updating the `state` field
        to value `ongoing`.
      operationId: addMembershipImport
      parameters:
        - $ref: '#/components/parameters/organisation_id'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  description: >-
                    A CSV file containing details of the users to add to the
                    organisation. The CSV must contain columns `first_name`,
                    `last_name` and `email`. The CSV may optionally contain
                    `id` (external identifier of the user if available, should
                    be provided to allow changing the user's email address if
                    user's name changes, otherwise email is used to identify
                    users), `language` (two letter language code like `en`,
                    defaults to `fi`), `hh_enabled` (synonym for `pv_enabled`,
                    whether or not to enabled the HH / PV functionality for the
                    user, default is `false`), `team` (multiple columns with
                    this name can be defined to specify multiple teams, the
                    value may contain bar separated values like `BU1|Unit1`
                    to define team hierarchy), `tag` (multiple columns with
                    this name can be defined to specify multiple tags, the
                    value may contain bar separated value like `Foreman|John`
                    to specify the category of a tag in addition to the name).
                mode:
                  type: string
                  enum:
                    - add_and_update_only
                    - remove_imported
                    - full_replace
                  default: remove_imported
                  description: >-
                    Defines how to handle current organisation members that
                    are not present in the input data. `add_and_update_only`
                    does not remove any users from the organisation, it only
                    adds new ones and updates those with matching email / id.
                    `remove_imported` removes existing members who are not
                    found from input data and have previously been imported
                    (as opposed to being manually created from UI).
                    `full_replace` removes any existing members who are not
                    found from input data.
                hh_core_enabled:
                  type: boolean
                  default: null
                  description: >-
                    Whether or not to enable HH / PV functionality for users.
                    This setting only has effect in case the CSV file does not
                    contain `hh_enabled` / `pv_enabled` column or value of that
                    field is empty for some users. When the value is not
                    provided HH / PV functionality will be disabled for new
                    users and kept in existing state for existing users, when
                    `false` the functionality will be disabled for all users,
                    and when `true` the functionality will be enabled for all
                    users ("all" referring to all users for whom no explicit
                    value has been defined in the CSV).
      responses:
        '200':
          description: Membership import task was successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationMembershipImportTask'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `xls_not_supported` (file type is `.xls(x)`, which
            is not supported), `csv_required` (file type is anything but
            `.csv` or `.xls(x)`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/membership_imports/{import_id}':
    get:
      tags:
        - membership imports
      summary: >-
        Return current state of a specific membership import task
      operationId: showMembershipImport
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/membership_import_id'
      responses:
        '200':
          description: Membership import task was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationMembershipImportTask'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership import not found. `error` can be any of:
            `membership_import_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    put:
      tags:
        - membership imports
      summary: >-
        Update (start) an existing organisation membership import task.
      operationId: updateMembershipImport
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/membership_import_id'
      requestBody:
        required: true
        description: >-
          The only valid state transition for `state` is from `pending` to
          `ongoing`, which starts the import operation.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrganisationMembershipImportTask'
      responses:
        '200':
          description: Membership import was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationMembership'
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`, `email_already_in_use`, `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or 
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership not found. `error` can be any of:
            `membership_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
    delete:
      tags:
        - membership imports
      summary: Remove a membership import task
      operationId: deleteMembershipImport
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/membership_import_id'
      responses:
        '204':
          description: Membership import task was successfully removed
        '400':
          description: >-
            Request was invalid. `error` can be any of:
            `invalid_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation. `error` can
            be any of: `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership import not found. `error` can be any of:
            `membership_import_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/membership_imports/{import_id}/items':
    get:
      tags:
        - membership imports
      summary: List all membership import items for given import task
      operationId: listMembershipImportItems
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/membership_import_id'
        - name: actions
          in: query
          description: >-
            Filter results by action type. Multiple types may be specified.
            If missing/empty all types of actions are returned.
          schema:
            type: array
            items:
              type: string
              enum: ["add", "update", "remove", "error", "noop"]
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          description: Membership import items were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationMembershipImportItemsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership import not found. `error` can be any of:
            `membership_import_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/membership_imports/{import_id}/items/{item_id}':
    put:
      tags:
        - membership imports
      summary: Update a membership import item
      operationId: updateMembershipImportItem
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/membership_import_id'
        - name: item_id
          in: path
          required: true
          description: >-
            Identifier of the membership import item to update
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        description: >-
          The `skip` attribute cannot be updated for items with `action`
          set to `error` or `noop`, those will always be skipped.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganisationMembershipImportItem'
      responses:
        '200':
          description: Membership import item was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationMembershipImportItem'
        '400':
          description: >-
            Invalid request. `error` can be any of `invalid_param`,
            `missing_param`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: >-
            Membership import task or item not found. `error` can be any of:
            `membership_import_not_found`, `membership_import_item_not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/admin/v1/documents/organisations/{organisation_id}/membership_exports':
    post:
      tags:
        - membership exports
      summary: List all membership export tasks for given organisation
      description: >-
        This will exports available members as csv file under the given organisation.
      operationId: listMembershipExports
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/total_required'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - name: state
          in: query
          description: >-
            Only return export tasks whose state matches given value. By
            default all tasks of any state are returned.
          schema:
            type: string
            enum: ["pending", "ongoing", "completed"]
      responses:
        '200':
          description: Membership exports were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationMembershipImportsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'        
  '/admin/v1/documents/organisations/{organisation_id}/report_exports':
  post:
      tags:
        - supervisors
      summary: Create supervisor role to user for one or multiple team.
      description: >-
        This will create supervisor for teams under given organisation.
      operationId: supervisors
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - $ref: '#/components/parameters/user_ids'
        - $ref: '#/components/parameters/team_ids'
        - name: state
          in: query
          description: >-
            Only return the hash of created supervisor and team ids.
          schema:
            type: string
            enum: ["pending", "ongoing", "completed"]
      responses:
        '200':
          description: Supervisor creared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationMembershipImportsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'        
  '/admin/v1/documents/organisations/{organisation_id}/report_exports':
    post:
      tags:
        - survey report exports
      summary: List all survey report export tasks for given organisation
      description: >-
        This will exports available members as csv file under the given organisation.
      operationId: listReportExports
      parameters:
        - $ref: '#/components/parameters/organisation_id'
        - name: secret_id
          in: query
          required: true
          description: >-
            should include secret_id as params to find the data
          schema:
            type: string
        - name: locale
          in: query
          description: >-
            Only return excel file of one survey report in english by default. You can use locale = "fi" for example to get report in Finnish. 
          schema:
            type: string
        - name: team_ids
          in: query
          description: >- 
            Return excel file of one survey report only for required teams and tags
          schema: 
            type: array
            items:
              type: string
        - name: tag_ids
          in: query
          description: >-
            Return excel file of one survey report only for required teams and tags
          schema:
            type: array
            items: 
              type: string
      responses:
        '200':
          description: Survey report exports were successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationMembershipImportsResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/MissingAuthorization'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'  
  '/reports/v1/documents/reports/{id}':
    get:
      tags:
        - reports
      summary: Get metadata of a report
      operationId: getReportMetadata
      parameters:
        - $ref: '#/components/parameters/report_data_instance_metadata_id'
      responses:
        '200':
          description: Metadata was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDataInstanceMetadata'
        '404':
          description: >-
            Report metadata not found. `error` can be any of: `not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/reports/v1/documents/reports/{id}/full_data':
    get:
      tags:
        - reports
      summary: Get actual report data
      operationId: getReportData
      parameters:
        - $ref: '#/components/parameters/report_data_instance_metadata_id'
      responses:
        '200':
          description: Data was successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationSurveyReportData'
        '404':
          description: >-
            Report data not found. `error` can be any of: `not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  '/reports/v1/documents/reports/{id}/shares':
    post:
      tags:
        - reports
      summary: Create new shared report
      operationId: createSharedReport
      parameters:
        - $ref: '#/components/parameters/report_data_instance_metadata_id'
      requestBody:
        required: true
        description: >-
          For `teams`, `tags` and `filter_tags` only the `id`
          property of the objects is required/processed. To regenerate,`force` need to be added with body as an extra param to be `true`.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportDataInstanceMetadata'
      responses:
        '200':
          description: Shared report was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDataInstanceMetadata'
        '404':
          description: >-
            Report data not found. `error` can be any of: `not_found`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  /admin/v1/control/login/send_token:
    post:
      tags:
        - authentication
      summary: >-
        Request one-time authentication token via email.
      description: >-
        All parameters may be provided either as query parameters or in
        request body.
      operationId: sendAuthTokenViaEmail
      parameters:
        - name: email
          in: query
          description: >-
            Email address of the user for whom to send login token.
          required: true
          schema:
            type: string
        - name: language
          in: query
          description: >-
            Language for the login token email. Defaults to user's language
            configured in the backend database.
          schema:
            type: string
      responses:
        '204':
          description: Email was successfully sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganisationsResponse'
        '400':
          description: >-
            Invalid request. `error` can be any of `invalid_param`,
            `missing_param`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Not authorized to perform this API operation or
            organisation not found. `error` can be any of:
            `no_org_access`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          $ref: '#/components/responses/ServerNotAvailable'
  /oauth/token:
    post:
      tags:
        - authentication
      summary: >-
        Create new access token
      description: >-
        All parameters may be provided either as query parameters or in
        request body.
      operationId: createAccessToken
      parameters:
        - name: client_id
          in: query
          description: >-
            Identifier of the client application
          required: true
          schema:
            type: string
        - name: client_secret
          in: query
          description: >-
            Secret of the client application. This should not be exposed
            publicly if technically.
          required: true
          schema:
            type: string
        - name: grant_type
          in: query
          description: >-
            Type of the OAuth grant to use for authentication. One of
            `password`, `magic_token`.
          required: true
          schema:
            type: string
            enum: ["password", "magic_token"]
        - name: username
          in: query
          description: >-
            Email of the user for whom to create access token. Must be
            provided when `grant_type` is `password`.
          schema:
            type: string
        - name: password
          in: query
          description: >-
            User password. Must be provided when `grant_type` is `password`.
          schema:
            type: string
        - name: email
          in: query
          description: >-
            Email of the user for whom to create access token. Must be
            provided when `grant_type` is `password`.
          schema:
            type: string
        - name: magic_token
          in: query
          description: >-
            One-time magic token. Must be provided when `grant_type` is
            `magic_token`.
          schema:
            type: string
      responses:
        '200':
          description: Access token was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: >-
            Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Invalid authentication details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /oauth/revoke:
    post:
      tags:
        - authentication
      summary: >-
        Revoke an access token
      description: >-
        Revokes the access token used to authenticate this request.
      operationId: revokeAccessToken
      responses:
        '204':
          description: Access token was successfully revoked.
        '401':
          $ref: '#/components/responses/MissingAuthorization'
security:
  - admin_api_auth:
      - admin_api
components:
  schemas:
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
          example: C6061FA11655417D9CEA90366054638F
    BreakdownItem:
      type: object
      description: >-
        Participant and answer details for a specific team or tag.
        Depending on the type of the referenced group, only the
        `team` or `tag` property is present.
      properties:
        id:
          type: string
          example: 485402_team_3205492853
        answer_count:
          type: integer
          format: int32
          example: 44
          description: >-
            Number of answers in this group.
        participant_count:
          type: integer
          format: int32
          example: 69
          description: >-
            Number of participants in this group.
        insufficient_data:
          type: boolean
          example: false
          description: >-
            `true` if the group can be shown in report, `false`
            otherwise.
        insufficient_data_reason:
          type: string
          example: null
          enum: ["too_few_results", "too_similar"]
          description: >-
            Identifies the reason why this group cannot be shown
            in the report. `too_few_results` indicates that the
            number of respondents in this group was below required
            threshold. `too_similar` indicates that this group is
            too similar to some other group or combination or groups.
        tag:
          $ref: '#/components/schemas/OrganisationTag'
        team:
          $ref: '#/components/schemas/CompactOrganisationTeam'
    CompactOrganisation:
      type: object
      description: >-
        Compact representation of an organisation.
      properties:
        id:
          type: integer
          format: int32
          example: 840299
        name:
          type: string
          example: Acme Corporation
        size_class:
          type: integer
          format: int32
          example: 50
          description: >-
            One of three values to indicate small (20), medium (50)
            or large (10000) organisation
        su_access:
          type: boolean
          example: false
          readOnly: true
          description: >-
            If this value is `true` the calling user has superuser
            access to this organisation. The su access allows performing
            operations that would otherwise not be allowed, such as
            re-generating a report that has already been viewed. (Other
            restrictions may still apply, e.g. if the API is accessed
            using a token that only permits read-only operations, the
            re-generation is not allowed even if `su_access` is `true`.)
    CompactOrganisationScheduledSurvey:
      type: object
      description: >-
        Compact representation of organisation specific instance
        of a survey. The compact variant of survey is used in some
        API calls to make the responses smaller.
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
          example: 4305091
        started_at:
          type: string
          format: dateTime
          readOnly: true
          description: >-
            Date and time when the organisation survey was initially
            started. Does not change if a closed survey is reopened.
          example: "2018-01-01T08:00:10+00:00"
        ends_on:
          type: string
          format: date
          description: >-
            Date when the survey closes. The survey can still be
            taken on this day. The server sends automatic reminder to
            take the survey the day before closing day (for users
            who haven't yet taken the survey) so it is recommended to
            pick some day between Tuesday and Friday.
          example: "2018-01-14"
        closed:
          type: boolean
          readOnly: true
          example: false
          description: >-
            Defines whether the survey can still be taken or not.
            This attribute is automatically updated when current date
            goes beyond the end date of the survey.
        enabled_questions:
          type: array
          description: >-
            List of enabled questions.
          items:
            type: integer
        survey:
          $ref: '#/components/schemas/CompactSurvey'
    CompactOrganisationTag:
      type: object
      description: >-
        Tags are used to describe non-hierarchy related user
        information. Typical information includes things like the time
        the person has worked for the organisation, age, location,
        etc. Tags are not visible for the end-users themselves.
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
          example: 4395402
        name:
          type: string
          example: 0-1 years
    CompactOrganisationTeam:
      type: object
      description: >-
        Compact representation of a team within an organisation.
        Compact teams are used in API calls that do not directly
        manage teams themselves to make the responses smaller.
      properties:
        id:
          type: integer
          format: int64
          example: 3205492853
        name:
          type: string
          example: Accounting
    CompactSurvey:
      type: object
      description: >-
        Compact representation of a survey. Surveys are global
        constructs that may be referenced from organisation specific
        instances ([Compact]OrganisationScheduledSurvey). The compact
        variant of survey is used in some API calls to make the
        responses smaller.
      properties:
        id:
          type: integer
          format: int32
          example: 8402
        title:
          $ref: '#/components/schemas/MultilanguageString'
    MassAction:
      type: object
      description: >-
        Details of (potentially) asynchronous mass operation.
      properties:
        id:
          type: integer
          format: int32
          example: 629221
        action:
          type: string
          description: >-
            Name of the operation this action is associated with.
          example: enable_hh_core
          enum:
            - enable_hh_core
            - disable_hh_core
            - add_tag
            - remove_tag
            - join_team
            - leave_team
            - start_survey
            - stop_survey
            - resend_invitation
            - resend_survey_invitation
        total:
          type: integer
          format: int32
          description: Number of entries matched by filter params.
          example: 152
        progress:
          type: integer
          format: int32
          description: Number of entries processed so far.
          example: 130
        failed:
          type: integer
          format: int32
          example: 0
          description: >-
            Number of entries for which the operation failed. Use
            the `actions/{id}/errors` API to fetch details of the
            errors.
        noops:
          type: integer
          format: int32
          example: 20
          description: >-
            Number of entries for which the operation was not
            applicable. E.g. for `enable_hh_core` this would be
            the number of members who already had the HeiaHeia
            functionality enabled.
            Note that for some operations `noops` does not
            return expected value due to privacy concerns. E.g.
            the `resend_survey_invitation` does not return the
            number of users for whom the invitation was not
            resent as that would tell which users have taken
            the survey.
        completed:
          type: boolean
          example: false
          description: >-
            `true` if the operation has completed, `false`
            otherwise. Typically `progress` should equal
            `total` for completed actions.
    MassActionError:
      description: >-
        Details of an error that occurred for a mass action.
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: >-
            Identifier of the error object (not the id of the object
            that failed to be updated).
          example: 4002156
        item_type:
          type: string
          enum: ["Organisation", "OrganisationMembership", "OrganisationScheduledSurvey", "OrganisationMembershipImportTask"]
          description: >-
            Identifies the type of object that was attempted to be
            changed.
          example: Organisation
        error:
          $ref: '#/components/schemas/ErrorResponse'
        data:
          type: object
          description: An object corresponding to the `item_type` value.
          example: { "id": 568210, "name": "Acme Co", "size_class": 10000, "total_membership_count": 5041, "hh_core_total_membership_count": 4154, "hh_core_accepted_membership_count": 3747 }
    MultilanguageString:
      type: object
      readOnly: true
      description: >-
        Translated string. English and Finnish are typically always
        defined, other languages may or may not be available
        depending on the use-case.
      properties:
        en:
          type: string
          example: Some string
        fi:
          type: string
          example: Jokin teksti
        sv:
          type: string
          example: Något text
    WriteableMultilanguageString:
      type: object
      description: >-
        Translated string. English must always be provided, other language
        should be set according to usage.
      properties:
        en:
          type: string
          example: Some string
        fi:
          type: string
          example: Jokin teksti
        sv:
          type: string
          example: Något text
    NewOrganisationReport:
      type: object
      properties:
        sheduled_survey:
          $ref: '#/components/schemas/NewOrganisationReportSurvey'
    NewOrganisationReportSurvey:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: >-
            Identifier of the scheduled survey for which to create a report
          example: 85205
    Organisation:
      description: Full representation of an organisation.
      allOf:
        - $ref: '#/components/schemas/CompactOrganisation'
        - type: object
          properties:
            total_membership_count:
              type: integer
              format: int32
              readOnly: true
              example: 36
              description: >-
                Total number of members currently in the organisation
            hh_core_total_membership_count:
              type: integer
              format: int32
              readOnly: true
              example: '26'
              description: >-
                Total number of members with the HeiaHeia (Parempi
                Vire) functionality enabled
            hh_core_accepted_membership_count:
              type: integer
              format: int32
              readOnly: true
              example: '22'
              description: >-
                Number of members for whom HeiaHeia (Parempi Vire)
                has been enabled and who have taken the service into
                use
            feature_tags:
              type: array
              description: >-
                List of features that have been enabled for this
                organisation. This could for example contain name of
                a feature that is currently in beta mode and not
                generally available but has been explicitly enabled
                for this particular organisation.
              items:
                type: string
    OrganisationMembership:
      type: object
      description: >-
        User membership in a specific organisation along with any
        other user / membership attributes.
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 575602351
        hh_core_enabled:
          type: boolean
          example: true
          description: >-
            Defines whether or not the HeiaHeia (/ Parempi Vire)
            functionality (mobile apps, web interface) is enabled
            for this user in this organisation.
        hh_core_accepted_at:
          type: string
          format: dateTime
          readOnly: true
          example: "2018-01-03T13:24:10+00:00"
          description: >-
            Date and time when user took the HeiaHeia (/ Parempi
            Vire) service into use (always `null` when
            `hh_core_enabled` is `false`).
        email:
          type: string
          example: john.smith@example.com
          description: >-
            User's email address in current organisation. Same user
            may have other email addressess in other organisations
        primary:
          type: boolean
          readOnly: true
          example: true
          description: >-
            True if this is user's primary organisation membership.
            Certain fields (user's name and email) are not editable
            via API for non-primary organisation memberships.
        tags:
          type: array
          description: "User's tags in current organisation"
          items:
            $ref: '#/components/schemas/CompactOrganisationTag'
        team_memberships:
          type: array
          description: >-
            User's team memberships in current organisation. Only
            accepted team memberships are shown (admin defined
            memberships are always accepted).
          items:
            $ref: '#/components/schemas/CompactOrganisationTeam'
        active_surveys:
          type: array
          description: >-
            The open surveys the user has currently been invited to
            take.
          items:
            $ref: '#/components/schemas/CompactOrganisationScheduledSurvey'
        user:
          $ref: '#/components/schemas/User'
    OrganisationMembershipImportTask:
      type: object
      description: >-
        Membership import task. The task is associated with a number of
        import items that define the individual operations to be performed.
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
          example: 9351
        created_at:
          type: string
          format: dateTime
          readOnly: true
          example: "2018-01-08T14:53:40+00:00"
        add_count:
          type: integer
          format: int32
          readOnly: true
          example: 325
          description: >-
            The number of new members that shall be added to the organisation.
        update_count:
          type: integer
          format: int32
          readOnly: true
          example: 67
          description: >-
            The number of members that shall be updated.
        remove_count:
          type: integer
          format: int32
          readOnly: true
          example: 38
          description: >-
            The number of members that shall be removed.
        error_count:
          type: integer
          format: int32
          readOnly: true
          example: 1
          description: >-
            The number of rows that had one or more errors and cannot be
            imported.
        noop_count:
          type: integer
          format: int32
          readOnly: true
          example: 520
          description: >-
            The number of rows that fully matched existing members and do not
            result in any kind of change in the system state.
        state:
          type: string
          enum: ["pending", "ongoing", "completed"]
          example: pending
          description: >-
            Current state of the import task. All new tasks start in
            `pending` state and need to be explicitly updated to `ongoing`
            state to actually start the import.
        unknown_columns:
          type: array
          readOnly: true
          description: >-
            Identifies column names that could not be mapped to any supported
            column. Unknown columns typically indicate an error in the input
            that should be corrected.
            Note that the array of unknown columns may also contain empty
            string. This happens when a column that is missing name altogether
            still has data and is typically also an indication of invalid
            input.
          example: ["teem"]
          items:
            type: string
        missing_columns:
          type: array
          readOnly: true
          description: >-
            Lists required columns that were not defined in the input file.
          example: ["first_name"]
          items:
            type: string
            enum: ["first_name", "last_name", "email"]
        file_name:
          type: string
          readOnly: true
          description: >-
            Name of the file based on which this import task was created.
        applied_count:
          type: integer
          format: int32
          readOnly: true
          example: 0
          description: >-
            Number of individual import operations that have been performed.
            The import task state will change to `completed` when `applied_count`
            reaches `execute_count`.
        execute_count:
          type: integer
          format: int32
          readOnly: true
          example: null
          description: >-
            Number of import operations that will be executed. This value is
            always `null` until the operation is actually started, at which
            point this is computed based on the number of non-error/non-noop
            operations for which `skip` is false.
    OrganisationMembershipImportItem:
      type: object
      description: >-
        Membership import item. The item describes an individual import action
        and can be toggled on or off.
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
          example: 4725485
        action:
          type: string
          enum:
            - add
            - update
            - remove
            - error
            - noop
          readOnly: true
          example: add
          description: >-
            The actual action that will be performed. `error` is a special case
            that indicates there was something wrong with the input data and
            the row could not be processed. `noop` is another special case,
            indicating a member that already exists in the system with exactly
            the same attributes as those specified in the input. `noop` items
            are only created for users explicitly listed in the CSV (i.e if
            performing add/update operation, this does not list the existing
            users in the system that were not included in the CSV).
        skip:
          type: boolean
          default: false
          description: >-
            Defines whether this action should be applied or not. By default
            all actions (except errors) shall be applied but user may be given
            an option to skip actions in case they are undesired for any
            reason.
        updates:
          type: array
          description: >-
            In case `action` is `update` this defines the fields that will be
            updated.
          readOnly: true
          items:
            type: string
            enum:
              - hh_core_enabled
              - language
              - teams
              - tags
              - first_name
              - last_name
              - email
        properties:
          $ref: '#/components/schemas/OrganisationMembershipImportItemProperties'
        errors:
          $ref: '#/components/schemas/OrganisationMembershipImportItemErrors'
    OrganisationMembershipImportItemProperties:
      type: object
      readOnly: true
      description: >-
        Values read from input data for this user. Some fields may be identical
        to existing data (in case `action` is `update` and the `updates` field
        in the import item should be used to see what has actually changed).
      properties:
        hh_core_enabled:
          type: boolean
          example: true
        language:
          type: string
          example: fi
          enum: ["da", "de", "en", "es", "fi", "fr", "it", "no", "pl", "ru", "sl", "sv", "zh"]
        teams:
          type: array
          items:
            type: string
          example: ["Accounting"]
        tags:
          type: array
          items:
            type: string
          example: ["Left handed"]
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Smith
        email:
          type: string
          example: john.smith@example.com
    OrganisationMembershipImportItemErrors:
      type: object
      readOnly: true
      description: >-
        Defines field specific errors that were encountered while parsing the
        input data. Any error prevents importing the entry.
      properties:
        id:
          type: array
          description: >-
            `sequential` is returned if the provided identifiers form a
            sequence where each value is previous plus one (the order does
            not actually need to be sequential, the backend sorts the ids).
            This is practially always an indication of user generating the
            data misunderstanding how the field should be used and manually
            generating identifiers instead of using actual ids from the
            system the data originates from. `duplicate` is returned if the
            same identifier repeats for multiple entries.
          items:
            type: string
            enum: ["sequential", "duplidate"]
        email:
          type: array
          items:
            type: string
            enum: ["duplicate", "invalid", "missing"]
        first_name:
          type: array
          description: >-
            Limit for `too_long` is currently set to 40 characters. While the
            system does support longer names, in the context of importing data
            longer values typically indicate somehow malformed input.
          items:
            type: string
            enum: ["missing", "too_long"]
        last_name:
          type: array
          description: >-
            Limit for `too_long` is currently set to 40 characters. While the
            system does support longer names, in the context of importing data
            longer values typically indicate somehow malformed input.
          items:
            type: string
            enum: ["missing", "too_long"]
        teams:
          type: array
          description: >-
            `circular_team_tree` is returned when a team name that has already
            been seen appears again in the team hierarchy. For example
            `"BU1|Unit1|BU1`. `too_short` is returned when any individual team
            name is not at least 2 characters and `too_long` when any
            individual team name is over 180 characters.
          items:
            type: string
            enum: ["circular_team_tree", "too_long", "too_short"]
        tags:
          type: array
          description: >-
            `too_long` is returned when name is over 180 characters.
          items:
            type: string
            enum: ["too_long"]
        language:
          type: array
          description: >-
            `invalid` is returned if the value is not a language code from the
            set of supported languages.
          items:
            type: string
            enum: ["invalid"]
    OrganisationScheduledSurvey:
      description: >-
        Full representation of organisation specific survey instance.
      allOf:
        - $ref: '#/components/schemas/CompactOrganisationScheduledSurvey'
        - type: object
          properties:
            participant_count:
              type: integer
              format: int32
              readOnly: true
              example: 1320
              description: >-
                Number of users that have been invited to take the
                survey.
            answer_count:
              type: integer
              format: int32
              readOnly: true
              example: 584
              description: >-
                Number of users who have taken the survey so far.
            no_consent_count:
              type: integer
              format: int32
              readOnly: true
              example: 322
              description: >-
                Number of users who have refused to take the survey so far.
            survey:
              $ref: '#/components/schemas/Survey'
    OrganisationScheduledSurveyBreakdown:
      type: object
      description: >-
        Breakdown of how many people were invited to the survey and how
        many actually took it grouped by teams and tags.
      properties:
        minimum_answer_count:
          type: integer
          format: int32
          example: 5
          description: >-
            Minimum number of answers required per group in order for
            the group to be included in actual report.
        items:
          type: array
          items:
            $ref: '#/components/schemas/BreakdownItem'
        total:
          type: integer
          format: int32
          example: 58
          description: >-
            Number of items in the response. The API currently always
            returns all results so this field is redundant and only
            returned for the sake of consistency.
    OrganisationStats:
      type: object
      description: >-
        Current statistics for an organisation.
      properties:
        usage:
          $ref: '#/components/schemas/OrganisationUsageStats'
    OrganisationUsageStats:
      type: object
      description: >-
        Current service usage related statistics.
      properties:
        total_membership_count:
          type: integer
          format: int32
          description: >-
            Number of users currently added to the organisation.
          example: 450
        hh_core_total_membership_count:
          type: integer
          format: int32
          description: >-
            Number of users with HeiaHeia (/ Parempi Vire) functionality
            currently added to the organisation.
          example: 220
        hh_core_accepted_membership_count:
          type: integer
          format: int32
          description: >-
            Number of users with HeiaHeia (/ Parempi Vire) functionality
            who have taken the service into use.
          example: 170
        app_use_count:
          type: integer
          format: int64
          description: >-
            Number of times users belonging to this organisation have used
            the HeiaHeia (/ Parempi Vire) mobile applications. This is
            cumulative counter over the entire time the organisation
            has existed (or since the counter was introduced [2018-03-14],
            whichever is last). Only uses done while the user have belonged
            to the organisation are counted, i.e. if existing HeiaHeia user
            joins new organisation the user's old HeiaHeia use does not
            affect the counter.
          example: 380314
    OrganisationTag:
      allOf:
        - $ref: '#/components/schemas/CompactOrganisationTag'
        - type: object
          properties:
            include_in_team_tag_breakdown:
              type: boolean
              example: true
              readOnly: true
              description: >-
                Defines whether or not this tag should be included in tag
                the report data breakdown for teams that also have breakdown
                enabled and have members with this tag. The value may be
                `null` to indicate that it has not yet been decided whether
                this tag should be included in breakdown or not.
    OrganisationTeam:
      description: >-
        Teams are used to describe organisation hierarchy. They may
        be modeled to a tree structure.
        Team memberships and non-managed teams are visible
        for any user's for whom HH core functionality has been
        enabled.
      allOf:
        - $ref: '#/components/schemas/CompactOrganisationTeam'
        - type: object
          properties:
            avatar_url:
              type: string
              readOnly: true
              example: "https://example.com/path/{size}.png"
              description: >-
                URL containing avatar for the user. Caller must
                replace the {size} placeholder with actual desired
                size (one of 60x60, 80x80, 120x120, 160x160,
                320x320)".
            description:
              type: string
              example: Team for all employees in the accounting dep.
              description: >-
                Optional description of the team. Typically useful for
                defining the purpose of the team in case end-users can
                manage team memberships themselves.
            managed:
              type: boolean
              example: true
              description: >-
                Defines whether end-users can join or leave this team
                or not. For managed teams memberships are always set by
                the administrator as part of user import or explicitly
                via the admin user interface.
            include_in_team_tag_breakdown:
              type: boolean
              example: true
              readOnly: true
              description: >-
                Defines whether or not this team should be included in tag
                specific report data breakdown. The value may be `null` to
                indicate that it has not yet been decided whether this team
                should be included in breakdown or not.
            parent:
              $ref: '#/components/schemas/CompactOrganisationTeam'
    OrganisationSurveyReport:
      description: >-
        Organisation report metadata. Actual report data is accessible via
        a link defined in the metadata. See definition of
        OrganisationSurveyReportData in this document for details about the
        actual report data format.
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
          description: >-
            Identifier of the report.
          example: 38572
        data_instance:
          $ref: '#/components/schemas/CompactReportDataInstanceMetadata'
        viewed:
          type: boolean
          description: >-
            Whether or not the report data has been viewed by the end user.
            This must be set to `true` before `data_instance` can be
            accessed. Once this is `true` the report can no longer be
            re-generated via the API.
          example: true
        first_viewed_at:
          type: string
          format: dateTime
          readOnly: true
          description: >-
            Date and time when report was marked as viwed.
          example: "2018-01-17T09:46:29+00:00"
        generated_at:
          type: string
          format: dateTime
          readOnly: true
          description: >-
            Date and time when the report was generated. This value changes
            whenever the report is regenerated. The reports are automatically
            generated when scheduled surveys close so this can be earlier time
            than `first_viewed_at`. Reports may be regenerated by customer
            support in which case this will be later than `first_viewed_at`.
        scheduled_survey:
          $ref: '#/components/schemas/CompactOrganisationScheduledSurvey'
    OrganisationUpdate:
      description: >-
        Details of any kind of data change that took place on server.
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: >-
            Identifier of the update object (not the id of the object
            that was updated).
          example: 4002156
        item_type:
          type: string
          enum: ["Organisation", "OrganisationMembership", "OrganisationScheduledSurvey"]
          description: Identifies the type of object that was changed
          example: Organisation
        operation:
          type: string
          enum: ["update"]
          description: >-
            Identifies the type of change that took place for the
            object. Currently only `"update"` is supported.
        data:
          type: object
          description: An object corresponding to the `item_type` value.
          example: { "id": 568210, "name": "Acme Co", "size_class": 10000, "total_membership_count": 5041, "hh_core_total_membership_count": 4154, "hh_core_accepted_membership_count": 3747 }
    Survey:
      description: >-
        Full details of a global (non-organisation) survey.
      allOf:
        - $ref: '#/components/schemas/CompactSurvey'
        - type: object
          properties:
            custom:
              type: boolean
              example: false
              readOnly: true
              description: >-
                `true` for surveys that are organisation specific, `false`
                for base surveys that are shared between organisations.
            description:
              $ref: '#/components/schemas/MultilanguageString'
            icon_url:
              type: string
              example: "https://example.com/path/{size}.png"
              readOnly: true
              description: >-
                URL of icon for the survey. Caller must replace the
                {size} placeholder with actual size (one of 48x48,
                72x72, 80x80, 96x96, 120x120, 144x144, 192x192).
            report_key:
              type: string
              readOnly: true
              description: >-
                Identifies the type of report that should be generated
                for this survey.
              default: tyovire
              enum: ["tyovire", "tyoyhteisovire"]
            parent:
              $ref: '#/components/schemas/CompactSurvey'
    User:
      type: object
      description: >-
        The global (non-organisation specific) data related to
        organisation user membership.
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 23684028531
        avatar_url:
          type: string
          readOnly: true
          description: >-
            URL containing avatar for the user. Caller must replace
            the {size} placeholder with actual desired size (one of
            60x60, 80x80, 120x120, 160x160, 320x320)".
          example: "https://example.com/path/{size}.png"
        first_name:
          type: string
          example: John
          description: >-
            User's first name. This property can only be set if
            current organisation context is the user's primary
            organisation.
        last_name:
          type: string
          example: Smith
          description: >-
            User's last name. This property can only be set if current
            organisation context is the user's primary organisation.
        language:
          type: string
          example: fi
          default: en
          enum: ["da", "de", "en", "es", "fi", "fr", "it", "no", "pl", "ru", "sl", "sv", "zh"]
          description: >-
            User's language. This property can only be set if current
            organisation context is the user's primary organisation.
    ListResponse:
      type: object
      properties:
        total:
          type: integer
          format: int32
          example: 1
          description: >-
            Total number of results that would be available accross
            all pages for given request parameters. This value
            typically defaults to `null` when not explicitly
            requested.
    ListMassActionErrorsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/MassActionError'
    ListOrganisationMembershipsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationMembership'
    ListOrganisationMembershipImportsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationMembershipImportTask'
    ListOrganisationMembershipImportItemsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationMembershipImportItem'
    ListOrganisationScheduledSurveysResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationScheduledSurvey'
    ListOrganisationSurveyReportsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationSurveyReport'
    ListOrganisationTagsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationTag'
    ListOrganisationTeamsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationTeam'
    ListOrganisationUpdatesResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrganisationUpdate'
    ListOrganisationsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/CompactOrganisation'
    ListSurveysResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Survey'
    ListSurveyCategoriesResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/SurveyQuestionCategory'
    ListSurveyQuestionsResponse:
      allOf:
        - $ref: '#/components/schemas/ListResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/SurveyQuestion'
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: >-
            Code that identifies in more detail (over the HTTP status
            code) what failed exactly
          default: invalid_param
          enum:
            - invalid_api_version
            - not_found
            - email_already_in_use
            - email_not_found
            - membership_not_found
            - tag_not_found
            - team_not_found
            - mass_action_not_found
            - report_not_found
            - membership_import_not_found
            - membership_import_item_not_found
            - survey_not_found
            - scheduled_survey_not_found
            - report_already_exists
            - report_already_viewed
            - survey_already_open
            - invalid_param
            - missing_param
            - no_org_access
            - xls_not_supported
            - csv_required
            - circular_team_tree
            - unknown_error
        error_description:
          type: string
          description: >-
            Additional details regarding the error. Only used for
            debugging purposes, typically not available in production
            environments
    CompactSurveyQuestionCategory:
      type: object
      description: >-
        Compact representation of question category. Categories are
        used to group similar questions together. Some objects
        expose the category via property called `category_object` and
        `category` property for such objects has the category title.
        This is due to backwards compatibility.
      properties:
        id:
          type: integer
          format: int32
          example: 526
        title:
          $ref: '#/components/schemas/WriteableMultilanguageString'
    SurveyQuestionOption:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: "8430172"
        points:
          type: integer
          format: int32
          example: 5
          description: >-
            Number of points granted for picking this option.
        title:
          $ref: '#/components/schemas/MultilanguageString'
    SurveyQuestionCategory:
      description: >-
        Categories are used to group similar questions together. Some
        objects expose the category via property called
        `category_object` and `category` property for such objects has
        the category title. This is due to backwards compatibility.
      allOf:
        - $ref: '#/components/schemas/CompactSurveyQuestionCategory'
        - type: object
          properties:
            description:
              $ref: '#/components/schemas/MultilanguageString'
            custom:
              type: boolean
              example: false
              readOnly: true
              description: >-
                `true` if this category belongs to organisation
                specific survey, `false` if it belongs to global
                survey.
    SurveyQuestion:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 3214893
        title:
          $ref: '#/components/schemas/WriteableMultilanguageString'
        description:
          $ref: '#/components/schemas/MultilanguageString'
        category:
          $ref: '#/components/schemas/MultilanguageString'
        category_object:
          $ref: '#/components/schemas/CompactSurveyQuestionCategory'
        options:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/SurveyQuestionOption'
        custom:
          type: boolean
          example: false
          readOnly: true
          description: >-
            `true` if this question belongs to organisation
            specific survey, `false` if it belongs to global
            survey.
        enabled:
          type: boolean
          example: true
          description: >-
            `true` if this question is currently enabled and will
            be shown for users taking the survey. If `false` the
            question will not be shown in questionnaires but the
            question can be utilised in later surveys and history
            data shall be available.
        position:
          type: integer
          format: int32
          example: 0
          description: >-
            Defines the position of the question in the survey.
            For inherited surveys parent questions always precede
            child questions.
        kind:
          type: string
          description: >-
            Type of this question.
          enum:
            - radio
        global_comparison_type:
          type: string
          description: >-
            How the answers for this question are compared. Currently
            the only accepted value is "mean", which performs a
            "mean average" comparison.
          enum: ["mean"]
    OrganisationSurveyReportPointCategoryMetadata:
      type: object
      description: >-
        Defines range of possible points users may have scored and the step
        by which category breakdowns are incremented.
      properties:
        minimum:
          type: integer
          format: int32
          description: >-
            Number of points granted if user chose the worst possible option.
          example: 1
        maximum:
          type: integer
          format: int32
          description: >-
            Number of points granted if user chose the best possible option.
          example: 5
        step:
          type: number
          description: >-
            The number of points between each value in point category
            breakdown. E.g. if this value is 0.5, and `minimum` is 1, then
            the first value in point breakdown is percentage of users whose
            average score fell between 1 and 1.4999... points, the second
            value is users whose average was between 1.5 and 1.999...
            points, etc.
          example: 0.5
    OrganisationSurveyQuestionOptionBreakdown:
      type: object
      description: >-
        Breakdown of how many percentages of users picked a specific
        option per question.
      properties:
        "185430":
          type: array
          description: >-
            Breakdown for a specific question. Note that the key is not
            `"186430"` but the actual identifier of the question as a
            string and there is separate key for each question in the
            survey.
          items:
            type: number
          example: [7.5, 12.5, 10, 60, 20]
    OrganisationSurveyReportGlobalData:
      type: object
      description: >-
        Data across all respondents from all organisations.
      properties:
        average_points:
          type: number
          description: Average points for users in the group
          example: 3.435
        answer_percentages:
          type: array
          description: >-
            Question specific average points for users in the group.
            Values are in the same order as the questions defined in
            `OrganisationSurveyReportData`.
          items:
            type: number
          example: [2.8, 3.1699, 4.25, 3.817, 3.5, 3.25]
        breakdown:
          $ref: '#/components/schemas/OrganisationSurveyQuestionOptionBreakdown'
    OrganisationSurveyReportOrganisationData:
      type: object
      description: >-
        Data across all respondents for organisation, team or tag.
      allOf:
        - $ref: '#/components/schemas/OrganisationSurveyReportGlobalData'
        - type: object
          properties:
            participant_count:
              type: integer
              format: int32
              description: >-
                Number of users in this group who were invited to take
                the survey.
              example: 79
            answer_count:
              type: integer
              format: int32
              description: >-
                Number of users in this group who completed the survey.
              example: 51
            point_categories:
              type: array
              description: >-
                Distribution of users in this group in specific point
                categories. See `OrganisationSurveyReportPointCategoryMetadata`
                for more details.
              items:
                type: number
              example: [0, 2.439, 0, 4.878, 12.1951, 14.6341, 34.1463, 31.7073]
            insufficient_data:
              type: boolean
              description: >-
                `true` if this group either has too few answers or cannot be
                included in results due to some other reason. When this is `true`
                any values apart from `participant_count` and `answer_count` for
                this object will be `null`.
              example: false
            insufficient_data_reason:
              type: string
              enum:
                - too_few_results
                - too_similar
              description: >-
                Defines why the data for this group cannot be provided.
                `too_few_results` is used when the answer count is below the
                minimum required threshold, `too_similar` is used when the
                survey participants of this group of users is very similar
                to some other group(s) of users returned elsewhere in the
                report.
              example: null
    OrganisationSurveyReportTeamData:
      type: object
      description: >-
        Data across all respondents in a team. In addition to the full team
        data, this object may also contain tag specific breakdown for the
        team in question.
      allOf:
        - $ref: '#/components/schemas/OrganisationSurveyReportOrganisationData'
        - type: object
          properties:
            tags:
              $ref: '#/components/schemas/OrganisationSurveyReportTagsData'
    ParempiVireSurveyReportTeamsData:
      type: object
      description: >-
        Results for all teams in the organisation. This object contains keys
        for each team, not just a single key. The key values are team ids as
        strings. This is subset of the data contained in
        OrganisationSurveyReportTeamsData
      properties:
        "53894821":
          $ref: '#/components/schemas/OrganisationSurveyReportOrganisationData'
    OrganisationSurveyReportTeamsData:
      type: object
      description: >-
        Results for all teams in the organisation. This object contains keys
        for each team, not just a single key. The key values are team ids as
        strings.
      properties:
        "53894821":
          $ref: '#/components/schemas/OrganisationSurveyReportTeamData'
    OrganisationSurveyReportTagsData:
      type: object
      description: >-
        Results for all tags in the organisation. This object contains keys
        for each tag, not just a single key. The key values are tag ids as
        strings.
      properties:
        "472683":
          $ref: '#/components/schemas/OrganisationSurveyReportOrganisationData'
    ParempiVireSurveyReportDataInstance:
      type: object
      description: >-
        Results for a single date range for a Parempi Vire survey. This is a subset
        of the data contained in OrganisationSurveyReportDataInstance
      properties:
        minimum_answer_count:
          type: integer
          format: int32
          description: >-
            Minimum number of answers required per group in order to show
            results for the group. This limit is applied to protect the
            privacy of individual respondents.
          example: 7
        global:
          $ref: '#/components/schemas/OrganisationSurveyReportGlobalData'
        organisation:
          $ref: '#/components/schemas/OrganisationSurveyReportOrganisationData'
        teams:
          $ref: '#/components/schemas/ParempiVireSurveyReportTeamsData'
    OrganisationSurveyReportDataInstance:
      type: object
      description: >-
        Results for a single instance of a survey.
      properties:
        generated_at:
          type: string
          format: dateTime
          description: Date and time when this data was generated
          example: "2018-01-10T09:24:32+00:00"
        start_time:
          type: string
          format: dateTime
          description: >-
            Start time of the scheduled survey this data is associated with
          example: "2018-01-02T07:01:10+00:00"
        ends_on:
          type: string
          format: date
          description: >-
            End date of the scheduled survey this data is associated with
          example: "2018-01-09"
        minimum_answer_count:
          type: integer
          format: int32
          description: >-
            Minimum number of answers required per group in order to show
            results for the group. This limit is applied to protect the
            privacy of individual respondents.
          example: 5
        point_categories:
          $ref: '#/components/schemas/OrganisationSurveyReportPointCategoryMetadata'
        global:
          $ref: '#/components/schemas/OrganisationSurveyReportGlobalData'
        organisation:
          $ref: '#/components/schemas/OrganisationSurveyReportOrganisationData'
        teams:
          $ref: '#/components/schemas/OrganisationSurveyReportTeamsData'
        tags:
          $ref: '#/components/schemas/OrganisationSurveyReportTagsData'
    ParempiVireSurveyReportData:
      type: object
      description: >-
        Data for a Parempi Vire "Test your energy levels" survey report. This is
        a subset of the data available in OrganisationSurveyReportData.
      properties:
        teams:
          type: array
          description: >-
            All teams in the organisation at the time the report was generated.
          items:
            $ref: '#/components/schemas/OrganisationTeam'
        questions:
          type: array
          description: >-
            List of questions associated with the survey this report is for.
          items:
            $ref: '#/components/schemas/SurveyQuestion'
        instances:
          type: array
          description: >-
            List of report instances. This currently only ever contains single
            entry. API consumers are responsible for storing old data in order
            to provide trends and comparisons.
          items:
            $ref: '#/components/schemas/ParempiVireSurveyReportDataInstance'
    OrganisationSurveyReportData:
      type: object
      description: >-
        The actual data contained within an organisation survey report. Example
        report is available [here](https://pv-reports-production.s3.amazonaws.com/33042a21-e6f1-4eef-9e37-b73030e97397/organisation_2806_survey_key_tyovire2_82_4e81984d411f96f0933a57196471a2d3c8cfcd5e85647069cf937d6f465b.json).
      properties:
        organisation:
          $ref: '#/components/schemas/Organisation'
        survey:
          $ref: '#/components/schemas/Survey'
        teams:
          type: array
          description: >-
            All teams in the organisation at the time the report was generated.
          items:
            $ref: '#/components/schemas/OrganisationTeam'
        tags:
          type: array
          description: >-
            All tags in the organisation at the time the report was generated.
          items:
            $ref: '#/components/schemas/OrganisationTag'
        question_categories:
          type: array
          description: >-
            List of categories associated with the survey this report is for.
          items:
            $ref: '#/components/schemas/SurveyQuestionCategory'
        questions:
          type: array
          description: >-
            List of questions associated with the survey this report is for.
          items:
            $ref: '#/components/schemas/SurveyQuestion'
        instances:
          type: array
          description: >-
            List of report instances. If the same survey has been taken
            multiple times, this list contains results also for any old
            instances of the same survey. Order is from most recent
            result to the oldest.
          items:
            $ref: '#/components/schemas/OrganisationSurveyReportDataInstance'
    CompactReportDataInstanceMetadata:
      type: object
      description: >-
        Metadata describing instance of a report (either the original report
        or a shared copy of the original).
      properties:
        id:
          type: string
          readOnly: true
          description: >-
            Identifier of the report data instance metadata. This is a long
            alphanumeric sequence.
          example: "04df2fd4b131b4421da9025b291c1fce1e8dbfaee1395d5acd8dba2efb48"
        type:
          type: string
          readOnly: true
          description: >-
            Type of this report data instance. Currently always
            `"OrganisationSurveyReportDataInstance"`
          example: "OrganisationSurveyReportDataInstance"
    ReportDataInstanceMetadata:
      type: object
      allOf:
        - $ref: '#/components/schemas/CompactReportDataInstanceMetadata'
        - type: object
          properties:
            original:
              type: boolean
              readOnly: true
              description: >-
                `true` if this is the original copy of report data. `false`
                if this is a shared copy of the original report (which
                typically contains only a subset of the original data).
            ui_state:
              type: object
              description: >-
                Client defined state of UI by the time this shared copy
                of a report was created. `null` for original versions of
                report.
              example: { "company_selected": true, "selected_team_ids": [], "selected_tag_ids": [] }
            teams:
              type: array
              description: >-
                List of teams included in this report data instance. If
                all teams are included this is set to `null` and when no
                teams are included this is empty array.
              items:
                $ref: '#/components/schemas/CompactOrganisationTeam'
              example: []
            tags:
              type: array
              description: >-
                List of tags included in this report data instance. If
                all tags are included this is set to `null` and when no
                tags are included this is empty array.
              items:
                $ref: '#/components/schemas/CompactOrganisationTag'
              example: []
            filter_tags:
              type: array
              description: >-
                List of team filter tags included in this report data instance.
                If all filter tags are included this is set to `null` and when
                no filter tags are included this is empty array.
              items:
                $ref: '#/components/schemas/CompactOrganisationTag'
              example: null
  responses:
    MissingAuthorization:
      description: Missing authorization information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerNotAvailable:
      description: Server is temporarily unavailable. Try again later
  parameters:
    organisation_id:
      name: organisation_id
      in: path
      required: true
      description: Identifier of the organisation being accessed
      schema:
        type: integer
        format: int32
    query_organisation_id:
      name: organisation_id
      in: query
      required: true
      description: Identifier of the organisation being accessed
      schema:
        type: integer
        format: int32
    organisation_membership_id:
      name: membership_id
      in: path
      required: true
      description: >-
        Identifier of the organisation membership being accessed
      schema:
        type: integer
        format: int32
    membership_import_id:
      name: import_id
      in: path
      required: true
      description: >-
        Identifier of the membership import task being accessed
      schema:
        type: integer
        format: int32
    organisation_tag_id:
      name: tag_id
      in: path
      required: true
      description: Identifier of the tag being accessed
      schema:
        type: integer
        format: int32
    organisation_team_id:
      name: team_id
      in: path
      required: true
      description: Identifier of the team being accessed
      schema:
        type: integer
        format: int64
    scheduled_survey_id:
      name: survey_id
      in: path
      required: true
      description: >-
        Identifier of the scheduled survey being accessed
      schema:
        type: integer
        format: int32
    survey_id:
      name: survey_id
      in: path
      required: true
      description: Identifier of the survey to access
      schema:
        type: integer
        format: int32
    report_data_instance_metadata_id:
      name: id
      in: path
      required: true
      description: >-
        Identifier of the report data instance being accessed
      schema:
        type: string
    total_required:
      name: total_required
      in: query
      description: >-
        Defines whether or not total number of results should be
        returned in the response. Producing the total number of
        results causes additional load on server side so it is
        advised not to request it unless the client actually makes
        use of the value. (default `false`)
      schema:
        type: boolean
        default: false
    page:
      name: page
      in: query
      description: >-
        Result page to return. Offset is automatically calculated
        based on the `per_page` parameter.
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    user_ids:
      name: user_ids
      in: path
      required: true
      description: >-
        Identifier of the organisation membership being accessed
      schema:
        type: array
        example: 61056,61068
        items:
          type: integer
          format: int64 
    team_ids:
      name: team_ids
      in: path
      required: true
      description: >-
        Identifier of the organisation teams being accessed
      schema:
        type: array
        example: 61056,61068
        items:
          type: integer
          format: int64 
    per_page:
      name: per_page
      in: query
      description: >-
        Number of results to return per page. (default 20, maximum
        500)
      schema:
        type: integer
        format: int32
        default: 20
        minimum: 1
        maximum: 500
    compact:
      name: compact
      in: query
      description: >-
        Controls whether the API returns full or compact objects.
        Default in most cases is to return compact objects, which
        are smaller and require less resources to produce on server
        side.
      schema:
        type: boolean
        example: true
    filter_membership_ids:
      name: membership_ids
      in: query
      description: >-
        Explicit identifiers of the memberships being accessed.
      schema:
        type: array
        example: 857343062,785275391
        items:
          type: integer
          format: int64
    filter_search:
      name: search
      in: query
      description: >-
        Text search to perform for the result set produced by
        other filter conditions (if any). Matches against users'
        full names.
        Multiple words may be provided, in which case all of them
        must (partially) match some words in the user name. E.g.
        `Jo Do` would match `John Doe` but not `Jane Doe`.
      schema:
        type: string
        example: John Doe
    filter_tag_ids:
      name: tag_ids
      in: query
      description: >-
        Identifiers of the tags whose members are being accessed.
        This is additive between tags and teams.
      schema:
        type: array
        example: 61056,61068
        items:
          type: integer
          format: int64
    filter_team_ids:
      name: team_ids
      in: query
      description: >-
        Identifiers of the teams whose members are being accessed.
        This is additive between teams and tags.
      schema:
        type: array
        example: 52045263,52045266
        items:
          type: integer
          format: int64
    filter_no_filters:
      name: no_filters
      in: query
      description: >-
        This parameter must be provided and set to `true` when no
        filters are provided. This is intended as a safeguard to
        prevent accidentally applying an operation to all users
        when no users were intended to be affected.
      schema:
        type: boolean
        example: false
  securitySchemes:
    admin_api_auth:
      type: oauth2
      flows:
        password:
          tokenUrl: /oauth/token
          scopes:
            admin_api: Full access to the admin API
            read_only_admin_api: Read-only access to admin API